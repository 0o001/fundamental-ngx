(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{XNI3:function(e,n,t){"use strict";t.r(n),t.d(n,"PlatformFormGeneratorDocsModule",function(){return xe});var o={};t.r(o),t.d(o,"default",function(){return I});var r={};t.r(r),t.d(r,"default",function(){return G});var a={};t.r(a),t.d(a,"default",function(){return M});var i={};t.r(i),t.d(i,"default",function(){return k});var m={};t.r(m),t.d(m,"default",function(){return q});var l={};t.r(l),t.d(l,"default",function(){return P});var s={};t.r(s),t.d(s,"default",function(){return Y});var u={};t.r(u),t.d(u,"default",function(){return W});var c={};t.r(c),t.d(c,"default",function(){return X});var d={};t.r(d),t.d(d,"default",function(){return _});var p={};t.r(p),t.d(p,"default",function(){return j});var f={};t.r(f),t.d(f,"default",function(){return E});var b={};t.r(b),t.d(b,"default",function(){return R});var g={};t.r(g),t.d(g,"default",function(){return N});var h=t("tyNb"),v=t("jzzn"),y=t("IywY"),V=t("t9W5"),F=t("4eiC"),w=t("Ccq/"),C=t("MG0F"),S=t("G6Ao"),L=t("fXoL"),D=t("dor/"),O=t("kt86"),A=t("RJTZ"),x=t("Kpas");let T=(()=>{class e{}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fd-platform-form-generator-header"]],decls:37,vars:0,consts:[["module","PlatformFormGeneratorModule","subPackage","form"]],template:function(e,n){1&e&&(L.Wb(0,"header"),L.Vc(1,"Form generator"),L.Vb(),L.Wb(2,"description"),L.Vc(3," Form generator is an utility that helps to generate form with appropriate controls. "),L.Wb(4,"h3"),L.Vc(5,"Form generator features"),L.Vb(),L.Wb(6,"ul"),L.Wb(7,"li"),L.Vc(8,"Support of form layout with multiple responsive columns;"),L.Vb(),L.Wb(9,"li"),L.Vc(10,"Automatic component rendering without predefined template;"),L.Vb(),L.Wb(11,"li"),L.Vc(12,"Ability to extend the default set of controls with custom ones;"),L.Vb(),L.Wb(13,"li"),L.Vc(14,"Dynamic validators for each form item"),L.Vb(),L.Wb(15,"li"),L.Vc(16,"Dynamic options for choice-based components"),L.Vb(),L.Vb(),L.Wb(17,"h3"),L.Vc(18,"Questions in Form Generator can have:"),L.Vb(),L.Wb(19,"ul"),L.Wb(20,"li"),L.Vc(21,"Individual labels with async function support;"),L.Vb(),L.Wb(22,"li"),L.Vc(23,"Support for adding a hint for question;"),L.Vb(),L.Wb(24,"li"),L.Vc(25,"Ability to set available variants for question with async function support;"),L.Vb(),L.Wb(26,"li"),L.Vc(27,"Transformation function which will transform form item value as defined in function itself;"),L.Vb(),L.Wb(28,"li"),L.Vc(29,"Standard Angular validators support;"),L.Vb(),L.Wb(30,"li"),L.Vc(31,"Question-specific validator function with asynchronous functions support;"),L.Vb(),L.Wb(32,"li"),L.Vc(33,"Rule function that can determine if question should be shown to the user;"),L.Vb(),L.Vb(),L.Vb(),L.Rb(34,"import",0),L.Rb(35,"fd-header-tabs"),L.Rb(36,"router-outlet"))},directives:[D.a,O.a,A.a,x.a,h.h],encapsulation:2}),e})();var I='<fdp-form-generator columnLayout="XL2-L2-M2-S1" mainTitle="Default Form Generator example" [formItems]="questions" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',G="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DatetimeAdapter, DATE_TIME_FORMATS, FdDate, FdDatetimeAdapter, FD_DATETIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200) => {\n    return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n};\n\n@Component({\n    selector: 'fdp-platform-form-generator-example',\n    templateUrl: './platform-form-generator-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorExampleComponent {\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name',\n            message: 'Your name',\n            default: 'John',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            validate: async (value) => {\n\n                await dummyAwaitablePromise();\n\n                return value === 'John' ? null : 'Your name should be John';\n            },\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value) ? null : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age',\n            controlType: 'number',\n            message: () => 'Your age',\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship',\n            message: 'Your citizenship',\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: (formValue) => {\n                return [\n                    'USA',\n                    'Germany',\n                    {\n                        label: 'Ukraine',\n                        value: 'Ukraine'\n                    }\n                ];\n            },\n            validators: [Validators.required],\n            validate: (input, formValue) => {\n                return input?.length > 0 ? null : 'You need to select some country';\n            }\n        },\n        {\n            type: 'list',\n            name: 'department',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: ['IT', 'Accounting', 'Management'],\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: async () => {\n                await dummyAwaitablePromise();\n                return ['Front-end', 'Back-end'];\n            },\n            when: async (formValue: any) => {\n                await dummyAwaitablePromise();\n                return formValue.department === 'IT';\n            },\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n                return value === 'Yes' ? null : 'You must agree';\n            },\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => {\n                return result === 'Angular' ? null : 'You should pick Angular';\n            }\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) => {\n                return value !== null && value.year < 2020 ? null : 'You need to be born before 2020';\n            },\n            transformer: (value: FdDate) => {\n                return value?.toDateString();\n            }\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n}\n",M='<fdp-form-generator columnLayout="XL2-L2-M2-S1" mainTitle="Default Form Generator example" [formItems]="questions" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',k="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { DatetimeAdapter, DATE_TIME_FORMATS, FdDate, FdDatetimeAdapter, FD_DATETIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200) => {\n    return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n};\n\n@Component({\n    selector: 'fdp-platform-form-generator-observable-example',\n    templateUrl: './platform-form-generator-observable-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorObservableExampleComponent {\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name2',\n            message: 'Your name',\n            default: 'John',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            // Emulate some API request\n            validate: (value) => of(value === 'John' ? null : 'Your name should be John').pipe(delay(400)),\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password2',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value) ? null : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age2',\n            controlType: 'number',\n            message: () => of('Your age').pipe(delay(400)),\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio2',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship2',\n            message: 'Your citizenship',\n            validators: [Validators.required],\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: (formValue) => of([\n                'USA',\n                'Germany',\n                {\n                    label: 'Ukraine',\n                    value: 'Ukraine'\n                }\n            ]),\n            validate: (input, formValue) => {\n                return input?.length > 0 ? null : 'You need to select some country';\n            }\n        },\n        {\n            type: 'list',\n            name: 'department2',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: () => of(['IT', 'Accounting', 'Management']),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality2',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: () => of(['Front-end', 'Back-end']),\n            when: (formValue: any) => of(formValue.department === 'IT'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree2',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: (value) => of(value === 'Yes' ? null : 'You must agree'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option2',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => of(result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday2',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) => of(value !== null && value.year < 2020 ? null : 'You need to be born before 2020'),\n            transformer: (value: FdDate) => {\n                return value?.toDateString();\n            }\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature2',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n}\n",q='<fdp-form-generator [formItems]="questions" mainTitle="Custom element in Form Generator example" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',P="import { Component } from '@angular/core';\n\nimport {\n    dynamicFormFieldProvider,\n    dynamicFormGroupChildProvider,\n    BaseDynamicFormGeneratorControl,\n    FormGeneratorService,\n    DynamicFormItem,\n    DynamicFormValue\n} from '@fundamental-ngx/platform/form';\n\n@Component({\n    selector: 'fdp-form-generator-slider',\n    template: `\n        <ng-container [formGroup]=\"form\">\n           <fdp-slider [contentDensity]=\"formItem.guiOptions?.contentDensity\"\n                       [customValues]=\"formItem.choices\"\n                       [showTicks]=\"formItem.guiOptions?.additionalData?.showTicks\"\n                       [showTicksLabels]=\"formItem.guiOptions?.additionalData?.showTicksLabels\"\n                       [name]=\"name\"\n                       [formControlName]=\"name\"></fdp-slider>\n        </ng-container>\n    `,\n    viewProviders: [dynamicFormFieldProvider, dynamicFormGroupChildProvider]\n})\nexport class PlatformFormGeneratorCustomSliderElement extends BaseDynamicFormGeneratorControl {\n    constructor() {\n        super();\n    }\n}\n\n@Component({\n    selector: 'fdp-platform-form-generator-custom-component-example',\n    templateUrl: './platform-form-generator-custom-component-example.component.html'\n})\nexport class PlatformFormGeneratorCustomComponentExampleComponent {\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'slider',\n            name: 'some_slider',\n            message: 'Slider component',\n            default: {value: 30, label: 'Thirty'},\n            choices: [\n                {value: 10, label: 'Ten'},\n                {value: 20, label: 'Twenty'},\n                {value: 30, label: 'Thirty'},\n                {value: 40, label: 'Forty'},\n            ],\n            guiOptions: {\n                column: 1,\n                additionalData: {\n                    showTicks: true,\n                    showTicksLabels: true\n                }\n            }\n        }\n    ]\n\n    constructor(\n        private readonly _formGeneratorService: FormGeneratorService\n    ) {\n        this._formGeneratorService.addComponent(PlatformFormGeneratorCustomSliderElement, ['slider']);\n    }\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    onFormSubmitted(value: DynamicFormValue): void {\n        this.formValue = value;\n    }\n}\n",Y='<fdp-form-generator columnLayout="XL2-L2-M2-S1" mainTitle="Default Form Generator example" [formItems]="questions" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit button outside form generator"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',W="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { DatetimeAdapter, DATE_TIME_FORMATS, FdDate, FdDatetimeAdapter, FD_DATETIME_FORMATS } from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200) => {\n    return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n};\n\n@Component({\n  selector: 'fdp-platform-form-generator-programatic-submit',\n  templateUrl: './platform-form-generator-programatic-submit.component.html',\n  providers: [\n    // Note that this is usually provided in the root of your application.\n    // Due to the limit of this example we must provide it on this level.\n    {\n        provide: DatetimeAdapter,\n        useClass: FdDatetimeAdapter\n    },\n    {\n        provide: DATE_TIME_FORMATS,\n        useValue: FD_DATETIME_FORMATS\n    }\n]\n})\nexport class PlatformFormGeneratorProgramaticSubmitComponent {\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name3',\n            message: 'Your name',\n            default: 'John',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            // Emulate some API request\n            validate: (value) => of(value === 'John' ? null : 'Your name should be John').pipe(delay(400)),\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password3',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value) ? null : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age3',\n            controlType: 'number',\n            message: () => of('Your age').pipe(delay(400)),\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio3',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship3',\n            message: 'Your citizenship',\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: (formValue) => of([\n                'USA',\n                'Germany',\n                {\n                    label: 'Ukraine',\n                    value: 'Ukraine'\n                }\n            ]),\n            validators: [Validators.required],\n            validate: (input, formValue) => {\n                return input?.length > 0 ? null : 'You need to select some country';\n            }\n        },\n        {\n            type: 'list',\n            name: 'department3',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: () => of(['IT', 'Accounting', 'Management']),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality3',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: () => of(['Front-end', 'Back-end']),\n            when: (formValue: any) => of(formValue.department === 'IT'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree3',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: (value) => of(value === 'Yes' ? null : 'You must agree'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option3',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => of(result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday3',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) => of(value !== null && value.year < 2020 ? null : 'You need to be born before 2020'),\n            transformer: (value: FdDate) => {\n                return value?.toDateString();\n            }\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature3',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n}\n",X='<fdp-form-generator [formItems]="formItems" mainTitle="Custom validation in Form Generator example" (formCreated)="onFormCreated()"></fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n',_="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DynamicFormItem, FormGeneratorComponent, FormGeneratorService } from '@fundamental-ngx/platform/form';\n\n@Component({\n  selector: 'fdp-platform-form-generator-custom-error-example',\n  templateUrl: './platform-form-generator-custom-error-example.component.html'\n})\nexport class PlatformFormGeneratorCustomErrorExampleComponent {\n\n    formCreated = false;\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    formItems: DynamicFormItem[] = [\n        {\n            type: 'input',\n            message: 'Custom validation error example',\n            name: 'custom_validation_error_example',\n            required: true,\n            validate: (value) => value ? null : 'This field needs to be filled',\n            guiOptions: {\n                hint: 'Keep it empty to see validation error on submit'\n            }\n        },\n        {\n            type: 'input',\n            message: 'Default validation error example',\n            name: 'default_validation_error_example',\n            validators: [Validators.required],\n            guiOptions: {\n                hint: 'Keep it empty to see validation error on submit'\n            }\n        },\n        {\n            type: 'input',\n            name: 'custom_validation_example',\n            message: 'Custom generic validation error example',\n            validators: [Validators.pattern('^\\\\d+$')],\n            guiOptions: {\n                hint: 'This field will fail validation if non-numeric symbols are present in the input'\n            }\n        }\n    ];\n\n    constructor(\n        private readonly _formGeneratorService: FormGeneratorService\n    ) {\n        this._formGeneratorService.addValidationErrorHint('pattern', 'This field is not matching the pattern');\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n}\n",j='<fdp-form-generator columnLayout="XL2-L2-M2-S1" mainTitle="Form Generator with field layout example" [formItems]="questions" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',E="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport {\n    DatetimeAdapter,\n    DATE_TIME_FORMATS,\n    FdDate,\n    FdDatetimeAdapter,\n    FD_DATETIME_FORMATS\n} from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200) => {\n    return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n};\n\n@Component({\n    selector: 'fdp-platform-form-generator-field-layout-example',\n    templateUrl: './platform-form-generator-field-layout-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorFieldLayoutExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name1',\n            message: 'Your name: XL: 1, L: 2, M: 1, S: 2',\n            default: 'John',\n            guiOptions: {\n                hint: 'Some contextual hint: XL: 1, L: 2, M: 1, S: 2',\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 },\n            },\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n\n                return value === 'John' ? null : 'Your name should be John';\n            },\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password1',\n            message: 'Password: XL: 1, L: 2, M: 2, S: 1',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value)\n                    ? null\n                    : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character';\n            },\n            guiOptions: {\n                hint: 'XL: 1, L: 2, M: 2, S: 1',\n                columnLayout: { XL: 1, L: 2, M: 2, S: 1 },\n            }\n        },\n        {\n            type: 'number',\n            name: 'age1',\n            controlType: 'number',\n            message: () => 'Your age: XL: 1, L: 2, M: 1, S: 1',\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 },\n                hint: 'XL: 1, L: 2, M: 1, S: 1',\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio1',\n            message: 'Your biography: XL: 2, L: 1, M: 2, S: 1',\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                hint: 'XL: 2, L: 1, M: 2, S: 1',\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship1',\n            message: 'Your citizenship: XL: 2 true, L: 1 false, M: 2 true, S: 1 false',\n            guiOptions: {\n                inline: true,\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                inlineLayout: { XL: true, L: false, M: true, S: false },\n                hint: 'XL: 2 true, L: 1 false, M: 2 true, S: 1 false',\n            },\n            choices: (formValue) => {\n                return [\n                    'USA',\n                    'Germany',\n                    {\n                        label: 'Ukraine',\n                        value: 'Ukraine'\n                    }\n                ];\n            },\n            validators: [Validators.required],\n            validate: (input, formValue) => {\n                return input?.length > 0 ? null : 'You need to select some country';\n            }\n        },\n        {\n            type: 'list',\n            name: 'department1',\n            message: 'Department you work in: column: 2',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: ['IT', 'Accounting', 'Management'],\n            guiOptions: {\n                column: 2,\n                hint: 'column: 2',\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality1',\n            message: 'Main speciality: XL: 2, L: 1, M: 1, S: 1',\n            validators: [Validators.required],\n            choices: async () => {\n                await dummyAwaitablePromise();\n                return ['Front-end', 'Back-end'];\n            },\n            when: async (formValue: any) => {\n                await dummyAwaitablePromise();\n                return formValue.department === 'IT';\n            },\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 1, S: 1 },\n                hint: 'XL: 2, L: 1, M: 1, S: 1',\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree1',\n            message: 'Do you agree with terms and conditions?: XL: 2, L: 1, M: 2, S: 1',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n                return value === 'Yes' ? null : 'You must agree';\n            },\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                hint: 'XL: 2, L: 1, M: 2, S: 1',\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option1',\n            message: 'Primary front-end framework: XL: 2 false, L: 1 true, M: 1 false, S: 1 true',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 1 },\n                inlineLayout: { XL: false, L: true, M: false, S: true },\n                hint: 'XL: 2 false, L: 1 true, M: 1 false, S: 1 true'\n            },\n            validators: [Validators.required],\n            validate: (result: string) => {\n                return result === 'Angular' ? null : 'You should pick Angular';\n            }\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday1',\n            message: 'Your birthday: XL: 1, L: 2, M: 1, S: 1',\n            guiOptions: {\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 },\n                hint: 'XL: 1, L: 2, M: 1, S: 1'\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) => {\n                return value !== null && value.year < 2020 ? null : 'You need to be born before 2020';\n            },\n            transformer: (value: FdDate) => {\n                return value?.toDateString();\n            }\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature1',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n",R='<fdp-form-generator columnLayout="XL2-L2-M2-S1" mainTitle="Form Generator example without colons in label" [formItems]="questions" (formSubmitted)="onFormSubmitted($event)" (formCreated)="onFormCreated()">\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">\n    Form value: {{ formValue|json }}\n</p>\n',N="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200) => {\n    return new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n};\n\n@Component({\n  selector: 'fdp-platform-form-generator-no-colons-example',\n  templateUrl: './platform-form-generator-no-colons-example.component.html'\n})\nexport class PlatformFormGeneratorNoColonsExampleComponent {\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'labelWithoutColon',\n            message: 'Label without colon',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1,\n                appendColon: false\n            }\n        },\n        {\n            type: 'input',\n            name: 'labelWithColon',\n            message: 'Label with colon',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1,\n                appendColon: true\n            }\n        },\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n}\n",J=t("ddaM"),U=t("X1JU"),z=t("mrSG"),K=t("3Pt+"),$=t("GKNN"),B=t("dNKr"),Q=t("ofXK"),Z=t("D676");function H(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",3),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}function ee(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}const ne=(e=200)=>new Promise(n=>{setTimeout(()=>{n(!0)},e)});let te=(()=>{class e{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name",message:"Your name",default:"John",guiOptions:{hint:"Some contextual hint",column:1},validate:e=>Object(z.a)(this,void 0,void 0,function*(){return yield ne(),"John"===e?null:"Your name should be John"}),transformer:e=>Object(z.a)(this,void 0,void 0,function*(){return yield ne(),`${e}777`}),validators:[K.A.required]},{type:"password",controlType:"password",name:"password",message:"Password",validators:[K.A.required],validate:e=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(e)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age",controlType:"number",message:()=>"Your age",default:"18",validators:[K.A.required],guiOptions:{column:1}},{type:"editor",name:"bio",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship",message:"Your citizenship",guiOptions:{inline:!0,column:2},choices:e=>["USA","Germany",{label:"Ukraine",value:"Ukraine"}],validators:[K.A.required],validate:(e,n)=>(null==e?void 0:e.length)>0?null:"You need to select some country"},{type:"list",name:"department",message:"Department you work in",validators:[K.A.required],default:"IT",choices:["IT","Accounting","Management"],guiOptions:{column:2}},{type:"list",name:"main_speciality",message:"Main speciality",validators:[K.A.required],choices:()=>Object(z.a)(this,void 0,void 0,function*(){return yield ne(),["Front-end","Back-end"]}),when:e=>Object(z.a)(this,void 0,void 0,function*(){return yield ne(),"IT"===e.department}),guiOptions:{column:2}},{type:"confirm",name:"agree",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[K.A.required],validate:e=>Object(z.a)(this,void 0,void 0,function*(){return yield ne(),"Yes"===e?null:"You must agree"}),guiOptions:{column:2}},{type:"radio",name:"choose_best_option",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[K.A.required],validate:e=>"Angular"===e?null:"You should pick Angular"},{type:"datepicker",name:"birthday",message:"Your birthday",guiOptions:{column:1},validators:[K.A.required],validate:e=>null!==e&&e.year<2020?null:"You need to be born before 2020",transformer:e=>null==e?void 0:e.toDateString()},{type:"switch",name:"enable_feature",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){return Object(z.a)(this,void 0,void 0,function*(){this.formValue=e,this.loading=!0,yield ne(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-example"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},features:[L.Cb([{provide:$.b,useClass:$.e},{provide:$.a,useValue:$.c}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,H,1,0,"fdp-button",1),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,ee,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(1),L.vc("ngIf",n.formCreated),L.Db(2),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Q.o,Z.a],pipes:[Q.h],encapsulation:2}),e})();var oe=t("5HkS"),re=t("Hxo2"),ae=t("LRne"),ie=t("3E0/");function me(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",3),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}function le(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}const se=(e=200)=>new Promise(n=>{setTimeout(()=>{n(!0)},e)});let ue=(()=>{class e{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name2",message:"Your name",default:"John",guiOptions:{hint:"Some contextual hint",column:1},validate:e=>Object(ae.a)("John"===e?null:"Your name should be John").pipe(Object(ie.a)(400)),transformer:e=>Object(z.a)(this,void 0,void 0,function*(){return yield se(),`${e}777`}),validators:[K.A.required]},{type:"password",controlType:"password",name:"password2",message:"Password",validators:[K.A.required],validate:e=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(e)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age2",controlType:"number",message:()=>Object(ae.a)("Your age").pipe(Object(ie.a)(400)),default:"18",validators:[K.A.required],guiOptions:{column:1}},{type:"editor",name:"bio2",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship2",message:"Your citizenship",validators:[K.A.required],guiOptions:{inline:!0,column:2},choices:e=>Object(ae.a)(["USA","Germany",{label:"Ukraine",value:"Ukraine"}]),validate:(e,n)=>(null==e?void 0:e.length)>0?null:"You need to select some country"},{type:"list",name:"department2",message:"Department you work in",validators:[K.A.required],default:"IT",choices:()=>Object(ae.a)(["IT","Accounting","Management"]),guiOptions:{column:2}},{type:"list",name:"main_speciality2",message:"Main speciality",validators:[K.A.required],choices:()=>Object(ae.a)(["Front-end","Back-end"]),when:e=>Object(ae.a)("IT"===e.department),guiOptions:{column:2}},{type:"confirm",name:"agree2",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[K.A.required],validate:e=>Object(ae.a)("Yes"===e?null:"You must agree"),guiOptions:{column:2}},{type:"radio",name:"choose_best_option2",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[K.A.required],validate:e=>Object(ae.a)("Angular"===e?null:"You should pick Angular")},{type:"datepicker",name:"birthday2",message:"Your birthday",guiOptions:{column:1},validators:[K.A.required],validate:e=>Object(ae.a)(null!==e&&e.year<2020?null:"You need to be born before 2020"),transformer:e=>null==e?void 0:e.toDateString()},{type:"switch",name:"enable_feature2",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){return Object(z.a)(this,void 0,void 0,function*(){this.formValue=e,this.loading=!0,yield se(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-observable-example"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},features:[L.Cb([{provide:$.b,useClass:$.e},{provide:$.a,useValue:$.c}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,me,1,0,"fdp-button",1),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,le,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(1),L.vc("ngIf",n.formCreated),L.Db(2),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Q.o,Z.a],pipes:[Q.h],encapsulation:2}),e})();var ce=t("UEpg");function de(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}let pe=(()=>{class e extends S.a{constructor(){super()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-form-generator-slider"]],features:[L.Cb([],[S.A,S.B]),L.Ab],decls:2,vars:7,consts:[[3,"formGroup"],[3,"contentDensity","customValues","showTicks","showTicksLabels","name","formControlName"]],template:function(e,n){1&e&&(L.Ub(0,0),L.Rb(1,"fdp-slider",1),L.Tb()),2&e&&(L.vc("formGroup",n.form),L.Db(1),L.vc("contentDensity",null==n.formItem.guiOptions?null:n.formItem.guiOptions.contentDensity)("customValues",n.formItem.choices)("showTicks",null==n.formItem.guiOptions||null==n.formItem.guiOptions.additionalData?null:n.formItem.guiOptions.additionalData.showTicks)("showTicksLabels",null==n.formItem.guiOptions||null==n.formItem.guiOptions.additionalData?null:n.formItem.guiOptions.additionalData.showTicksLabels)("name",n.name)("formControlName",n.name))},directives:[K.r,K.j,ce.a,K.q,K.h],encapsulation:2}),e})(),fe=(()=>{class e{constructor(e){this._formGeneratorService=e,this.formCreated=!1,this.questions=[{type:"slider",name:"some_slider",message:"Slider component",default:{value:30,label:"Thirty"},choices:[{value:10,label:"Ten"},{value:20,label:"Twenty"},{value:30,label:"Thirty"},{value:40,label:"Forty"}],guiOptions:{column:1,additionalData:{showTicks:!0,showTicksLabels:!0}}}],this._formGeneratorService.addComponent(pe,["slider"])}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){this.formValue=e}}return e.\u0275fac=function(n){return new(n||e)(L.Qb(S.d))},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-custom-component-example"]],decls:5,vars:3,consts:[["mainTitle","Custom element in Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form"],[4,"ngIf"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Rb(1,"fdp-button",1),L.Vb(),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,de,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(3),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Z.a,Q.o],pipes:[Q.h],encapsulation:2}),e})();function be(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",3),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}function ge(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}const he=(e=200)=>new Promise(n=>{setTimeout(()=>{n(!0)},e)});let ve=(()=>{class e{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name3",message:"Your name",default:"John",guiOptions:{hint:"Some contextual hint",column:1},validate:e=>Object(ae.a)("John"===e?null:"Your name should be John").pipe(Object(ie.a)(400)),transformer:e=>Object(z.a)(this,void 0,void 0,function*(){return yield he(),`${e}777`}),validators:[K.A.required]},{type:"password",controlType:"password",name:"password3",message:"Password",validators:[K.A.required],validate:e=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(e)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age3",controlType:"number",message:()=>Object(ae.a)("Your age").pipe(Object(ie.a)(400)),default:"18",validators:[K.A.required],guiOptions:{column:1}},{type:"editor",name:"bio3",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship3",message:"Your citizenship",guiOptions:{inline:!0,column:2},choices:e=>Object(ae.a)(["USA","Germany",{label:"Ukraine",value:"Ukraine"}]),validators:[K.A.required],validate:(e,n)=>(null==e?void 0:e.length)>0?null:"You need to select some country"},{type:"list",name:"department3",message:"Department you work in",validators:[K.A.required],default:"IT",choices:()=>Object(ae.a)(["IT","Accounting","Management"]),guiOptions:{column:2}},{type:"list",name:"main_speciality3",message:"Main speciality",validators:[K.A.required],choices:()=>Object(ae.a)(["Front-end","Back-end"]),when:e=>Object(ae.a)("IT"===e.department),guiOptions:{column:2}},{type:"confirm",name:"agree3",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[K.A.required],validate:e=>Object(ae.a)("Yes"===e?null:"You must agree"),guiOptions:{column:2}},{type:"radio",name:"choose_best_option3",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[K.A.required],validate:e=>Object(ae.a)("Angular"===e?null:"You should pick Angular")},{type:"datepicker",name:"birthday3",message:"Your birthday",guiOptions:{column:1},validators:[K.A.required],validate:e=>Object(ae.a)(null!==e&&e.year<2020?null:"You need to be born before 2020"),transformer:e=>null==e?void 0:e.toDateString()},{type:"switch",name:"enable_feature3",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){return Object(z.a)(this,void 0,void 0,function*(){this.formValue=e,this.loading=!0,yield he(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-programatic-submit"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},features:[L.Cb([{provide:$.b,useClass:$.e},{provide:$.a,useValue:$.c}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit button outside form generator",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit button outside form generator",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,be,1,0,"fdp-button",1),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,ge,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(1),L.vc("ngIf",n.formCreated),L.Db(2),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Q.o,Z.a],pipes:[Q.h],encapsulation:2}),e})();function ye(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",2),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}let Ve=(()=>{class e{constructor(e){this._formGeneratorService=e,this.formCreated=!1,this.formItems=[{type:"input",message:"Custom validation error example",name:"custom_validation_error_example",required:!0,validate:e=>e?null:"This field needs to be filled",guiOptions:{hint:"Keep it empty to see validation error on submit"}},{type:"input",message:"Default validation error example",name:"default_validation_error_example",validators:[K.A.required],guiOptions:{hint:"Keep it empty to see validation error on submit"}},{type:"input",name:"custom_validation_example",message:"Custom generic validation error example",validators:[K.A.pattern("^\\d+$")],guiOptions:{hint:"This field will fail validation if non-numeric symbols are present in the input"}}],this._formGeneratorService.addValidationErrorHint("pattern","This field is not matching the pattern")}submitForm(){this.formGenerator.submit()}onFormCreated(){this.formCreated=!0}}return e.\u0275fac=function(n){return new(n||e)(L.Qb(S.d))},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-custom-error-example"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},decls:2,vars:2,consts:[["mainTitle","Custom validation in Form Generator example",3,"formItems","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,ye,1,0,"fdp-button",1)),2&e&&(L.vc("formItems",n.formItems),L.Db(1),L.vc("ngIf",n.formCreated))},directives:[B.a,Q.o,Z.a],encapsulation:2}),e})();function Fe(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",3),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}function we(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}const Ce=(e=200)=>new Promise(n=>{setTimeout(()=>{n(!0)},e)});let Se=(()=>{class e{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name1",message:"Your name: XL: 1, L: 2, M: 1, S: 2",default:"John",guiOptions:{hint:"Some contextual hint: XL: 1, L: 2, M: 1, S: 2",columnLayout:{XL:1,L:2,M:1,S:1}},validate:e=>Object(z.a)(this,void 0,void 0,function*(){return yield Ce(),"John"===e?null:"Your name should be John"}),transformer:e=>Object(z.a)(this,void 0,void 0,function*(){return yield Ce(),`${e}777`}),validators:[K.A.required]},{type:"password",controlType:"password",name:"password1",message:"Password: XL: 1, L: 2, M: 2, S: 1",validators:[K.A.required],validate:e=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(e)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{hint:"XL: 1, L: 2, M: 2, S: 1",columnLayout:{XL:1,L:2,M:2,S:1}}},{type:"number",name:"age1",controlType:"number",message:()=>"Your age: XL: 1, L: 2, M: 1, S: 1",default:"18",validators:[K.A.required],guiOptions:{columnLayout:{XL:1,L:2,M:1,S:1},hint:"XL: 1, L: 2, M: 1, S: 1"}},{type:"editor",name:"bio1",message:"Your biography: XL: 2, L: 1, M: 2, S: 1",guiOptions:{columnLayout:{XL:2,L:1,M:2,S:1},hint:"XL: 2, L: 1, M: 2, S: 1"}},{type:"checkbox",name:"citizenship1",message:"Your citizenship: XL: 2 true, L: 1 false, M: 2 true, S: 1 false",guiOptions:{inline:!0,columnLayout:{XL:2,L:1,M:2,S:1},inlineLayout:{XL:!0,L:!1,M:!0,S:!1},hint:"XL: 2 true, L: 1 false, M: 2 true, S: 1 false"},choices:e=>["USA","Germany",{label:"Ukraine",value:"Ukraine"}],validators:[K.A.required],validate:(e,n)=>(null==e?void 0:e.length)>0?null:"You need to select some country"},{type:"list",name:"department1",message:"Department you work in: column: 2",validators:[K.A.required],default:"IT",choices:["IT","Accounting","Management"],guiOptions:{column:2,hint:"column: 2"}},{type:"list",name:"main_speciality1",message:"Main speciality: XL: 2, L: 1, M: 1, S: 1",validators:[K.A.required],choices:()=>Object(z.a)(this,void 0,void 0,function*(){return yield Ce(),["Front-end","Back-end"]}),when:e=>Object(z.a)(this,void 0,void 0,function*(){return yield Ce(),"IT"===e.department}),guiOptions:{columnLayout:{XL:2,L:1,M:1,S:1},hint:"XL: 2, L: 1, M: 1, S: 1"}},{type:"confirm",name:"agree1",message:"Do you agree with terms and conditions?: XL: 2, L: 1, M: 2, S: 1",choices:["Yes","No"],validators:[K.A.required],validate:e=>Object(z.a)(this,void 0,void 0,function*(){return yield Ce(),"Yes"===e?null:"You must agree"}),guiOptions:{columnLayout:{XL:2,L:1,M:2,S:1},hint:"XL: 2, L: 1, M: 2, S: 1"}},{type:"radio",name:"choose_best_option1",message:"Primary front-end framework: XL: 2 false, L: 1 true, M: 1 false, S: 1 true",choices:["Angular","React","VueJS"],guiOptions:{columnLayout:{XL:2,L:1,M:1},inlineLayout:{XL:!1,L:!0,M:!1,S:!0},hint:"XL: 2 false, L: 1 true, M: 1 false, S: 1 true"},validators:[K.A.required],validate:e=>"Angular"===e?null:"You should pick Angular"},{type:"datepicker",name:"birthday1",message:"Your birthday: XL: 1, L: 2, M: 1, S: 1",guiOptions:{columnLayout:{XL:1,L:2,M:1,S:1},hint:"XL: 1, L: 2, M: 1, S: 1"},validators:[K.A.required],validate:e=>null!==e&&e.year<2020?null:"You need to be born before 2020",transformer:e=>null==e?void 0:e.toDateString()},{type:"switch",name:"enable_feature1",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){return Object(z.a)(this,void 0,void 0,function*(){this.formValue=e,this.loading=!0,yield Ce(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-field-layout-example"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},features:[L.Cb([{provide:$.b,useClass:$.e},{provide:$.a,useValue:$.c}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Form Generator with field layout example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,Fe,1,0,"fdp-button",1),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,we,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(1),L.vc("ngIf",n.formCreated),L.Db(2),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Q.o,Z.a],pipes:[Q.h],encapsulation:2}),e})();function Le(e,n){if(1&e){const e=L.Xb();L.Wb(0,"fdp-button",3),L.jc("click",function(){return L.Kc(e),L.nc().submitForm()}),L.Vb()}}function De(e,n){if(1&e&&(L.Wb(0,"p"),L.Vc(1),L.oc(2,"json"),L.Vb()),2&e){const e=L.nc();L.Db(1),L.Xc(" Form value: ",L.pc(2,1,e.formValue),"\n")}}let Oe=(()=>{class e{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"labelWithoutColon",message:"Label without colon",guiOptions:{hint:"Some contextual hint",column:1,appendColon:!1}},{type:"input",name:"labelWithColon",message:"Label with colon",guiOptions:{hint:"Some contextual hint",column:1,appendColon:!0}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(e){return Object(z.a)(this,void 0,void 0,function*(){this.formValue=e,this.loading=!0,yield((e=200)=>new Promise(n=>{setTimeout(()=>{n(!0)},e)}))(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["fdp-platform-form-generator-no-colons-example"]],viewQuery:function(e,n){if(1&e&&L.ad(S.c,1),2&e){let e;L.Gc(e=L.kc())&&(n.formGenerator=e.first)}},decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Form Generator example without colons in label",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(e,n){1&e&&(L.Wb(0,"fdp-form-generator",0),L.jc("formSubmitted",function(e){return n.onFormSubmitted(e)})("formCreated",function(){return n.onFormCreated()}),L.Vb(),L.Tc(1,Le,1,0,"fdp-button",1),L.Wb(2,"p"),L.Vc(3),L.Vb(),L.Tc(4,De,3,3,"p",2)),2&e&&(L.vc("formItems",n.questions),L.Db(1),L.vc("ngIf",n.formCreated),L.Db(2),L.Xc("Form created: ",n.formCreated,""),L.Db(1),L.vc("ngIf",n.formValue))},directives:[B.a,Q.o,Z.a],pipes:[Q.h],encapsulation:2}),e})();const Ae=[{path:"",component:T,children:[{path:"",component:(()=>{class e{constructor(){this.defaultFormGenerator=[{language:"html",code:o,fileName:"platform-form-generator-example"},{language:"typescript",code:r,fileName:"platform-form-generator-example",component:"PlatformFormGeneratorExampleComponent"}],this.defaultObservableFormGenerator=[{language:"html",code:a,fileName:"platform-form-generator-observable-example"},{language:"typescript",code:i,fileName:"platform-form-generator-observable-example",component:"PlatformFormGeneratorObservableExampleComponent"}],this.customFormGenerator=[{language:"html",code:m,fileName:"platform-form-generator-custom-component-example"},{language:"typescript",code:l,fileName:"platform-form-generator-custom-component-example",component:"PlatformFormGeneratorCustomComponentExampleComponent"}],this.programaticSubmit=[{language:"html",code:s,fileName:"platform-form-generator-programatic-submit"},{language:"typescript",code:u,fileName:"platform-form-generator-programatic-submit",component:"PlatformFormGeneratorProgramaticSubmitComponent"}],this.customErrors=[{language:"html",code:c,fileName:"platform-form-generator-custom-error-example"},{language:"typescript",code:d,fileName:"platform-form-generator-custom-error-example",component:"PlatformFormGeneratorCustomErrorExampleComponent"}],this.formFieldLayoutGenerator=[{language:"html",code:p,fileName:"platform-form-generator-field-layout-example"},{language:"typescript",code:f,fileName:"platform-form-generator-field-layout-example",component:"PlatformFormGeneratorFieldLayoutExampleComponent"}],this.noLabelColonsFiles=[{language:"html",code:b,fileName:"platform-form-generator-no-colons-example"},{language:"typescript",code:g,fileName:"platform-form-generator-no-colons-example",component:"PlatformFormGeneratorNoColonsExampleComponent"}]}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=L.Kb({type:e,selectors:[["app-form-generator"]],decls:110,vars:7,consts:[["id","with-promise","componentName","form-generator"],[3,"exampleFiles"],["id","with-observable","componentName","form-generator"],["id","custom","componentName","form-generator"],["id","programmatic-submit","componentName","form-generator"],["id","custom-errors","componentName","form-generator"],["id","field-layout","componentName","form-generator"],["id","no-colons","componentName","form-generator"]],template:function(e,n){1&e&&(L.Wb(0,"fd-docs-section-title",0),L.Vc(1," Form Generator usage with Promise-based values\n"),L.Vb(),L.Wb(2,"description"),L.Vc(3," This example shows default scenario of the Form Generator usage with values received from Promise-like functions.\n"),L.Vb(),L.Wb(4,"component-example"),L.Rb(5,"fdp-platform-form-generator-example"),L.Vb(),L.Rb(6,"code-example",1),L.Rb(7,"separator"),L.Wb(8,"fd-docs-section-title",2),L.Vc(9," Form Generator usage with Observable-based values\n"),L.Vb(),L.Wb(10,"description"),L.Vc(11," This example shows default scenario of the Form Generator usage with values received from Observable objects.\n"),L.Vb(),L.Wb(12,"component-example"),L.Rb(13,"fdp-platform-form-generator-observable-example"),L.Vb(),L.Rb(14,"code-example",1),L.Rb(15,"separator"),L.Wb(16,"fd-docs-section-title",3),L.Vc(17," Form generator usage with custom controls\n"),L.Vb(),L.Wb(18,"description"),L.Vc(19," If default set of controls is not enough to cover your needs, "),L.Wb(20,"code"),L.Vc(21,"FormGeneratorService"),L.Vb(),L.Vc(22," allows to define custom controls and render them for respective question types. In order to make your component work properly, it should follow these requirements: "),L.Wb(23,"ul"),L.Wb(24,"li"),L.Vc(25," Component "),L.Wb(26,"b"),L.Vc(27,"must"),L.Vb(),L.Vc(28," include these "),L.Wb(29,"code"),L.Vc(30,"viewProviders: [dynamicFormFieldProvider, dynamicFormGroupChildProvider]"),L.Vb(),L.Vc(31,", which can be imported from "),L.Wb(32,"code"),L.Vc(33,"@fundamental-ngx/platform"),L.Vb(),L.Vc(34,"; "),L.Vb(),L.Wb(35,"li"),L.Vc(36," Component "),L.Wb(37,"b"),L.Vc(38,"must"),L.Vb(),L.Vc(39," inherit "),L.Wb(40,"code"),L.Vc(41,"BaseDynamicFormGeneratorControl"),L.Vb(),L.Vc(42,", which can be imported from "),L.Wb(43,"code"),L.Vc(44,"@fundamental-ngx/platform"),L.Vb(),L.Vc(45,"; "),L.Vb(),L.Wb(46,"li"),L.Vc(47,"Inner form control should be wrapped with "),L.Wb(48,"code"),L.Vc(49,'<ng-container [formGroup]="form"></ng-control>'),L.Vb(),L.Vc(50," for appropriate binding to work. "),L.Vb(),L.Vb(),L.Vb(),L.Wb(51,"component-example"),L.Rb(52,"fdp-platform-form-generator-custom-component-example"),L.Vb(),L.Rb(53,"code-example",1),L.Rb(54,"separator"),L.Wb(55,"fd-docs-section-title",4),L.Vc(56," Form Generator programmatic submit\n"),L.Vb(),L.Wb(57,"description"),L.Vc(58," If you want to trigger form submission outside form generator component, this example shows how to do it.\n"),L.Vb(),L.Wb(59,"component-example"),L.Rb(60,"fdp-platform-form-generator-programatic-submit"),L.Vb(),L.Rb(61,"code-example",1),L.Rb(62,"separator"),L.Wb(63,"fd-docs-section-title",5),L.Vc(64," Custom errors in Form Generator\n"),L.Vb(),L.Wb(65,"description"),L.Vc(66," Form generator supports multiple ways of defining validation error hints: "),L.Wb(67,"ul"),L.Wb(68,"li"),L.Vc(69,"With validation function, which returns string if field is invalid;"),L.Vb(),L.Wb(70,"li"),L.Vc(71,"With predefined generic texts"),L.Vb(),L.Vb(),L.Vc(72," If you want to change default validation error messages, you can use "),L.Wb(73,"code"),L.Vc(74,"addValidationErrorHint"),L.Vb(),L.Vc(75," method in "),L.Wb(76,"code"),L.Vc(77,"FormGeneratorService"),L.Vb(),L.Vc(78,". This will allow you to override default ones, and add new generic validation error messages.\n"),L.Vb(),L.Wb(79,"component-example"),L.Rb(80,"fdp-platform-form-generator-custom-error-example"),L.Vb(),L.Rb(81,"code-example",1),L.Rb(82,"separator"),L.Wb(83,"fd-docs-section-title",6),L.Vc(84," Form Generator with form field column layout and inline layout\n"),L.Vb(),L.Wb(85,"description"),L.Vc(86," This example shows arrangement of form-field based on "),L.Wb(87,"code"),L.Vc(88,"columnLayout"),L.Vb(),L.Vc(89," values and "),L.Wb(90,"code"),L.Vc(91,"inLineLayout"),L.Vb(),L.Vc(92," values.\n"),L.Vb(),L.Wb(93,"component-example"),L.Rb(94,"fdp-platform-form-generator-field-layout-example"),L.Vb(),L.Rb(95,"code-example",1),L.Rb(96,"separator"),L.Wb(97,"fd-docs-section-title",7),L.Vc(98," Form Generator labels without colons\n"),L.Vb(),L.Wb(99,"description"),L.Vc(100," By default, form generator labels rendered with colon at the end of the label. To disable this behaviour please specify "),L.Wb(101,"code"),L.Vc(102,"appendColon: false"),L.Vb(),L.Vc(103," in "),L.Wb(104,"code"),L.Vc(105,"guiOptions"),L.Vb(),L.Vc(106," object.\n"),L.Vb(),L.Wb(107,"component-example"),L.Rb(108,"fdp-platform-form-generator-no-colons-example"),L.Vb(),L.Rb(109,"code-example",1)),2&e&&(L.Db(6),L.vc("exampleFiles",n.defaultFormGenerator),L.Db(8),L.vc("exampleFiles",n.defaultObservableFormGenerator),L.Db(39),L.vc("exampleFiles",n.customFormGenerator),L.Db(8),L.vc("exampleFiles",n.programaticSubmit),L.Db(20),L.vc("exampleFiles",n.customErrors),L.Db(14),L.vc("exampleFiles",n.defaultFormGenerator),L.Db(14),L.vc("exampleFiles",n.noLabelColonsFiles))},directives:[J.a,O.a,U.a,te,oe.a,re.a,ue,fe,ve,Ve,Se,Oe],encapsulation:2}),e})()},{path:"api",component:v.a,data:{content:y.a.formGenerator}}]}];let xe=(()=>{class e{}return e.\u0275fac=function(n){return new(n||e)},e.\u0275mod=L.Ob({type:e}),e.\u0275inj=L.Nb({imports:[[h.g.forChild(Ae),V.a,S.g,S.m,S.b,w.b,C.a,F.a],h.g]}),e})()}}]);