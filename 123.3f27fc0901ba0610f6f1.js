(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{"0MBA":function(e,n,t){"use strict";t.r(n),t.d(n,"PlatformUploadCollectionDocsModule",(function(){return ee}));var o={};t.r(o),t.d(o,"default",(function(){return I}));var l={};t.r(l),t.d(l,"default",(function(){return g}));var a={};t.r(a),t.d(a,"default",(function(){return b}));var d={};t.r(d),t.d(d,"default",(function(){return y}));var i={};t.r(i),t.d(i,"default",(function(){return F}));var r={};t.r(r),t.d(r,"default",(function(){return v}));var c={};t.r(c),t.d(c,"default",(function(){return S}));var s={};t.r(s),t.d(s,"default",(function(){return x}));var m={};t.r(m),t.d(m,"default",(function(){return U}));var p=t("sEIs"),u=t("63W6"),f=t("eCHz"),h=t("qOWU"),I="import { merge, Observable, of } from 'rxjs';\nimport { delay, map, tap } from 'rxjs/operators';\n\nimport {\n    CancelUploadNewFileEvent,\n    DeleteEvent,\n    DownloadEvent,\n    FileRenamedEvent,\n    MoveToEvent,\n    NewFolderEvent,\n    UpdateVersionEvent,\n    UploadCollectionDataProvider,\n    UploadCollectionFile,\n    UploadCollectionFolder,\n    UploadCollectionItem,\n    UploadCollectionItemStatus,\n    UploadCollectionNewItem,\n    UploadEvent\n} from '@fundamental-ngx/platform';\n\nimport { generateUploadCollectionItems } from './platform-upload-collection-items-generator';\nimport { HttpClient } from '@angular/common/http';\nimport { uuidv4 } from '@fundamental-ngx/core';\n\nexport class PlatformUploadCollectionDataProviderExample extends UploadCollectionDataProvider {\n    items: UploadCollectionItem[] = generateUploadCollectionItems(50, 4, 2);\n    private _cancelUploadNewFileIds: (string | number)[] = [];\n\n    constructor(private readonly _http: HttpClient) {\n        super();\n    }\n\n    /** The method is triggered when valid files are selected in the file uploader dialog. */\n    upload({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('upload', parentFolderId, items);\n\n        const newFiles: UploadCollectionNewItem[] = items.map((item) => {\n            delete item.file;\n            item.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n            return {\n                temporaryDocumentId: item.documentId,\n                item: item\n            };\n        });\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, newFiles);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const ids = newFiles\n                    .filter((file) => {\n                        const includes = this._cancelUploadNewFileIds.includes(file.item.documentId);\n                        if (includes) {\n                            this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter(\n                                (id) => id !== file.item.documentId\n                            );\n                            return true;\n                        }\n\n                        return false;\n                    })\n                    .map((file) => file.item.documentId);\n\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids, updatedItems);\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Download button is pressed. */\n    download(data: DownloadEvent): Observable<void> {\n        console.log('download', data);\n\n        const obs = data.items.map((file) => {\n            return this._http.get(file.url, { responseType: 'blob' }).pipe(map(blob => ({\n                blob: blob,\n                file: file\n            })));\n        });\n\n        return merge(...obs).pipe(map(({ file, blob }) => {\n            const a = document.createElement('a');\n            const objectUrl = URL.createObjectURL(blob);\n            a.href = objectUrl;\n            a.download = file.name;\n            a.click();\n            URL.revokeObjectURL(objectUrl);\n\n            return null;\n        }));\n    }\n\n    /**\n     * The method is triggered when Move to button is pressed and folder to move is selected in the dialog modal.\n     * Should return full dataSource\n     * */\n    moveTo({ from, to, items, newFolder }: MoveToEvent): Observable<UploadCollectionItem[]> {\n        console.log('moveTo', from, to, items, newFolder);\n\n        const ids = items.map((item) => item.documentId);\n\n        this._findParentFolderAndRemoveItemsByIds(from ? from.documentId : null, ids);\n        if (newFolder) {\n            const folder = this._generateNewFolder(newFolder.folderName);\n\n            this._findParentFolderAndAddFiles(newFolder.parentFolderId, [folder]);\n            this._findParentFolderAndAddFiles(folder.documentId, items);\n        } else {\n            this._findParentFolderAndAddFiles(to ? to.documentId : null, items);\n        }\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Delete button is pressed. */\n    delete({ parentFolderId, items }: DeleteEvent): Observable<UploadCollectionItem[]> {\n        console.log('delete', parentFolderId, items);\n\n        const ids = items.map((item) => item.documentId);\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when the file name is changed. */\n    fileRenamed({ parentFolderId, item, fileName }: FileRenamedEvent): Observable<UploadCollectionItem[]> {\n        console.log('fileRenamed', parentFolderId, item, fileName);\n        let updatedItem = {\n            ...item,\n            name: fileName,\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = item.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...updatedItem };\n                    updatedItem.name = item.name;\n                    updatedItem.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when the new folder added. */\n    newFolder({ parentFolderId, folder }: NewFolderEvent): Observable<UploadCollectionItem[]> {\n        console.log('newFolder', folder, parentFolderId);\n\n        folder.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: folder.documentId,\n                item: folder\n            }\n        ]);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const folderId = folder.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(folderId);\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== folderId);\n                    this._findParentFolderAndRemoveItemsByIds(parentFolderId, [folderId], updatedItems);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when Update Version button is pressed and valid file are selected in the file uploader dialog. */\n    updateVersion({ parentFolderId, item, newItem }: UpdateVersionEvent): Observable<UploadCollectionItem[]> {\n        console.log('updateVersion', parentFolderId, item);\n\n        let updatedItem: UploadCollectionFile = {\n            ...item,\n            status: UploadCollectionItemStatus.SUCCESSFUL,\n            uploadedOn: new Date(),\n            uploadedBy: {\n                id: Date.now(),\n                name: 'You'\n            },\n            version: +item.version,\n            name: newItem.name,\n            fileSize: newItem.size\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = updatedItem.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...item };\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    runAfterFail({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('runAfterFail', parentFolderId, items);\n        const item = items[0];\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: item.documentId,\n                item: {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL\n                }\n            }\n        ]);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when Cancel button is pressed */\n    cancelUploadNewFile({ parentFolderId, item }: CancelUploadNewFileEvent): Observable<UploadCollectionItem[]> {\n        console.log('cancelUploadNewFile', parentFolderId, item);\n        const id = item.documentId;\n        this._cancelUploadNewFileIds.push(id);\n\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n\n        return of(null);\n    }\n\n    /** @hidden */\n    private _findParentFolderAndUpdateItem(\n        parentFolderId: string | number | null,\n        updatedItem: UploadCollectionItem,\n        items = this.items\n    ): void {\n        if (!parentFolderId) {\n            const index = items.findIndex((item) => item.documentId === updatedItem.documentId);\n            if (index !== -1) {\n                items[index] = updatedItem;\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const index = currentItem.files.findIndex((item) => item.documentId === updatedItem.documentId);\n                if (index !== -1) {\n                    currentItem.files[i] = updatedItem;\n\n                    break;\n                }\n            } else {\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddNewFiles(\n        parentFolderId: string | number | null,\n        uploadedFiles: UploadCollectionNewItem[],\n        items = this.items\n    ): void {\n        if (uploadedFiles.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const uploadedFile = uploadedFiles.pop();\n            const index = items.findIndex((item) => item.documentId === uploadedFile.temporaryDocumentId);\n            if (index !== -1) {\n                items[index] = uploadedFile.item;\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const hash = uploadedFiles.reduce((res, file) => {\n                    res[file.temporaryDocumentId] = file.item;\n                    return res;\n                }, {});\n\n                currentItem.files = currentItem.files.map((item) =>\n                    hash[item.documentId] ? hash[item.documentId] : item\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddFiles(\n        parentFolderId: string | number | null,\n        files: UploadCollectionItem[],\n        items = this.items\n    ): void {\n        if (files.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            items.push(...files);\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files.push(...files);\n\n                break;\n            } else {\n                this._findParentFolderAndAddFiles(parentFolderId, files, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndRemoveItemsByIds(\n        parentFolderId: string | number | null,\n        documentsIds: (number | string)[],\n        items = this.items\n    ): void {\n        if (documentsIds.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const documentId = documentsIds.pop();\n            const index = items.findIndex((item) => item.documentId === documentId);\n            if (index !== -1) {\n                items.splice(index, 1);\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files = currentItem.files.filter(\n                    (item) => !documentsIds.some((documentId) => documentId === item.documentId)\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _generateNewFolder(folderName: string): UploadCollectionFolder {\n        return {\n            documentId: uuidv4(),\n            type: 'folder',\n            name: folderName,\n            uploadedBy: {\n                id: uuidv4(),\n                name: 'You'\n            },\n            uploadedOn: new Date(),\n            files: [],\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n    }\n}\n",g="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\n\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-example',\n    templateUrl: './platform-upload-collection-example.component.html'\n})\nexport class PlatformUploadCollectionExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",b='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',y="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-disabled-example',\n    templateUrl: './platform-upload-collection-disabled-example.component.html'\n})\nexport class PlatformUploadCollectionDisabledExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",F='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    disabled="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',v="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-readonly-example',\n    templateUrl: './platform-upload-collection-readonly-example.component.html'\n})\nexport class PlatformUploadCollectionReadonlyExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",S='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    readonly="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',x="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-turn-off-example',\n    templateUrl: './platform-upload-collection-turn-off-example.component.html'\n})\nexport class PlatformUploadCollectionTurnOffExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",U='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [showSearch]="false"\n    [enablePagination]="false"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',E=t("EM62"),P=t("Zn6N"),C=t("dB5E"),w=t("D57K"),T=t("ROBh"),_=t("g6G6"),N=t("BwBJ"),A=t("YtkY"),L=t("LTOS"),M=["Liam","Noah","Oliver","William","Elijah","James","Benjamin","Lucas","Mason","Ethan","Alexander","Henry","Jacob","Michael","Daniel","Logan","Jackson","Sebastian","Jack","Aiden"],R=[".jpg",".png",".pdf",".xls"];function D(){var e="abcdefghijklmnopqrstuvwxyz";return e[Math.floor(Math.random()*e.length)].toUpperCase()}function O(e,n){return new Date(+e+Math.random()*(n.getTime()-e.getTime()))}function j(e){for(var n,t,o=[],l=0;l<e;l++){var a=M[Math.floor(Math.random()*M.length)],d=(n=1,t=5242880,n=Math.ceil(n),t=Math.floor(t),Math.floor(Math.random()*(t-n+1))+n),i=R[Math.floor(Math.random()*R.length)],r=void 0;switch(i){case".jpg":case".png":r="https://picsum.photos/200";break;case".pdf":r="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";break;case".xls":r="https://file-examples-com.github.io/uploads/2017/02/file_example_XLS_10.xls"}o.push({documentId:Object(L.uuidv4)(),type:"file",name:"File-"+(l+1)+i,uploadedBy:{id:Object(L.uuidv4)(),name:a+" "+D()+"."},url:r,uploadedOn:O(new Date(2018,0,1),new Date),fileSize:d,version:Math.floor(10*Math.random())||1})}return o}var z=function(e){function n(n){var t=e.call(this)||this;return t._http=n,t.items=(50,4,2,Object(w.f)(j(50),function e(n,t,o){void 0===t&&(t=3),void 0===o&&(o=0);for(var l=[],a=0;a<n;a++){var d=M[Math.floor(Math.random()*M.length)],i=j(Math.floor(10*Math.random()));t!==o&&i.push.apply(i,e(Math.floor(10*Math.random()),t,o+1)),l.push({documentId:Object(L.uuidv4)(),type:"folder",name:"Folder-"+(a+1),uploadedBy:{id:Object(L.uuidv4)(),name:d+" "+D()+"."},uploadedOn:O(new Date(2018,0,1),new Date),files:i})}return l}(4,1))),t._cancelUploadNewFileIds=[],t}return Object(w.c)(n,e),n.prototype.upload=function(e){var n=this,t=e.parentFolderId,o=e.items;console.log("upload",t,o);var l=o.map((function(e){return delete e.file,e.status=u.UploadCollectionItemStatus.SUCCESSFUL,{temporaryDocumentId:e.documentId,item:e}}));return this._findParentFolderAndAddNewFiles(t,l),Object(T.a)(this.items).pipe(Object(N.a)(5e3),Object(A.a)((function(e){var o=l.filter((function(e){return!!n._cancelUploadNewFileIds.includes(e.item.documentId)&&(n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter((function(n){return n!==e.item.documentId})),!0)})).map((function(e){return e.item.documentId}));return n._findParentFolderAndRemoveItemsByIds(t,o,e),e})))},n.prototype.download=function(e){var n=this;console.log("download",e);var t=e.items.map((function(e){return n._http.get(e.url,{responseType:"blob"}).pipe(Object(A.a)((function(n){return{blob:n,file:e}})))}));return _.a.apply(void 0,t).pipe(Object(A.a)((function(e){var n=e.file,t=e.blob,o=document.createElement("a"),l=URL.createObjectURL(t);return o.href=l,o.download=n.name,o.click(),URL.revokeObjectURL(l),null})))},n.prototype.moveTo=function(e){var n=e.from,t=e.to,o=e.items,l=e.newFolder;console.log("moveTo",n,t,o,l);var a=o.map((function(e){return e.documentId}));if(this._findParentFolderAndRemoveItemsByIds(n?n.documentId:null,a),l){var d=this._generateNewFolder(l.folderName);this._findParentFolderAndAddFiles(l.parentFolderId,[d]),this._findParentFolderAndAddFiles(d.documentId,o)}else this._findParentFolderAndAddFiles(t?t.documentId:null,o);return Object(T.a)(this.items)},n.prototype.delete=function(e){var n=e.parentFolderId,t=e.items;console.log("delete",n,t);var o=t.map((function(e){return e.documentId}));return this._findParentFolderAndRemoveItemsByIds(n,o),Object(T.a)(this.items)},n.prototype.fileRenamed=function(e){var n=this,t=e.parentFolderId,o=e.item,l=e.fileName;console.log("fileRenamed",t,o,l);var a=Object(w.a)(Object(w.a)({},o),{name:l,status:u.UploadCollectionItemStatus.SUCCESSFUL});return this._findParentFolderAndUpdateItem(t,a),Object(T.a)(this.items).pipe(Object(N.a)(5e3),Object(A.a)((function(e){var l=o.documentId;return n._cancelUploadNewFileIds.includes(l)&&((a=Object(w.a)({},a)).name=o.name,a.status=u.UploadCollectionItemStatus.SUCCESSFUL,n._findParentFolderAndUpdateItem(t,a,e),n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter((function(e){return e!==l}))),e})))},n.prototype.newFolder=function(e){var n=this,t=e.parentFolderId,o=e.folder;return console.log("newFolder",o,t),o.status=u.UploadCollectionItemStatus.SUCCESSFUL,this._findParentFolderAndAddNewFiles(t,[{temporaryDocumentId:o.documentId,item:o}]),Object(T.a)(this.items).pipe(Object(N.a)(5e3),Object(A.a)((function(e){var l=o.documentId;return n._cancelUploadNewFileIds.includes(l)&&(n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter((function(e){return e!==l})),n._findParentFolderAndRemoveItemsByIds(t,[l],e)),e})))},n.prototype.updateVersion=function(e){var n=this,t=e.parentFolderId,o=e.item,l=e.newItem;console.log("updateVersion",t,o);var a=Object(w.a)(Object(w.a)({},o),{status:u.UploadCollectionItemStatus.SUCCESSFUL,uploadedOn:new Date,uploadedBy:{id:Date.now(),name:"You"},version:+o.version,name:l.name,fileSize:l.size});return this._findParentFolderAndUpdateItem(t,a),Object(T.a)(this.items).pipe(Object(N.a)(5e3),Object(A.a)((function(e){var l=a.documentId;return n._cancelUploadNewFileIds.includes(l)&&(a=Object(w.a)({},o),n._findParentFolderAndUpdateItem(t,a,e),n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter((function(e){return e!==l}))),e})))},n.prototype.runAfterFail=function(e){var n=e.parentFolderId,t=e.items;console.log("runAfterFail",n,t);var o=t[0];return this._findParentFolderAndAddNewFiles(n,[{temporaryDocumentId:o.documentId,item:Object(w.a)(Object(w.a)({},o),{status:u.UploadCollectionItemStatus.SUCCESSFUL})}]),Object(T.a)(this.items)},n.prototype.cancelUploadNewFile=function(e){var n=e.parentFolderId,t=e.item;console.log("cancelUploadNewFile",n,t);var o=t.documentId;return this._cancelUploadNewFileIds.push(o),this._findParentFolderAndRemoveItemsByIds(n,[o]),Object(T.a)(null)},n.prototype._findParentFolderAndUpdateItem=function(e,n,t){if(void 0===t&&(t=this.items),e)for(var o=0;o<t.length;o++){var l,a=t[o];if("folder"===a.type)if(a.documentId===e){if(-1!==(l=a.files.findIndex((function(e){return e.documentId===n.documentId})))){a.files[o]=n;break}}else this._findParentFolderAndUpdateItem(e,n,a.files)}else-1!==(l=t.findIndex((function(e){return e.documentId===n.documentId})))&&(t[l]=n)},n.prototype._findParentFolderAndAddNewFiles=function(e,n,t){if(void 0===t&&(t=this.items),0!==n.length)if(e)for(var o=function(o){var a=t[o];if("folder"!==a.type)return"continue";if(a.documentId===e){var d=n.reduce((function(e,n){return e[n.temporaryDocumentId]=n.item,e}),{});return a.files=a.files.map((function(e){return d[e.documentId]?d[e.documentId]:e})),"break"}l._findParentFolderAndAddNewFiles(e,n,a.files)},l=this,a=0;a<t.length&&"break"!==o(a);a++);else{var d=n.pop(),i=t.findIndex((function(e){return e.documentId===d.temporaryDocumentId}));-1!==i&&(t[i]=d.item,this._findParentFolderAndAddNewFiles(e,n))}},n.prototype._findParentFolderAndAddFiles=function(e,n,t){var o;if(void 0===t&&(t=this.items),0!==n.length)if(e)for(var l=0;l<t.length;l++){var a=t[l];if("folder"===a.type){if(a.documentId===e){(o=a.files).push.apply(o,n);break}this._findParentFolderAndAddFiles(e,n,a.files)}}else t.push.apply(t,n)},n.prototype._findParentFolderAndRemoveItemsByIds=function(e,n,t){if(void 0===t&&(t=this.items),0!==n.length)if(e)for(var o=0;o<t.length;o++){var l=t[o];if("folder"===l.type){if(l.documentId===e){l.files=l.files.filter((function(e){return!n.some((function(n){return n===e.documentId}))}));break}this._findParentFolderAndRemoveItemsByIds(e,n,l.files)}}else{var a=n.pop(),d=t.findIndex((function(e){return e.documentId===a}));-1!==d&&(t.splice(d,1),this._findParentFolderAndRemoveItemsByIds(e,n))}},n.prototype._generateNewFolder=function(e){return{documentId:Object(L.uuidv4)(),type:"folder",name:e,uploadedBy:{id:Object(L.uuidv4)(),name:"You"},uploadedOn:new Date,files:[],status:u.UploadCollectionItemStatus.SUCCESSFUL}},n}(u.UploadCollectionDataProvider),B=t("vobO"),k=t("2brl"),H=function(){function e(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.UploadCollectionDataSource(new z(e))}return e.prototype.typeMismatch=function(e){console.log("typeMismatch",e.source,e.payload)},e.prototype.filenameLengthExceed=function(e){console.log("filenameLengthExceed",e.source,e.payload)},e.prototype.fileSizeExceed=function(e){console.log("fileSizeExceed",e.source,e.payload)},e.\u0275fac=function(n){return new(n||e)(E.Mb(B.a))},e.\u0275cmp=E.Gb({type:e,selectors:[["fdp-upload-collection-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Sb(0,"fdp-upload-collection",0),E.gc("typeMismatch",(function(e){return n.typeMismatch(e)}))("filenameLengthExceed",(function(e){return n.filenameLengthExceed(e)}))("fileSizeExceed",(function(e){return n.fileSizeExceed(e)})),E.Rb()),2&e&&E.sc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[k.a],encapsulation:2}),e}(),J=t("gJWE"),$=function(){function e(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.UploadCollectionDataSource(new z(e))}return e.prototype.typeMismatch=function(e){console.log("typeMismatch",e.source,e.payload)},e.prototype.filenameLengthExceed=function(e){console.log("filenameLengthExceed",e.source,e.payload)},e.prototype.fileSizeExceed=function(e){console.log("fileSizeExceed",e.source,e.payload)},e.\u0275fac=function(n){return new(n||e)(E.Mb(B.a))},e.\u0275cmp=E.Gb({type:e,selectors:[["fdp-upload-collection-disabled-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","disabled","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Sb(0,"fdp-upload-collection",0),E.gc("typeMismatch",(function(e){return n.typeMismatch(e)}))("filenameLengthExceed",(function(e){return n.filenameLengthExceed(e)}))("fileSizeExceed",(function(e){return n.fileSizeExceed(e)})),E.Rb()),2&e&&E.sc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[k.a],encapsulation:2}),e}(),V=function(){function e(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.UploadCollectionDataSource(new z(e))}return e.prototype.typeMismatch=function(e){console.log("typeMismatch",e.source,e.payload)},e.prototype.filenameLengthExceed=function(e){console.log("filenameLengthExceed",e.source,e.payload)},e.prototype.fileSizeExceed=function(e){console.log("fileSizeExceed",e.source,e.payload)},e.\u0275fac=function(n){return new(n||e)(E.Mb(B.a))},e.\u0275cmp=E.Gb({type:e,selectors:[["fdp-upload-collection-readonly-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","readonly","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Sb(0,"fdp-upload-collection",0),E.gc("typeMismatch",(function(e){return n.typeMismatch(e)}))("filenameLengthExceed",(function(e){return n.filenameLengthExceed(e)}))("fileSizeExceed",(function(e){return n.fileSizeExceed(e)})),E.Rb()),2&e&&E.sc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[k.a],encapsulation:2}),e}(),Y=function(){function e(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.UploadCollectionDataSource(new z(e))}return e.prototype.typeMismatch=function(e){console.log("typeMismatch",e.source,e.payload)},e.prototype.filenameLengthExceed=function(e){console.log("filenameLengthExceed",e.source,e.payload)},e.prototype.fileSizeExceed=function(e){console.log("fileSizeExceed",e.source,e.payload)},e.\u0275fac=function(n){return new(n||e)(E.Mb(B.a))},e.\u0275cmp=E.Gb({type:e,selectors:[["fdp-upload-collection-turn-off-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","showSearch","enablePagination","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Sb(0,"fdp-upload-collection",0),E.gc("typeMismatch",(function(e){return n.typeMismatch(e)}))("filenameLengthExceed",(function(e){return n.filenameLengthExceed(e)}))("fileSizeExceed",(function(e){return n.fileSizeExceed(e)})),E.Rb()),2&e&&E.sc("dataSource",n.dataSource)("showSearch",!1)("enablePagination",!1)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[k.a],encapsulation:2}),e}(),G=function(){function e(){this.uploadCollection=[{language:"html",code:a,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:l,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:o,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionReadOnly=[{language:"html",code:c,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:r,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:o,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionDisabled=[{language:"html",code:i,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:d,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:o,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionTurnOff=[{language:"html",code:m,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:s,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:o,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}]}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=E.Gb({type:e,selectors:[["app-platform-upload-collection"]],decls:47,vars:4,consts:[[3,"exampleFiles"],[1,"code-snippet"]],template:function(e,n){1&e&&(E.Sb(0,"h2"),E.Tc(1,"Default"),E.Rb(),E.Nb(2,"description"),E.Sb(3,"component-example"),E.Nb(4,"fdp-upload-collection-example"),E.Rb(),E.Nb(5,"code-example",0),E.Sb(6,"h2"),E.Tc(7,"Disabled State"),E.Rb(),E.Sb(8,"description"),E.Tc(9,"Use "),E.Sb(10,"code",1),E.Tc(11,'[disable]="true"'),E.Rb(),E.Tc(12," to disable all CRUD buttons."),E.Rb(),E.Sb(13,"component-example"),E.Nb(14,"fdp-upload-collection-disabled-example"),E.Rb(),E.Nb(15,"code-example",0),E.Sb(16,"h2"),E.Tc(17,"Readonly State"),E.Rb(),E.Sb(18,"description"),E.Tc(19,"Use "),E.Sb(20,"code",1),E.Tc(21,'[readonly]="true"'),E.Rb(),E.Tc(22," to hide all CRUD buttons."),E.Rb(),E.Sb(23,"component-example"),E.Nb(24,"fdp-upload-collection-readonly-example"),E.Rb(),E.Nb(25,"code-example",0),E.Sb(26,"h2"),E.Tc(27,"Witout Pagination and Search"),E.Rb(),E.Sb(28,"description"),E.Tc(29," Use "),E.Sb(30,"code",1),E.Tc(31,'[showSearch]="false"'),E.Rb(),E.Tc(32," to hide search input, by default "),E.Sb(33,"code",1),E.Tc(34,'[showSearch]="true"'),E.Rb(),E.Tc(35,". "),E.Nb(36,"br"),E.Tc(37," Use "),E.Sb(38,"code",1),E.Tc(39,'[enablePagination]="false"'),E.Rb(),E.Tc(40," to hide pagination, by default "),E.Sb(41,"code",1),E.Tc(42,'[enablePagination]="true"'),E.Rb(),E.Tc(43,".\n"),E.Rb(),E.Sb(44,"component-example"),E.Nb(45,"fdp-upload-collection-turn-off-example"),E.Rb(),E.Nb(46,"code-example",0)),2&e&&(E.Ab(5),E.sc("exampleFiles",n.uploadCollection),E.Ab(10),E.sc("exampleFiles",n.uploadCollectionDisabled),E.Ab(10),E.sc("exampleFiles",n.uploadCollectionReadOnly),E.Ab(21),E.sc("exampleFiles",n.uploadCollectionTurnOff))},directives:[P.a,C.a,H,J.a,$,V,Y],encapsulation:2}),e}(),W=t("P+xO"),q=t("7o9V"),K=t("h8DJ"),X=function(){function e(){}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=E.Gb({type:e,selectors:[["fd-upload-collection-header"]],decls:30,vars:0,consts:[[1,"code-snippet"],["module","PlatformUploadCollectionModule"]],template:function(e,n){1&e&&(E.Sb(0,"header"),E.Tc(1,"Upload Collection"),E.Rb(),E.Sb(2,"description"),E.Sb(3,"p"),E.Tc(4,"The upload collection allows users to upload one or more files from different devices."),E.Rb(),E.Sb(5,"h3"),E.Tc(6,"Usage"),E.Rb(),E.Sb(7,"p"),E.Tc(8,"Use the upload collection if:"),E.Rb(),E.Sb(9,"ul"),E.Sb(10,"li"),E.Tc(11,"You want to show a list of uploaded files that can be modified."),E.Rb(),E.Sb(12,"li"),E.Tc(13,"You want to allow users to add or remove files, and to change the file names."),E.Rb(),E.Rb(),E.Sb(14,"p"),E.Tc(15,"Don't use the upload collection if:"),E.Rb(),E.Sb(16,"ul"),E.Sb(17,"li"),E.Tc(18,"The user can upload only one file to the app. In this case, use the FileUploader control instead."),E.Rb(),E.Rb(),E.Sb(19,"h3"),E.Tc(20,"Required"),E.Rb(),E.Sb(21,"ul"),E.Sb(22,"li"),E.Tc(23," To use all CRUD operations need to describe "),E.Sb(24,"code",0),E.Tc(25,"UploadCollectionService"),E.Rb(),E.Tc(26," (look at examples) "),E.Rb(),E.Rb(),E.Rb(),E.Nb(27,"import",1),E.Nb(28,"fd-header-tabs"),E.Nb(29,"router-outlet"))},directives:[W.a,P.a,q.a,K.a,p.g],encapsulation:2}),e}(),Z=t("MOJJ"),Q=[{path:"",component:X,children:[{path:"",component:G},{path:"api",component:f.a,data:{content:h.a.uploadCollection}}]}],ee=function(){function e(){}return e.\u0275mod=E.Kb({type:e}),e.\u0275inj=E.Jb({factory:function(n){return new(n||e)},imports:[[p.f.forChild(Q),Z.a,u.PlatformUploadCollectionModule],p.f]}),e}()}}]);