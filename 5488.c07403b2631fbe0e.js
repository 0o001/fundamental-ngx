"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5488],{15488:(m,d,o)=>{o.r(d),o.d(d,{TreeDocsModule:()=>x});var r=o(45731),p=o(90147),l=o(16543),s=o(6814),e=o(83668),c=o(83382),u=o(55505),D=o(16966),C=o(87919);let T=(()=>{class t{constructor(){this.headers=["Column Header 1","Column Header 2","Column Header 3","Column Header 4"],this.items=[{rowData:["Data 1","Data 2","Data 3","Data 4"],children:[{rowData:["Child 1","Child 2","Child 3"],children:[{rowData:["Grandchild 1","Grandchild 2","Grandchild 3","Grandchild 4"]}]}]},{rowData:["Data 5","Data 6","Data 7","Data 8"]},{rowData:["Data 9"],children:[{rowData:["Child 5","Child 6","Child 7","Child 8"]}]}]}editRowClicked(a){alert("Edit row clicked"),console.log(a)}deleteRowClicked(a){alert("Delete row clicked"),console.log(a)}}return t.\u0275fac=function(a){return new(a||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["fd-simple-tree-example"]],decls:1,vars:3,consts:[[3,"displayTreeActions","headers","treeData","editRowClicked","deleteRowClicked"]],template:function(a,i){1&a&&(e.TgZ(0,"fd-tree",0),e.NdJ("editRowClicked",function(h){return i.editRowClicked(h)})("deleteRowClicked",function(h){return i.deleteRowClicked(h)}),e.qZA()),2&a&&e.Q6J("displayTreeActions",!0)("headers",i.headers)("treeData",i.items)},directives:[C.q],encapsulation:2}),t})(),y=(()=>{class t{constructor(){this.data={properties:{headers:["Column Header 1","Column Header 2","Column Header 3","Column Header 4"],simpleTreeData:[{rowData:["Data 1","Data 2","Data 3","Data 4"],children:[{rowData:["Child 1","Child 2","Child 3"],children:[{rowData:["Grandchild 1","Grandchild 2","Grandchild 3","Grandchild 4"]}]}]},{rowData:["Data 5","Data 6","Data 7","Data 8"]},{rowData:["Data 9"],children:[{rowData:["Child 5","Child 6","Child 7","Child 8"]}]}],richTreeData:[{rowData:[{displayText:"Search Engines"}],children:[{rowData:[{displayText:" "},{displayText:"Google",linkUrl:"http://google.com"},{displayText:"Bing",linkUrl:"http://bing.com"},{displayText:"Yahoo",linkUrl:"http://yahoo.com"}]}]}]},state:{disabled:!1}},this.simpleTreeHtml='\n        <fd-tree (editRowClicked)="editRowClicked($event)" (deleteRowClicked)="deleteRowClicked($event)"\n\n                 [displayTreeActions]="true" [headers]="headers" [treeData]="treeData">\n\n        </fd-tree>',this.simpleTreeJson='\n        headers: ["Column Header 1", "Column Header 2", "Column Header 3", "Column Header 4"],\n        treeData: [\n          {\n            rowData: ["Data 1", "Data 2", "Data 3", "Data 4"],\n            children: [\n              {\n                rowData: ["Child 1", "Child 2", "Child 3"],\n                children: [\n                  {\n                    rowData: ["Grandchild 1", "Grandchild 2", "Grandchild 3", "Grandchild 4"]\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            rowData: ["Data 5", "Data 6", "Data 7", "Data 8"]\n          },\n          {\n            rowData: ["Data 9"],\n            children: [\n              {\n                rowData: ["Child 5", "Child 6", "Child 7", "Child 8"]\n              }\n            ]\n          }\n        ]',this.richTreeHtml='<fd-tree [headers]="headers" [treeData]="treeData">\n\n</fd-tree>',this.richTreeJson='\n        headers: ["Column Header 1", "Column Header 2", "Column Header 3", "Column Header 4"],\n        treeData: [\n          {\n            rowData: [\n              {\n                displayText: "Search Engines"\n              }\n            ],\n            children: [\n              {\n                rowData: [\n                  {\n                    displayText: " "\n                  },\n                  {\n                    displayText: "Google",\n                    linkUrl: "http://google.com"\n                  },\n                  {\n                    displayText: "Bing",\n                    linkUrl: "http://bing.com"\n                  },\n                  {\n                    displayText: "Yahoo",\n                    linkUrl: "http://yahoo.com"\n                  }\n                ]\n              }\n            ]\n          }\n        ]'}onSchemaValues(a){this.data=a}editRowClicked(a){alert("Edit row clicked"),console.log(a)}deleteRowClicked(a){alert("Delete row clicked"),console.log(a)}}return t.schema={properties:{properties:{type:"object",properties:{headers:{type:"string[]"},treeData:{type:"TreeRowObject[]"}}},state:{type:"object",properties:{disabled:{type:"boolean"}}}},type:"object"},t.\u0275fac=function(a){return new(a||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-tree"]],decls:15,vars:0,consts:[["id","fdTree","componentName","tree"],["id","simple","componentName","tree"]],template:function(a,i){1&a&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," <fd-tree> "),e.qZA(),e._uU(2,"\nThere are two different types of tree cells you can use, the 'simple' cells and the 'rich' cells. Simple cells can only\ndisplay text. Rich cells can contain plain text or links. The tree component requires only two root arguments, a\n'headers' array and a 'treeData' array. The children of the tree are generated recursively from data within the treeData\narray.\n"),e._UZ(3,"br"),e._UZ(4,"br"),e._uU(5,"\nIn a tree with simple cells, the treeData property is an array of objects that contain two properties, 'rowData' and\noptionally 'children'. Simple cell rowData is an array of strings, each string being a cell in the tree. The 'children'\nproperty is an array of objects that match this object's structure. "),e._UZ(6,"separator"),e.TgZ(7,"fd-docs-section-title",1),e._uU(8," Simple Tree "),e.qZA(),e._uU(9,"\nThis is an example of a tree with simple cells, where the rowData is an array of strings."),e._UZ(10,"br"),e._UZ(11,"br"),e._UZ(12,"br"),e.TgZ(13,"component-example"),e._UZ(14,"fd-simple-tree-example"),e.qZA())},directives:[c.k,u.N,D.O,T],encapsulation:2}),t})();var f=o(43870),w=o(9156),g=o(87444),U=o(34506);let Z=(()=>{class t{}return t.\u0275fac=function(a){return new(a||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-tree-header"]],decls:7,vars:0,consts:[["module","TreeModule","subPackage","tree"]],template:function(a,i){1&a&&(e.TgZ(0,"header"),e._uU(1,"Tree"),e.qZA(),e.TgZ(2,"description"),e._uU(3,"The Tree component is used to display hierarchical data in tabular way. Permitting the user to dig deeper into the data in an simple way. Along with displaying the hierarchy information it can also contain other data in the same node as well."),e.qZA(),e._UZ(4,"import",0),e._UZ(5,"fd-header-tabs"),e._UZ(6,"router-outlet"))},directives:[f.G,w.w,g.k,U.c,r.lC],styles:[""]}),t})();var v=o(318);const k=[{path:"",component:Z,children:[{path:"",component:y},{path:"api",component:p.h,data:{content:s.X.tree}}]}];let x=(()=>{class t{}return t.\u0275fac=function(a){return new(a||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[r.Bz.forChild(k),l.g,v.xc],r.Bz]}),t})()},87444:(m,d,o)=>{o.d(d,{k:()=>p});var r=o(83668);let p=(()=>{class l{constructor(e){this.currentLib=e}ngOnInit(){const e=["@fundamental-ngx",this.currentLib];this.subPackage&&e.push(this.subPackage),this.library=e.join("/")}}return l.\u0275fac=function(e){return new(e||l)(r.Y36("CURRENT_LIB"))},l.\u0275cmp=r.Xpm({type:l,selectors:[["import"]],inputs:{module:"module",subPackage:"subPackage"},decls:9,vars:2,consts:[[2,"color","rgb(0, 0, 136)"],[2,"color","rgb(0, 136, 0)"]],template:function(e,c){1&e&&(r.TgZ(0,"code"),r.TgZ(1,"span",0),r._uU(2,"import"),r.qZA(),r._uU(3),r.TgZ(4,"span",0),r._uU(5,"from "),r.qZA(),r.TgZ(6,"span",1),r._uU(7),r.qZA(),r._uU(8,"; "),r.qZA()),2&e&&(r.xp6(3),r.hij(" { ",c.module," } "),r.xp6(4),r.hij("'",c.library,"'"))},encapsulation:2}),l})()}}]);