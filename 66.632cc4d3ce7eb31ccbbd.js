(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{"7o9V":function(e,o,n){"use strict";n.d(o,"a",(function(){return t}));var r=n("EM62"),t=function(){function e(e){switch(this.currentLib=e,this.currentLib){case"core":this.library="@fundamental-ngx/core";break;case"platform":this.library="@fundamental-ngx/platform"}}return e.\u0275fac=function(o){return new(o||e)(r.Lb("CURRENT_LIB"))},e.\u0275cmp=r.Fb({type:e,selectors:[["import"]],inputs:{module:"module"},decls:9,vars:2,consts:[[2,"color","rgb(0, 0, 136)"],[2,"color","rgb(0, 136, 0)"]],template:function(e,o){1&e&&(r.Rb(0,"code"),r.Rb(1,"span",0),r.Oc(2,"import"),r.Qb(),r.Oc(3),r.Rb(4,"span",0),r.Oc(5,"from "),r.Qb(),r.Rb(6,"span",1),r.Oc(7),r.Qb(),r.Oc(8,"; "),r.Qb()),2&e&&(r.Ab(3),r.Qc(" { ",o.module," } "),r.Ab(4),r.Qc("'",o.library,"'"))},encapsulation:2}),e}()},Ezuh:function(e,o,n){"use strict";n.r(o),n.d(o,"PlatformCheckboxGroupDocsModule",(function(){return oe}));var r={};n.r(r),n.d(r,"default",(function(){return g}));var t={};n.r(t),n.d(t,"default",(function(){return h}));var a={};n.r(a),n.d(a,"default",(function(){return k}));var c={};n.r(c),n.d(c,"default",(function(){return x}));var l={};n.r(l),n.d(l,"default",(function(){return v}));var i={};n.r(i),n.d(i,"default",(function(){return y}));var s={};n.r(s),n.d(s,"default",(function(){return C}));var b={};n.r(b),n.d(b,"default",(function(){return A}));var p=n("sEIs"),f=n("63W6"),u=n("eCHz"),m=n("qOWU"),d=n("CRIm"),g='<h3>Reactive Form Examples:</h3>\n<h3>Checkboxes created from given list of values</h3>\n<p>Inline checkboxes</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form1">\n    <fdp-form-field #fl1 [id]="\'seasons\'" [label]="\'My favourite Seasons: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="seasons"\n            [name]="\'favseasons\'"\n            [isInline]="true"\n            [formControl]="fl1.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Seasons: {{ form1.controls.seasons?.value }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on value passed</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form2" [object]="selectedPhones">\n    <fdp-form-field #fl2 [id]="\'phones\'" [label]="\'Phones interested in:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [list]="phoneslist" [name]="\'brands\'" [formControl]="fl2.formControl"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Available brands: {{ form2.controls.phones?.value }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on value passed from formGroup</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form3">\n    <fdp-form-field #fl4 [id]="\'sports1\'" [label]="\'Sports I Play:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [list]="sports" [name]="\'sports\'" formControlName="sports"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Sports: {{ form3.controls.sports1?.value }}</span>\n<br />\n<br />\n\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form3">\n    <fdp-form-field\n        #fl3\n        [id]="\'sportsDisabled\'"\n        [label]="\'Disabled checkbox Group: \'"\n        [disabled]="true"\n        zone="zLeft"\n        rank="1"\n    >\n        <fdp-checkbox-group [list]="sports" [name]="\'sports\'" [formControl]="fl3.formControl"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<br />\n\n<separator></separator>\n\n<h3>Template Driven Form</h3>\n<h3>Checkboxes created from given list of values</h3>\n<p>Inline checkboxes</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'weather\'" [label]="\'My favourite Weather:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="seasons"\n            [name]="\'seasonsfav\'"\n            [isInline]="true"\n            [(ngModel)]="countrySeason"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Weather: {{ countrySeason }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on value passed</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'sports\'" [label]="\'Sports interested in:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [list]="sports" [name]="\'sports\'" [(ngModel)]="selectedSports"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Sports: {{ selectedSports }}</span>\n<br />\n<br />\n\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'sportsDisabled\'" [label]="\'Disabled checkbox Group:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [list]="sports" [name]="\'sports\'" [disabled]="true"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n',h="import { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'fdp-platform-checkbox-group-list',\n    templateUrl: './platform-checkbox-group-list.component.html'\n})\nexport class PlatformCheckboxGroupListComponent {\n    seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];\n    sports: string[] = ['cycling', 'running', 'visit gym', 'swimming'];\n    phoneslist: string[] = ['Samsung', 'Apple', 'OnePlus', 'Redmi'];\n\n    // data passing to form\n    selectedPhones = { phones: ['Samsung', 'OnePlus'] };\n\n    form1 = new FormGroup({});\n    form2 = new FormGroup({});\n    form3 = new FormGroup({\n        sports: new FormControl(['cycling', 'running'])\n    });\n\n    // template driven\n    countrySeason = '';\n    selectedSports = ['running', 'swimming'];\n}\n",k='<h3>Reactive Form Examples:</h3>\n<h3>Checkboxes created from from list of selectItem Objects</h3>\n<p>Inline checkboxes</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form4">\n    <fdp-form-field #fl1 [id]="\'languages\'" [label]="\'Programming Languages Known: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="languages"\n            [isInline]="true"\n            [name]="\'languages\'"\n            [contentDensity]="\'compact\'"\n            [formControl]="fl1.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Languages: {{ form4.controls.languages?.value }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on control value passed</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form5" [object]="visited">\n    <fdp-form-field #fl2 [id]="\'visited\'" [label]="\'Country visited: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="countryVisited"\n            [name]="\'visited\'"\n            [formControl]="fl2.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Visited Country: {{ form5.controls.visited?.value }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on control value passed from formGroup</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form6" [object]="visited">\n    <fdp-form-field #fl4 [id]="\'currencies\'" [label]="\'Currencies Exchanging: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="countryCurrency"\n            [name]="\'currency\'"\n            formControlName="currencies"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Currencies: {{ form6.controls.currencies?.value }}</span>\n\n<br />\n<br />\n<p>Lookup key and Disaplay key usages.</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form7">\n    <fdp-form-field #fl5 [id]="\'items\'" [label]="\'Purchased Items: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="invoiceItems"\n            [name]="\'invoices\'"\n            [lookupKey]="\'item\'"\n            [displayKey]="\'itemType\'"\n            [formControl]="fl5.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Purchased Items: {{ form7.controls.items?.value }}</span>\n\n<br />\n<br />\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form6">\n    <fdp-form-field\n        #fl3\n        [id]="\'disabled currencies\'"\n        [label]="\'Disabled checkbox Group: \'"\n        [disabled]="true"\n        zone="zLeft"\n        rank="1"\n    >\n        <fdp-checkbox-group\n            [list]="countryCurrency"\n            [name]="\'currencies\'"\n            [formControl]="fl3.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n\n<separator></separator>\n\n<h3>Template Driven Form</h3>\n<h3>Checkboxes created from from list of selectItem Objects</h3>\n<p>Inline checkboxes</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'languages known\'" [label]="\'Programming Languages Known: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="languages"\n            [isInline]="true"\n            [name]="\'languages\'"\n            [(ngModel)]="languagesKnown"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Languages: {{ languagesKnown }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on value passed</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'currency\'" [label]="\'Currencies in country: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="countryCurrency"\n            [name]="\'currencies\'"\n            [contentDensity]="\'compact\'"\n            [(ngModel)]="currencies"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Currencies: {{ currencies }}</span>\n\n<br />\n<br />\n<p>Lookup key and Disaplay key usages.</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'itemst\'" [label]="\'Purchased Items: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [list]="invoiceItems"\n            [name]="\'items\'"\n            [lookupKey]="\'item\'"\n            [displayKey]="\'itemType\'"\n            [(ngModel)]="itemsData"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Purchased Items: {{ itemsData }}</span>\n<br />\n<br />\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'disabled currency\'" [label]="\'Disabled checkbox Group: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [list]="countryCurrency" [disabled]="true" [name]="\'currencies\'"></fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n',x="import { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { SelectItem } from '@fundamental-ngx/platform';\n\n@Component({\n    selector: 'fdp-platform-checkbox-group-list-object',\n    templateUrl: './platform-checkbox-group-list-object.component.html'\n})\nexport class PlatformCheckboxGroupListObjectComponent {\n    countryCurrency = [new Country('Australia', 'AUD'), new Country('India', 'INR'), new Country('USA', 'USD')];\n    currency = ['AUD', 'USD'];\n\n    languages = [\n        new LanguageKnown('Java', 'java', false),\n        new LanguageKnown('Javascript', 'javascript', true),\n        new LanguageKnown('Python', 'python', false),\n        new LanguageKnown('GoLang', 'go', true)\n    ];\n\n    countryVisited = [new Country('Australia', 'Australia'), new Country('India', 'India'), new Country('USA', 'USA')];\n    visited = { visited: ['India', 'USA'] };\n\n    form4 = new FormGroup({});\n    form5 = new FormGroup({});\n    form6 = new FormGroup({\n        currencies: new FormControl(['INR'])\n    });\n    form7 = new FormGroup({});\n\n    invoiceItems = [\n        new Item('1', 'coffee', 'Coffee', 100, 12),\n        new Item('2', 'pen', 'Pen', 200, 5),\n        new Item('3', 'chair', 'Office chair', 50, 5530)\n    ];\n\n    // template driven\n    languagesKnown = '';\n    currencies = ['INR', 'USD'];\n    itemsData = ['pen'];\n}\n\nclass Country implements SelectItem {\n    constructor(public label: string, public value: string) {}\n}\n\nclass LanguageKnown implements SelectItem {\n    constructor(public label: string, public value: string, public disabled: boolean) {}\n}\n\nclass Item {\n    constructor(\n        public itemId: string,\n        public item: string,\n        public itemType: string,\n        public quantity: number,\n        public rate: number\n    ) {}\n}\n",v='<h3>Reactive Form Examples:</h3>\n<h3>Checkbox group created from projected checkboxes</h3>\n<fdp-form-group [multiLayout]="true" [formGroup]="form1">\n    <fdp-form-field #fl1 [id]="\'fruits\'" [label]="\'My favourite fruits:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'fruits\'" [formControl]="fl1.formControl">\n            <fdp-checkbox [value]="\'apple\'" [label]="\'Apple\'" [disabled]="true"></fdp-checkbox>\n            <fdp-checkbox [value]="\'banana\'" [label]="\'Banana\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'guava\'" [label]="\'Guava\'" [disabled]="true"></fdp-checkbox>\n            <fdp-checkbox [value]="\'papaya\'" [label]="\'Papaya\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Favourites: {{ form1.controls.fruits?.value }}</span>\n\n<p>Pre-selection based on value passed</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form2" [object]="hobbies">\n    <fdp-form-field #fl2 [id]="\'hobbies\'" [label]="\'My Hobbies:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'hobby\'" [formControl]="fl2.formControl">\n            <fdp-checkbox [value]="\'cooking\'" [label]="\'Cooking\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'painting\'" [label]="\'Painting\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'coding\'" [label]="\'Coding\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'gardening\'" [label]="\'Gardening\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Hobbies: {{ form2.controls.hobbies?.value }}</span>\n<br />\n<br />\n\n<p>Pre-selection based on value passed from FormGroup</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form3">\n    <fdp-form-field #fl4 [id]="\'visited1\'" [label]="\'visited countries\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'countries\'" formControlName="visited">\n            <fdp-checkbox [value]="\'Italy\'" [label]="\'Italy\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'France\'" [label]="\'France\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Switzerland\'" [label]="\'Switzerland\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Austria\'" [label]="\'Austria\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Visited Countries: {{ form3.controls.visited1?.value }}</span>\n<br />\n<br />\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true" [formGroup]="form3">\n    <fdp-form-field\n        #fl3\n        [id]="\'visited countries\'"\n        [label]="\'Disabled checkbox Group: \'"\n        [disabled]="true"\n        zone="zLeft"\n        rank="1"\n    >\n        <fdp-checkbox-group [name]="\'countries\'" [formControl]="fl3.formControl">\n            <fdp-checkbox [value]="\'Italy\'" [label]="\'Italy\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'France\'" [label]="\'France\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Switzerland\'" [label]="\'Switzerland\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Austria\'" [label]="\'Austria\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n\n<separator></separator>\n<h3>Template Driven Form Examples:</h3>\n<h3>Checkbox group created from projected checkboxes</h3>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'subjects\'" [label]="\'Subjects selected:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'semester1\'" [(ngModel)]="subjects">\n            <fdp-checkbox [value]="\'Math\'" [label]="\'Math\'" [disabled]="true"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Chemistry\'" [label]="\'Chemistry\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Physics\'" [label]="\'Physics\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Biology\'" [label]="\'Biology\'" [disabled]="true"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Selected Subjects: {{ subjects }}</span>\n\n<p>Pre-selection based on value passed</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'reptiles\'" [label]="\'All reptiles:\'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'reptiles\'" [(ngModel)]="reptiles">\n            <fdp-checkbox [value]="\'Snakes\'" [label]="\'Snakes\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Crocodiles\'" [label]="\'Crocodiles\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Lizards\'" [label]="\'Lizards\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Elephants\'" [label]="\'Elephants\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n<span style="margin-left: 2rem;">All Reptiles: {{ reptiles }}</span>\n\n<p>Disabled checkbox group</p>\n<fdp-form-group [multiLayout]="true">\n    <fdp-form-field [id]="\'countries\'" [label]="\'Disabled checkbox Group: \'" zone="zLeft" rank="1">\n        <fdp-checkbox-group [name]="\'visited countries\'" [disabled]="true">\n            <fdp-checkbox [value]="\'Italy\'" [label]="\'Italy\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'France\'" [label]="\'France\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Switzerland\'" [label]="\'Switzerland\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'Austria\'" [label]="\'Austria\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n</fdp-form-group>\n',y="import { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'fdp-platform-checkbox-group-content',\n    templateUrl: './platform-checkbox-group-content-checkbox.component.html'\n})\nexport class PlatformCheckboxGroupContentCheckboxComponent {\n    hobbies = { hobbies: ['coding', 'gardening'] };\n\n    form1 = new FormGroup({});\n    form2 = new FormGroup({});\n    form3 = new FormGroup({\n        visited: new FormControl(['Italy', 'France'])\n    });\n\n    // Template driven\n    subjects = '';\n    reptiles = ['Lizards', 'Snakes'];\n}\n",C='<h3>Checkbox group created from passed checkboxes and value is required</h3>\n<fdp-form-group [multiLayout]="true" [formGroup]="form1" [object]="favourites">\n    <fdp-form-field #fl1 [id]="\'fruitsEx\'" [label]="\'My favourite fruits:\'" [required]="true" zone="zLeft" rank="1">\n        <fdp-checkbox-group [isInline]="true" [name]="\'fruits\'" [formControl]="fl1.formControl">\n            <fdp-checkbox [value]="\'apple\'" [label]="\'Apple\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'banana\'" [label]="\'Banana\'"></fdp-checkbox>\n            <fdp-checkbox [value]="\'grapes\'" [label]="\'Grapes\'"></fdp-checkbox>\n        </fdp-checkbox-group>\n    </fdp-form-field>\n\n    <ng-template #i18n let-errors>\n        <ng-container *ngIf="errors.required">\n            <span>Value is required.</span>\n        </ng-container>\n    </ng-template>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Favourites: {{ form1.controls.fruitsEx?.value }}</span>\n\n<h3>Checkbox group created from list of values and value is required</h3>\n<fdp-form-group [multiLayout]="true" [formGroup]="form2">\n    <fdp-form-field #fl2 [id]="\'fruits1\'" [label]="\'My favourite fruits:\'" [required]="true" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [isInline]="true"\n            [name]="\'fruits\'"\n            [list]="fruits"\n            [formControl]="fl2.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n\n    <ng-template #i18n let-errors>\n        <ng-container *ngIf="errors.required">\n            <span>Value is required.</span>\n        </ng-container>\n    </ng-template>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Favourites: {{ form2.controls.fruits1?.value }}</span>\n\n<h3>Checkbox group created from list of SelectItem Objects and value is required</h3>\n<fdp-form-group [multiLayout]="true" [formGroup]="form3">\n    <fdp-form-field #fl3 [id]="\'language\'" [label]="\'Languages Known:\'" [required]="true" zone="zLeft" rank="1">\n        <fdp-checkbox-group\n            [isInline]="true"\n            [name]="\'language\'"\n            [list]="languages"\n            [formControl]="fl3.formControl"\n        ></fdp-checkbox-group>\n    </fdp-form-field>\n\n    <ng-template #i18n let-errors>\n        <ng-container *ngIf="errors.required">\n            <span>Value is required.</span>\n        </ng-container>\n    </ng-template>\n</fdp-form-group>\n<span style="margin-left: 2rem;">Languages Known: {{ form3.controls.language?.value }}</span>\n',A="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { SelectItem } from '@fundamental-ngx/platform';\n\n@Component({\n    selector: 'fdp-platform-checkbox-group-example',\n    templateUrl: './platform-checkbox-group-example.component.html'\n})\nexport class PlatformCheckboxGroupExampleComponent {\n    fruits: string[] = ['Apple', 'Banana', 'Grapes'];\n    favourites = { fruitsEx: ['banana'] };\n    favourites1 = { fruits1: ['Apple'] };\n    languages = [\n        new LanguageKnown('Java', 'java', false),\n        new LanguageKnown('Javascript', 'javascript', true),\n        new LanguageKnown('Python', 'python', false),\n        new LanguageKnown('GoLang', 'go', true)\n    ];\n\n    form1 = new FormGroup({});\n    form2 = new FormGroup({});\n    form3 = new FormGroup({});\n}\n\nclass LanguageKnown implements SelectItem {\n    constructor(public label: string, public value: string, public disabled: boolean) {}\n}\n",Q=n("EM62"),R=n("9Cr2"),M=n("Zn6N"),L=n("dB5E"),w=n("nIj0"),O=n("+lTP"),G=n("twBq"),I=n("YYgE"),z=n("ekBi"),P=function(){function e(){this.seasons=["Winter","Spring","Summer","Autumn"],this.sports=["cycling","running","visit gym","swimming"],this.phoneslist=["Samsung","Apple","OnePlus","Redmi"],this.selectedPhones={phones:["Samsung","OnePlus"]},this.form1=new w.k({}),this.form2=new w.k({}),this.form3=new w.k({sports:new w.h(["cycling","running"])}),this.countrySeason="",this.selectedSports=["running","swimming"]}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["fdp-platform-checkbox-group-list"]],decls:69,vars:54,consts:[[3,"multiLayout","formGroup"],["zone","zLeft","rank","1",3,"id","label"],["fl1",""],[3,"list","name","isInline","formControl"],[2,"margin-left","2rem"],[3,"multiLayout","formGroup","object"],["fl2",""],[3,"list","name","formControl"],["fl4",""],["formControlName","sports",3,"list","name"],["zone","zLeft","rank","1",3,"id","label","disabled"],["fl3",""],[3,"multiLayout"],[3,"list","name","isInline","ngModel","ngModelChange"],[3,"list","name","ngModel","ngModelChange"],[3,"list","name","disabled"]],template:function(e,o){if(1&e&&(Q.Rb(0,"h3"),Q.Oc(1,"Reactive Form Examples:"),Q.Qb(),Q.Rb(2,"h3"),Q.Oc(3,"Checkboxes created from given list of values"),Q.Qb(),Q.Rb(4,"p"),Q.Oc(5,"Inline checkboxes"),Q.Qb(),Q.Rb(6,"fdp-form-group",0),Q.Rb(7,"fdp-form-field",1,2),Q.Mb(9,"fdp-checkbox-group",3),Q.Qb(),Q.Qb(),Q.Rb(10,"span",4),Q.Oc(11),Q.Qb(),Q.Mb(12,"br"),Q.Mb(13,"br"),Q.Rb(14,"p"),Q.Oc(15,"Pre-selection based on value passed"),Q.Qb(),Q.Rb(16,"fdp-form-group",5),Q.Rb(17,"fdp-form-field",1,6),Q.Mb(19,"fdp-checkbox-group",7),Q.Qb(),Q.Qb(),Q.Rb(20,"span",4),Q.Oc(21),Q.Qb(),Q.Mb(22,"br"),Q.Mb(23,"br"),Q.Rb(24,"p"),Q.Oc(25,"Pre-selection based on value passed from formGroup"),Q.Qb(),Q.Rb(26,"fdp-form-group",0),Q.Rb(27,"fdp-form-field",1,8),Q.Mb(29,"fdp-checkbox-group",9),Q.Qb(),Q.Qb(),Q.Rb(30,"span",4),Q.Oc(31),Q.Qb(),Q.Mb(32,"br"),Q.Mb(33,"br"),Q.Rb(34,"p"),Q.Oc(35,"Disabled checkbox group"),Q.Qb(),Q.Rb(36,"fdp-form-group",0),Q.Rb(37,"fdp-form-field",10,11),Q.Mb(39,"fdp-checkbox-group",7),Q.Qb(),Q.Qb(),Q.Mb(40,"br"),Q.Mb(41,"separator"),Q.Rb(42,"h3"),Q.Oc(43,"Template Driven Form"),Q.Qb(),Q.Rb(44,"h3"),Q.Oc(45,"Checkboxes created from given list of values"),Q.Qb(),Q.Rb(46,"p"),Q.Oc(47,"Inline checkboxes"),Q.Qb(),Q.Rb(48,"fdp-form-group",12),Q.Rb(49,"fdp-form-field",1),Q.Rb(50,"fdp-checkbox-group",13),Q.dc("ngModelChange",(function(e){return o.countrySeason=e})),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(51,"span",4),Q.Oc(52),Q.Qb(),Q.Mb(53,"br"),Q.Mb(54,"br"),Q.Rb(55,"p"),Q.Oc(56,"Pre-selection based on value passed"),Q.Qb(),Q.Rb(57,"fdp-form-group",12),Q.Rb(58,"fdp-form-field",1),Q.Rb(59,"fdp-checkbox-group",14),Q.dc("ngModelChange",(function(e){return o.selectedSports=e})),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(60,"span",4),Q.Oc(61),Q.Qb(),Q.Mb(62,"br"),Q.Mb(63,"br"),Q.Rb(64,"p"),Q.Oc(65,"Disabled checkbox group"),Q.Qb(),Q.Rb(66,"fdp-form-group",12),Q.Rb(67,"fdp-form-field",1),Q.Mb(68,"fdp-checkbox-group",15),Q.Qb(),Q.Qb()),2&e){var n=Q.zc(8),r=Q.zc(18),t=Q.zc(38);Q.Ab(6),Q.oc("multiLayout",!0)("formGroup",o.form1),Q.Ab(1),Q.oc("id","seasons")("label","My favourite Seasons: "),Q.Ab(2),Q.oc("list",o.seasons)("name","favseasons")("isInline",!0)("formControl",n.formControl),Q.Ab(2),Q.Qc("Seasons: ",null==o.form1.controls.seasons?null:o.form1.controls.seasons.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form2)("object",o.selectedPhones),Q.Ab(1),Q.oc("id","phones")("label","Phones interested in:"),Q.Ab(2),Q.oc("list",o.phoneslist)("name","brands")("formControl",r.formControl),Q.Ab(2),Q.Qc("Available brands: ",null==o.form2.controls.phones?null:o.form2.controls.phones.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form3),Q.Ab(1),Q.oc("id","sports1")("label","Sports I Play:"),Q.Ab(2),Q.oc("list",o.sports)("name","sports"),Q.Ab(2),Q.Qc("Sports: ",null==o.form3.controls.sports1?null:o.form3.controls.sports1.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form3),Q.Ab(1),Q.oc("id","sportsDisabled")("label","Disabled checkbox Group: ")("disabled",!0),Q.Ab(2),Q.oc("list",o.sports)("name","sports")("formControl",t.formControl),Q.Ab(9),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","weather")("label","My favourite Weather:"),Q.Ab(1),Q.oc("list",o.seasons)("name","seasonsfav")("isInline",!0)("ngModel",o.countrySeason),Q.Ab(2),Q.Qc("Weather: ",o.countrySeason,""),Q.Ab(5),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","sports")("label","Sports interested in:"),Q.Ab(1),Q.oc("list",o.sports)("name","sports")("ngModel",o.selectedSports),Q.Ab(2),Q.Qc("Sports: ",o.selectedSports,""),Q.Ab(5),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","sportsDisabled")("label","Disabled checkbox Group:"),Q.Ab(1),Q.oc("list",o.sports)("name","sports")("disabled",!0)}},directives:[O.a,w.u,w.l,G.a,I.a,w.t,w.i,w.j,z.a,w.w],encapsulation:2}),e}(),F=n("gJWE"),S=function(){function e(){this.countryCurrency=[new j("Australia","AUD"),new j("India","INR"),new j("USA","USD")],this.currency=["AUD","USD"],this.languages=[new D("Java","java",!1),new D("Javascript","javascript",!0),new D("Python","python",!1),new D("GoLang","go",!0)],this.countryVisited=[new j("Australia","Australia"),new j("India","India"),new j("USA","USA")],this.visited={visited:["India","USA"]},this.form4=new w.k({}),this.form5=new w.k({}),this.form6=new w.k({currencies:new w.h(["INR"])}),this.form7=new w.k({}),this.invoiceItems=[new E("1","coffee","Coffee",100,12),new E("2","pen","Pen",200,5),new E("3","chair","Office chair",50,5530)],this.languagesKnown="",this.currencies=["INR","USD"],this.itemsData=["pen"]}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["fdp-platform-checkbox-group-list-object"]],decls:87,vars:76,consts:[[3,"multiLayout","formGroup"],["zone","zLeft","rank","1",3,"id","label"],["fl1",""],[3,"list","isInline","name","contentDensity","formControl"],[2,"margin-left","2rem"],[3,"multiLayout","formGroup","object"],["fl2",""],[3,"list","name","formControl"],["fl4",""],["formControlName","currencies",3,"list","name"],["fl5",""],[3,"list","name","lookupKey","displayKey","formControl"],["zone","zLeft","rank","1",3,"id","label","disabled"],["fl3",""],[3,"multiLayout"],[3,"list","isInline","name","ngModel","ngModelChange"],[3,"list","name","contentDensity","ngModel","ngModelChange"],[3,"list","name","lookupKey","displayKey","ngModel","ngModelChange"],[3,"list","disabled","name"]],template:function(e,o){if(1&e&&(Q.Rb(0,"h3"),Q.Oc(1,"Reactive Form Examples:"),Q.Qb(),Q.Rb(2,"h3"),Q.Oc(3,"Checkboxes created from from list of selectItem Objects"),Q.Qb(),Q.Rb(4,"p"),Q.Oc(5,"Inline checkboxes"),Q.Qb(),Q.Rb(6,"fdp-form-group",0),Q.Rb(7,"fdp-form-field",1,2),Q.Mb(9,"fdp-checkbox-group",3),Q.Qb(),Q.Qb(),Q.Rb(10,"span",4),Q.Oc(11),Q.Qb(),Q.Mb(12,"br"),Q.Mb(13,"br"),Q.Rb(14,"p"),Q.Oc(15,"Pre-selection based on control value passed"),Q.Qb(),Q.Rb(16,"fdp-form-group",5),Q.Rb(17,"fdp-form-field",1,6),Q.Mb(19,"fdp-checkbox-group",7),Q.Qb(),Q.Qb(),Q.Rb(20,"span",4),Q.Oc(21),Q.Qb(),Q.Mb(22,"br"),Q.Mb(23,"br"),Q.Rb(24,"p"),Q.Oc(25,"Pre-selection based on control value passed from formGroup"),Q.Qb(),Q.Rb(26,"fdp-form-group",5),Q.Rb(27,"fdp-form-field",1,8),Q.Mb(29,"fdp-checkbox-group",9),Q.Qb(),Q.Qb(),Q.Rb(30,"span",4),Q.Oc(31),Q.Qb(),Q.Mb(32,"br"),Q.Mb(33,"br"),Q.Rb(34,"p"),Q.Oc(35,"Lookup key and Disaplay key usages."),Q.Qb(),Q.Rb(36,"fdp-form-group",0),Q.Rb(37,"fdp-form-field",1,10),Q.Mb(39,"fdp-checkbox-group",11),Q.Qb(),Q.Qb(),Q.Rb(40,"span",4),Q.Oc(41),Q.Qb(),Q.Mb(42,"br"),Q.Mb(43,"br"),Q.Rb(44,"p"),Q.Oc(45,"Disabled checkbox group"),Q.Qb(),Q.Rb(46,"fdp-form-group",0),Q.Rb(47,"fdp-form-field",12,13),Q.Mb(49,"fdp-checkbox-group",7),Q.Qb(),Q.Qb(),Q.Mb(50,"separator"),Q.Rb(51,"h3"),Q.Oc(52,"Template Driven Form"),Q.Qb(),Q.Rb(53,"h3"),Q.Oc(54,"Checkboxes created from from list of selectItem Objects"),Q.Qb(),Q.Rb(55,"p"),Q.Oc(56,"Inline checkboxes"),Q.Qb(),Q.Rb(57,"fdp-form-group",14),Q.Rb(58,"fdp-form-field",1),Q.Rb(59,"fdp-checkbox-group",15),Q.dc("ngModelChange",(function(e){return o.languagesKnown=e})),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(60,"span",4),Q.Oc(61),Q.Qb(),Q.Mb(62,"br"),Q.Mb(63,"br"),Q.Rb(64,"p"),Q.Oc(65,"Pre-selection based on value passed"),Q.Qb(),Q.Rb(66,"fdp-form-group",14),Q.Rb(67,"fdp-form-field",1),Q.Rb(68,"fdp-checkbox-group",16),Q.dc("ngModelChange",(function(e){return o.currencies=e})),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(69,"span",4),Q.Oc(70),Q.Qb(),Q.Mb(71,"br"),Q.Mb(72,"br"),Q.Rb(73,"p"),Q.Oc(74,"Lookup key and Disaplay key usages."),Q.Qb(),Q.Rb(75,"fdp-form-group",14),Q.Rb(76,"fdp-form-field",1),Q.Rb(77,"fdp-checkbox-group",17),Q.dc("ngModelChange",(function(e){return o.itemsData=e})),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(78,"span",4),Q.Oc(79),Q.Qb(),Q.Mb(80,"br"),Q.Mb(81,"br"),Q.Rb(82,"p"),Q.Oc(83,"Disabled checkbox group"),Q.Qb(),Q.Rb(84,"fdp-form-group",14),Q.Rb(85,"fdp-form-field",1),Q.Mb(86,"fdp-checkbox-group",18),Q.Qb(),Q.Qb()),2&e){var n=Q.zc(8),r=Q.zc(18),t=Q.zc(38),a=Q.zc(48);Q.Ab(6),Q.oc("multiLayout",!0)("formGroup",o.form4),Q.Ab(1),Q.oc("id","languages")("label","Programming Languages Known: "),Q.Ab(2),Q.oc("list",o.languages)("isInline",!0)("name","languages")("contentDensity","compact")("formControl",n.formControl),Q.Ab(2),Q.Qc("Languages: ",null==o.form4.controls.languages?null:o.form4.controls.languages.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form5)("object",o.visited),Q.Ab(1),Q.oc("id","visited")("label","Country visited: "),Q.Ab(2),Q.oc("list",o.countryVisited)("name","visited")("formControl",r.formControl),Q.Ab(2),Q.Qc("Visited Country: ",null==o.form5.controls.visited?null:o.form5.controls.visited.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form6)("object",o.visited),Q.Ab(1),Q.oc("id","currencies")("label","Currencies Exchanging: "),Q.Ab(2),Q.oc("list",o.countryCurrency)("name","currency"),Q.Ab(2),Q.Qc("Currencies: ",null==o.form6.controls.currencies?null:o.form6.controls.currencies.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form7),Q.Ab(1),Q.oc("id","items")("label","Purchased Items: "),Q.Ab(2),Q.oc("list",o.invoiceItems)("name","invoices")("lookupKey","item")("displayKey","itemType")("formControl",t.formControl),Q.Ab(2),Q.Qc("Purchased Items: ",null==o.form7.controls.items?null:o.form7.controls.items.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form6),Q.Ab(1),Q.oc("id","disabled currencies")("label","Disabled checkbox Group: ")("disabled",!0),Q.Ab(2),Q.oc("list",o.countryCurrency)("name","currencies")("formControl",a.formControl),Q.Ab(8),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","languages known")("label","Programming Languages Known: "),Q.Ab(1),Q.oc("list",o.languages)("isInline",!0)("name","languages")("ngModel",o.languagesKnown),Q.Ab(2),Q.Qc("Languages: ",o.languagesKnown,""),Q.Ab(5),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","currency")("label","Currencies in country: "),Q.Ab(1),Q.oc("list",o.countryCurrency)("name","currencies")("contentDensity","compact")("ngModel",o.currencies),Q.Ab(2),Q.Qc("Currencies: ",o.currencies,""),Q.Ab(5),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","itemst")("label","Purchased Items: "),Q.Ab(1),Q.oc("list",o.invoiceItems)("name","items")("lookupKey","item")("displayKey","itemType")("ngModel",o.itemsData),Q.Ab(2),Q.Qc("Purchased Items: ",o.itemsData,""),Q.Ab(5),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","disabled currency")("label","Disabled checkbox Group: "),Q.Ab(1),Q.oc("list",o.countryCurrency)("disabled",!0)("name","currencies")}},directives:[O.a,w.u,w.l,G.a,I.a,w.t,w.i,w.j,z.a,w.w],encapsulation:2}),e}(),j=function(){return function(e,o){this.label=e,this.value=o}}(),D=function(){return function(e,o,n){this.label=e,this.value=o,this.disabled=n}}(),E=function(){return function(e,o,n,r,t){this.itemId=e,this.item=o,this.itemType=n,this.quantity=r,this.rate=t}}(),K=n("j6Nu"),N=function(){function e(){this.hobbies={hobbies:["coding","gardening"]},this.form1=new w.k({}),this.form2=new w.k({}),this.form3=new w.k({visited:new w.h(["Italy","France"])}),this.subjects="",this.reptiles=["Lizards","Snakes"]}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["fdp-platform-checkbox-group-content"]],decls:86,vars:105,consts:[[3,"multiLayout","formGroup"],["zone","zLeft","rank","1",3,"id","label"],["fl1",""],[3,"name","formControl"],[3,"value","label","disabled"],[3,"value","label"],[2,"margin-left","2rem"],[3,"multiLayout","formGroup","object"],["fl2",""],["fl4",""],["formControlName","visited",3,"name"],["zone","zLeft","rank","1",3,"id","label","disabled"],["fl3",""],[3,"multiLayout"],[3,"name","ngModel","ngModelChange"],[3,"name","disabled"]],template:function(e,o){if(1&e&&(Q.Rb(0,"h3"),Q.Oc(1,"Reactive Form Examples:"),Q.Qb(),Q.Rb(2,"h3"),Q.Oc(3,"Checkbox group created from projected checkboxes"),Q.Qb(),Q.Rb(4,"fdp-form-group",0),Q.Rb(5,"fdp-form-field",1,2),Q.Rb(7,"fdp-checkbox-group",3),Q.Mb(8,"fdp-checkbox",4),Q.Mb(9,"fdp-checkbox",5),Q.Mb(10,"fdp-checkbox",4),Q.Mb(11,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(12,"span",6),Q.Oc(13),Q.Qb(),Q.Rb(14,"p"),Q.Oc(15,"Pre-selection based on value passed"),Q.Qb(),Q.Rb(16,"fdp-form-group",7),Q.Rb(17,"fdp-form-field",1,8),Q.Rb(19,"fdp-checkbox-group",3),Q.Mb(20,"fdp-checkbox",5),Q.Mb(21,"fdp-checkbox",5),Q.Mb(22,"fdp-checkbox",5),Q.Mb(23,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(24,"span",6),Q.Oc(25),Q.Qb(),Q.Mb(26,"br"),Q.Mb(27,"br"),Q.Rb(28,"p"),Q.Oc(29,"Pre-selection based on value passed from FormGroup"),Q.Qb(),Q.Rb(30,"fdp-form-group",0),Q.Rb(31,"fdp-form-field",1,9),Q.Rb(33,"fdp-checkbox-group",10),Q.Mb(34,"fdp-checkbox",5),Q.Mb(35,"fdp-checkbox",5),Q.Mb(36,"fdp-checkbox",5),Q.Mb(37,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(38,"span",6),Q.Oc(39),Q.Qb(),Q.Mb(40,"br"),Q.Mb(41,"br"),Q.Rb(42,"p"),Q.Oc(43,"Disabled checkbox group"),Q.Qb(),Q.Rb(44,"fdp-form-group",0),Q.Rb(45,"fdp-form-field",11,12),Q.Rb(47,"fdp-checkbox-group",3),Q.Mb(48,"fdp-checkbox",5),Q.Mb(49,"fdp-checkbox",5),Q.Mb(50,"fdp-checkbox",5),Q.Mb(51,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb(),Q.Mb(52,"separator"),Q.Rb(53,"h3"),Q.Oc(54,"Template Driven Form Examples:"),Q.Qb(),Q.Rb(55,"h3"),Q.Oc(56,"Checkbox group created from projected checkboxes"),Q.Qb(),Q.Rb(57,"fdp-form-group",13),Q.Rb(58,"fdp-form-field",1),Q.Rb(59,"fdp-checkbox-group",14),Q.dc("ngModelChange",(function(e){return o.subjects=e})),Q.Mb(60,"fdp-checkbox",4),Q.Mb(61,"fdp-checkbox",5),Q.Mb(62,"fdp-checkbox",5),Q.Mb(63,"fdp-checkbox",4),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(64,"span",6),Q.Oc(65),Q.Qb(),Q.Rb(66,"p"),Q.Oc(67,"Pre-selection based on value passed"),Q.Qb(),Q.Rb(68,"fdp-form-group",13),Q.Rb(69,"fdp-form-field",1),Q.Rb(70,"fdp-checkbox-group",14),Q.dc("ngModelChange",(function(e){return o.reptiles=e})),Q.Mb(71,"fdp-checkbox",5),Q.Mb(72,"fdp-checkbox",5),Q.Mb(73,"fdp-checkbox",5),Q.Mb(74,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb(),Q.Rb(75,"span",6),Q.Oc(76),Q.Qb(),Q.Rb(77,"p"),Q.Oc(78,"Disabled checkbox group"),Q.Qb(),Q.Rb(79,"fdp-form-group",13),Q.Rb(80,"fdp-form-field",1),Q.Rb(81,"fdp-checkbox-group",15),Q.Mb(82,"fdp-checkbox",5),Q.Mb(83,"fdp-checkbox",5),Q.Mb(84,"fdp-checkbox",5),Q.Mb(85,"fdp-checkbox",5),Q.Qb(),Q.Qb(),Q.Qb()),2&e){var n=Q.zc(6),r=Q.zc(18),t=Q.zc(46);Q.Ab(4),Q.oc("multiLayout",!0)("formGroup",o.form1),Q.Ab(1),Q.oc("id","fruits")("label","My favourite fruits:"),Q.Ab(2),Q.oc("name","fruits")("formControl",n.formControl),Q.Ab(1),Q.oc("value","apple")("label","Apple")("disabled",!0),Q.Ab(1),Q.oc("value","banana")("label","Banana"),Q.Ab(1),Q.oc("value","guava")("label","Guava")("disabled",!0),Q.Ab(1),Q.oc("value","papaya")("label","Papaya"),Q.Ab(2),Q.Qc("Favourites: ",null==o.form1.controls.fruits?null:o.form1.controls.fruits.value,""),Q.Ab(3),Q.oc("multiLayout",!0)("formGroup",o.form2)("object",o.hobbies),Q.Ab(1),Q.oc("id","hobbies")("label","My Hobbies:"),Q.Ab(2),Q.oc("name","hobby")("formControl",r.formControl),Q.Ab(1),Q.oc("value","cooking")("label","Cooking"),Q.Ab(1),Q.oc("value","painting")("label","Painting"),Q.Ab(1),Q.oc("value","coding")("label","Coding"),Q.Ab(1),Q.oc("value","gardening")("label","Gardening"),Q.Ab(2),Q.Qc("Hobbies: ",null==o.form2.controls.hobbies?null:o.form2.controls.hobbies.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form3),Q.Ab(1),Q.oc("id","visited1")("label","visited countries"),Q.Ab(2),Q.oc("name","countries"),Q.Ab(1),Q.oc("value","Italy")("label","Italy"),Q.Ab(1),Q.oc("value","France")("label","France"),Q.Ab(1),Q.oc("value","Switzerland")("label","Switzerland"),Q.Ab(1),Q.oc("value","Austria")("label","Austria"),Q.Ab(2),Q.Qc("Visited Countries: ",null==o.form3.controls.visited1?null:o.form3.controls.visited1.value,""),Q.Ab(5),Q.oc("multiLayout",!0)("formGroup",o.form3),Q.Ab(1),Q.oc("id","visited countries")("label","Disabled checkbox Group: ")("disabled",!0),Q.Ab(2),Q.oc("name","countries")("formControl",t.formControl),Q.Ab(1),Q.oc("value","Italy")("label","Italy"),Q.Ab(1),Q.oc("value","France")("label","France"),Q.Ab(1),Q.oc("value","Switzerland")("label","Switzerland"),Q.Ab(1),Q.oc("value","Austria")("label","Austria"),Q.Ab(6),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","subjects")("label","Subjects selected:"),Q.Ab(1),Q.oc("name","semester1")("ngModel",o.subjects),Q.Ab(1),Q.oc("value","Math")("label","Math")("disabled",!0),Q.Ab(1),Q.oc("value","Chemistry")("label","Chemistry"),Q.Ab(1),Q.oc("value","Physics")("label","Physics"),Q.Ab(1),Q.oc("value","Biology")("label","Biology")("disabled",!0),Q.Ab(2),Q.Qc("Selected Subjects: ",o.subjects,""),Q.Ab(3),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","reptiles")("label","All reptiles:"),Q.Ab(1),Q.oc("name","reptiles")("ngModel",o.reptiles),Q.Ab(1),Q.oc("value","Snakes")("label","Snakes"),Q.Ab(1),Q.oc("value","Crocodiles")("label","Crocodiles"),Q.Ab(1),Q.oc("value","Lizards")("label","Lizards"),Q.Ab(1),Q.oc("value","Elephants")("label","Elephants"),Q.Ab(2),Q.Qc("All Reptiles: ",o.reptiles,""),Q.Ab(3),Q.oc("multiLayout",!0),Q.Ab(1),Q.oc("id","countries")("label","Disabled checkbox Group: "),Q.Ab(1),Q.oc("name","visited countries")("disabled",!0),Q.Ab(1),Q.oc("value","Italy")("label","Italy"),Q.Ab(1),Q.oc("value","France")("label","France"),Q.Ab(1),Q.oc("value","Switzerland")("label","Switzerland"),Q.Ab(1),Q.oc("value","Austria")("label","Austria")}},directives:[O.a,w.u,w.l,G.a,I.a,w.t,w.i,K.a,w.j,z.a,w.w],encapsulation:2}),e}(),q=n("2kYt");function U(e,o){1&e&&(Q.Pb(0),Q.Rb(1,"span"),Q.Oc(2,"Value is required."),Q.Qb(),Q.Ob())}function T(e,o){1&e&&Q.Mc(0,U,3,0,"ng-container",11),2&e&&Q.oc("ngIf",o.$implicit.required)}function V(e,o){1&e&&(Q.Pb(0),Q.Rb(1,"span"),Q.Oc(2,"Value is required."),Q.Qb(),Q.Ob())}function B(e,o){1&e&&Q.Mc(0,V,3,0,"ng-container",11),2&e&&Q.oc("ngIf",o.$implicit.required)}function J(e,o){1&e&&(Q.Pb(0),Q.Rb(1,"span"),Q.Oc(2,"Value is required."),Q.Qb(),Q.Ob())}function _(e,o){1&e&&Q.Mc(0,J,3,0,"ng-container",11),2&e&&Q.oc("ngIf",o.$implicit.required)}var H=function(){function e(){this.fruits=["Apple","Banana","Grapes"],this.favourites={fruitsEx:["banana"]},this.favourites1={fruits1:["Apple"]},this.languages=[new W("Java","java",!1),new W("Javascript","javascript",!0),new W("Python","python",!1),new W("GoLang","go",!0)],this.form1=new w.k({}),this.form2=new w.k({}),this.form3=new w.k({})}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["fdp-platform-checkbox-group-example"]],decls:33,vars:36,consts:[[3,"multiLayout","formGroup","object"],["zone","zLeft","rank","1",3,"id","label","required"],["fl1",""],[3,"isInline","name","formControl"],[3,"value","label"],["i18n",""],[2,"margin-left","2rem"],[3,"multiLayout","formGroup"],["fl2",""],[3,"isInline","name","list","formControl"],["fl3",""],[4,"ngIf"]],template:function(e,o){if(1&e&&(Q.Rb(0,"h3"),Q.Oc(1,"Checkbox group created from passed checkboxes and value is required"),Q.Qb(),Q.Rb(2,"fdp-form-group",0),Q.Rb(3,"fdp-form-field",1,2),Q.Rb(5,"fdp-checkbox-group",3),Q.Mb(6,"fdp-checkbox",4),Q.Mb(7,"fdp-checkbox",4),Q.Mb(8,"fdp-checkbox",4),Q.Qb(),Q.Qb(),Q.Mc(9,T,1,1,"ng-template",null,5,Q.Nc),Q.Qb(),Q.Rb(11,"span",6),Q.Oc(12),Q.Qb(),Q.Rb(13,"h3"),Q.Oc(14,"Checkbox group created from list of values and value is required"),Q.Qb(),Q.Rb(15,"fdp-form-group",7),Q.Rb(16,"fdp-form-field",1,8),Q.Mb(18,"fdp-checkbox-group",9),Q.Qb(),Q.Mc(19,B,1,1,"ng-template",null,5,Q.Nc),Q.Qb(),Q.Rb(21,"span",6),Q.Oc(22),Q.Qb(),Q.Rb(23,"h3"),Q.Oc(24,"Checkbox group created from list of SelectItem Objects and value is required"),Q.Qb(),Q.Rb(25,"fdp-form-group",7),Q.Rb(26,"fdp-form-field",1,10),Q.Mb(28,"fdp-checkbox-group",9),Q.Qb(),Q.Mc(29,_,1,1,"ng-template",null,5,Q.Nc),Q.Qb(),Q.Rb(31,"span",6),Q.Oc(32),Q.Qb()),2&e){var n=Q.zc(4),r=Q.zc(17),t=Q.zc(27);Q.Ab(2),Q.oc("multiLayout",!0)("formGroup",o.form1)("object",o.favourites),Q.Ab(1),Q.oc("id","fruitsEx")("label","My favourite fruits:")("required",!0),Q.Ab(2),Q.oc("isInline",!0)("name","fruits")("formControl",n.formControl),Q.Ab(1),Q.oc("value","apple")("label","Apple"),Q.Ab(1),Q.oc("value","banana")("label","Banana"),Q.Ab(1),Q.oc("value","grapes")("label","Grapes"),Q.Ab(4),Q.Qc("Favourites: ",null==o.form1.controls.fruitsEx?null:o.form1.controls.fruitsEx.value,""),Q.Ab(3),Q.oc("multiLayout",!0)("formGroup",o.form2),Q.Ab(1),Q.oc("id","fruits1")("label","My favourite fruits:")("required",!0),Q.Ab(2),Q.oc("isInline",!0)("name","fruits")("list",o.fruits)("formControl",r.formControl),Q.Ab(4),Q.Qc("Favourites: ",null==o.form2.controls.fruits1?null:o.form2.controls.fruits1.value,""),Q.Ab(3),Q.oc("multiLayout",!0)("formGroup",o.form3),Q.Ab(1),Q.oc("id","language")("label","Languages Known:")("required",!0),Q.Ab(2),Q.oc("isInline",!0)("name","language")("list",o.languages)("formControl",t.formControl),Q.Ab(4),Q.Qc("Languages Known: ",null==o.form3.controls.language?null:o.form3.controls.language.value,"")}},directives:[O.a,w.u,w.l,G.a,I.a,w.t,w.i,K.a,q.u],encapsulation:2}),e}(),W=function(){return function(e,o,n){this.label=e,this.value=o,this.disabled=n}}(),$=function(){function e(){this.listCheckboxGroup=[{language:"html",code:r,fileName:"platform-checkbox-group-list"},{language:"typescript",code:t,fileName:"platform-checkbox-group-list",component:"PlatformCheckboxGroupListComponent"}],this.listObjectCheckboxGroup=[{language:"html",code:a,fileName:"platform-checkbox-group-list-object"},{language:"typescript",code:c,fileName:"platform-checkbox-group-list-object",component:"PlatformCheckboxGroupListObjectComponent"}],this.contentCheckboxGroup=[{language:"html",code:l,fileName:"platform-checkbox-group-content-checkbox"},{language:"typescript",code:i,fileName:"platform-checkbox-group-content-checkbox",component:"PlatformCheckboxGroupContentCheckboxComponent"}],this.checkboxGroupExample=[{language:"html",code:s,fileName:"platform-checkbox-group-example"},{language:"typescript",code:b,fileName:"platform-checkbox-group-examples",component:"PlatformCheckboxGroupExampleComponent"}]}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["app-checkbox-group"]],decls:31,vars:12,consts:[[3,"id","componentName"],[3,"exampleFiles"]],template:function(e,o){1&e&&(Q.Rb(0,"fd-docs-section-title",0),Q.Oc(1," Checkbox Group created with List of Values.\n"),Q.Qb(),Q.Rb(2,"description"),Q.Oc(3,"Checkbox Group Created From List of String Values."),Q.Qb(),Q.Rb(4,"component-example"),Q.Mb(5,"fdp-platform-checkbox-group-list"),Q.Qb(),Q.Mb(6,"code-example",1),Q.Mb(7,"separator"),Q.Rb(8,"fd-docs-section-title",0),Q.Oc(9," Checkbox Group created From List of Objects.\n"),Q.Qb(),Q.Rb(10,"description"),Q.Oc(11," Checkbox Group Created From List of Objects. Here it is possible to create some checkboxes as disabled and others enabled.\n"),Q.Qb(),Q.Rb(12,"component-example"),Q.Mb(13,"fdp-platform-checkbox-group-list-object"),Q.Qb(),Q.Mb(14,"code-example",1),Q.Mb(15,"separator"),Q.Rb(16,"fd-docs-section-title",0),Q.Oc(17," Checkbox Group created From content projected Checkboxes.\n"),Q.Qb(),Q.Rb(18,"description"),Q.Oc(19,"Checkbox Group Created from projected Checkboxes. This helps in localisation of checkbox labels."),Q.Qb(),Q.Rb(20,"component-example"),Q.Mb(21,"fdp-platform-checkbox-group-content"),Q.Qb(),Q.Mb(22,"code-example",1),Q.Mb(23,"separator"),Q.Rb(24,"fd-docs-section-title",0),Q.Oc(25," Checkbox Group handling of Form Validation and Error Message Display.\n"),Q.Qb(),Q.Rb(26,"description"),Q.Oc(27,"Checkbox Group Examples for Error Handling."),Q.Qb(),Q.Rb(28,"component-example"),Q.Mb(29,"fdp-platform-checkbox-group-example"),Q.Qb(),Q.Mb(30,"code-example",1)),2&e&&(Q.oc("id","listExample")("componentName","PlatformCheckboxGroupListComponent"),Q.Ab(6),Q.oc("exampleFiles",o.listCheckboxGroup),Q.Ab(2),Q.oc("id","objectExample")("componentName","PlatformCheckboxGroupListObjectComponent"),Q.Ab(6),Q.oc("exampleFiles",o.listObjectCheckboxGroup),Q.Ab(2),Q.oc("id","projectionExample")("componentName","PlatformCheckboxGroupContentCheckboxComponent"),Q.Ab(6),Q.oc("exampleFiles",o.contentCheckboxGroup),Q.Ab(2),Q.oc("id","errorExample")("componentName","PlatformCheckboxGroupListComponent"),Q.Ab(6),Q.oc("exampleFiles",o.checkboxGroupExample))},directives:[R.a,M.a,L.a,P,F.a,z.a,S,N,H],encapsulation:2}),e}(),Y=n("P+xO"),Z=n("7o9V"),X=n("h8DJ"),ee=[{path:"",component:function(){function e(){}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=Q.Fb({type:e,selectors:[["app-checkbox-group-header"]],decls:35,vars:4,consts:[[3,"routerLink"],["module","PlatformCheckboxGroupModule, SelectItem"]],template:function(e,o){1&e&&(Q.Rb(0,"header"),Q.Oc(1,"Checkbox Group"),Q.Qb(),Q.Rb(2,"description"),Q.Oc(3," Platform Checkbox Group creates multiple checkboxes by using list of values or by passing individual checkboxes. "),Q.Rb(4,"a",0),Q.Oc(5,"@fundamental-ngx/Core"),Q.Qb(),Q.Oc(6," does not have an implementation of checkbox group, instead requires user to build group using individual Checkbox components. Platform Checkbox Group handles all these checkboxes together and selection of one or more checkboxes is possible as a form field. It is implemented to work with "),Q.Rb(7,"a",0),Q.Oc(8,"Platform Form"),Q.Qb(),Q.Oc(9,". "),Q.Mb(10,"br"),Q.Mb(11,"br"),Q.Mb(12,"import",1),Q.Mb(13,"br"),Q.Rb(14,"h3"),Q.Oc(15,"Platform specific enhancements:"),Q.Qb(),Q.Rb(16,"ul"),Q.Rb(17,"li"),Q.Oc(18,"Checkbox group can create multiple checkboxes by using list of string values."),Q.Qb(),Q.Rb(19,"li"),Q.Oc(20,"Multiple checkboxes can be created using list of SelectItem Objects."),Q.Qb(),Q.Rb(21,"li"),Q.Oc(22,"Checkbox group can be created by passing checkboxes under checkbox group."),Q.Qb(),Q.Rb(23,"li"),Q.Oc(24,"It is implemented to work with "),Q.Rb(25,"a",0),Q.Oc(26,"Platform Form"),Q.Qb(),Q.Oc(27,"."),Q.Qb(),Q.Rb(28,"li"),Q.Oc(29,"Checkbox group creates "),Q.Rb(30,"a",0),Q.Oc(31," Platform Checkboxes"),Q.Qb(),Q.Oc(32,"."),Q.Qb(),Q.Qb(),Q.Qb(),Q.Mb(33,"fd-header-tabs"),Q.Mb(34,"router-outlet")),2&e&&(Q.Ab(4),Q.oc("routerLink","/core/checkbox"),Q.Ab(3),Q.oc("routerLink","/platform/form"),Q.Ab(18),Q.oc("routerLink","/platform/form"),Q.Ab(5),Q.oc("routerLink","/platform/checkbox"))},directives:[Y.a,M.a,p.d,Z.a,X.a,p.f],encapsulation:2}),e}(),children:[{path:"",component:$},{path:"api",component:u.a,data:{content:m.a.checkboxGroup}}]}],oe=function(){function e(){}return e.\u0275mod=Q.Jb({type:e}),e.\u0275inj=Q.Ib({factory:function(o){return new(o||e)},imports:[[p.e.forChild(ee),d.a,f.i,f.h,f.b],p.e]}),e}()},"P+xO":function(e,o,n){"use strict";n.d(o,"a",(function(){return a}));var r=n("EM62"),t=["*"],a=function(){function e(){}return e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=r.Fb({type:e,selectors:[["header"]],ngContentSelectors:t,decls:2,vars:0,consts:[[1,"header"]],template:function(e,o){1&e&&(r.nc(),r.Rb(0,"h1",0),r.mc(1),r.Qb())},styles:[".header[_ngcontent-%COMP%] {\n                margin-top: 2rem;\n                font-size: 2.2rem;\n            }"]}),e}()},eCHz:function(e,o,n){"use strict";n.d(o,"a",(function(){return h}));var r=n("0krV"),t=(n("LTOS"),n("EM62")),a=n("sEIs"),c=n("2kYt"),l=n("4C0c"),i=n("0b/r"),s=n("LyOV"),b=n("pmyj"),p=n("CE3v"),f=n("zege"),u=["menu"];function m(e,o){if(1&e&&(t.Rb(0,"button",8),t.Oc(1),t.Qb()),2&e){var n=t.hc(),r=t.zc(6);t.oc("fdMenu",!0)("fdMenuTrigger",r),t.Ab(1),t.Qc(" Select a file (",n.files.length,") ")}}var d=function(e){return{"is-selected":e}};function g(e,o){if(1&e){var n=t.Sb();t.Rb(0,"li",9),t.dc("click",(function(){t.Cc(n);var e=o.$implicit;return t.hc().getFile(e)})),t.Rb(1,"div",10),t.Rb(2,"span",11),t.Oc(3),t.Qb(),t.Qb(),t.Qb()}if(2&e){var r=o.$implicit,a=t.hc();t.oc("ngClass",t.sc(2,d,r===a.activeFile)),t.Ab(3),t.Pc(r)}}var h=function(){function e(e,o){this.route=e,this.apiService=o}return e.prototype.ngOnInit=function(){this.route.snapshot.data&&(this.files=this.route.snapshot.data.content),this.files&&this.files.length>0?(this.files.sort(),this.getFile(this.files[0]),this.activeFile=this.files[0]):this.result="<h2>No API files found.</h2>"},e.prototype.getFile=function(e){var o=this;this.apiService.getComponentHtml(e).subscribe((function(n){o.result=n,o.activeFile=e,o.menu.close()}),(function(o){console.warn("Did not find file "+e+".\nError: "+o)}))},e.\u0275fac=function(o){return new(o||e)(t.Lb(a.a),t.Lb(r.a))},e.\u0275cmp=t.Fb({type:e,selectors:[["fd-api"]],viewQuery:function(e,o){var n;1&e&&t.Tc(u,!0),2&e&&t.yc(n=t.ec())&&(o.menu=n.first)},decls:9,vars:5,consts:[[1,"api-main-container"],[1,"api-main-header"],[2,"display","flex","flex-grow","1"],["fd-button","",3,"fdMenu","fdMenuTrigger",4,"ngIf"],["placement","bottom-start",3,"fillControlMode"],["menu",""],["fd-menu-item","",3,"ngClass","click",4,"ngFor","ngForOf"],[3,"innerHTML"],["fd-button","",3,"fdMenu","fdMenuTrigger"],["fd-menu-item","",3,"ngClass","click"],["fd-menu-interactive",""],["fd-menu-title",""]],template:function(e,o){1&e&&(t.Rb(0,"div",0),t.Rb(1,"h2",1),t.Oc(2),t.Qb(),t.Mb(3,"span",2),t.Mc(4,m,2,3,"button",3),t.Rb(5,"fd-menu",4,5),t.Mc(7,g,4,4,"li",6),t.Qb(),t.Qb(),t.Mb(8,"div",7)),2&e&&(t.Ab(2),t.Pc(o.activeFile),t.Ab(2),t.oc("ngIf",o.files.length>1),t.Ab(1),t.oc("fillControlMode",null),t.Ab(2),t.oc("ngForOf",o.files),t.Ab(1),t.oc("innerHTML",o.result,t.Dc))},directives:[c.u,l.a,c.t,i.a,s.a,b.a,c.r,p.a,f.a],styles:[".api-main-header[_ngcontent-%COMP%]{margin:0;font-weight:700;text-rendering:optimizeLegibility}.api-main-container[_ngcontent-%COMP%]{margin-top:2em;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:start;justify-content:flex-start;-ms-flex-wrap:wrap;flex-wrap:wrap}fd-popover[_ngcontent-%COMP%]     .fd-button{margin-right:0}"]}),e}()},h8DJ:function(e,o,n){"use strict";n.d(o,"a",(function(){return p}));var r=n("EM62"),t=n("Rb7q"),a=n("Nyd4"),c=n("sEIs"),l=n("34dh"),i=n("JSov"),s=n("ekBi"),b=function(){return{exact:!0}},p=function(){function e(){}return e.prototype.ngOnInit=function(){},e.\u0275fac=function(o){return new(o||e)},e.\u0275cmp=r.Fb({type:e,selectors:[["fd-header-tabs"]],decls:12,vars:6,consts:[["fd-tab-nav",""],["fd-tab-item",""],["fd-tab-link","","routerLinkActive","",3,"routerLinkActiveOptions","active","routerLink"],["rla1","routerLinkActive"],["fd-tab-tag",""],["fd-tab-link","","routerLinkActive","",3,"active","routerLink"],["rla2","routerLinkActive"],[2,"margin-top","0"]],template:function(e,o){if(1&e&&(r.Rb(0,"ul",0),r.Rb(1,"li",1),r.Rb(2,"a",2,3),r.Rb(4,"span",4),r.Oc(5,"Examples"),r.Qb(),r.Qb(),r.Qb(),r.Rb(6,"li",1),r.Rb(7,"a",5,6),r.Rb(9,"span",4),r.Oc(10,"API"),r.Qb(),r.Qb(),r.Qb(),r.Qb(),r.Mb(11,"separator",7)),2&e){var n=r.zc(3),t=r.zc(8);r.Ab(2),r.oc("routerLinkActiveOptions",r.rc(5,b))("active",n.isActive)("routerLink","./"),r.Ab(5),r.oc("active",t.isActive)("routerLink","./api")}},directives:[t.a,a.a,c.d,l.a,c.c,i.j,s.a],styles:["[_nghost-%COMP%]{display:block}.fd-tabs[_ngcontent-%COMP%]{margin-bottom:0;margin-top:24px}.fd-tabs__item[_ngcontent-%COMP%]{padding:0;margin-right:24px}.fd-tabs__link[_ngcontent-%COMP%]{min-width:60px;padding-right:12px;padding-left:12px;text-align:center}"]}),e}()}}]);