"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4803],{44803:(a,p,s)=>{s.r(p),s.d(p,{ThemeSwitcherDocsModule:()=>M});var o=s(45731),u=s(90147),i=s(6814),e=s(83668),h=s(43870),c=s(9156),f=s(49306),v=s(87444),C=s(34506);let x=(()=>{class n{constructor(){this.file={code:'{\n                "glob": "**/css_variables.css",\n                "input": "./node_modules/@sap-theming/theming-base-content/content/Base/baseLib/",\n                "output": "./assets/theming-base/"\n            },\n            {\n                "glob": "**/*",\n                "input": "./node_modules/fundamental-styles/dist/theming/",\n                "output": "./assets/fundamental-styles-theming/"\n            }\n        ',language:"json"}}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275cmp=e.Xpm({type:n,selectors:[["fd-theme-switcher-header"]],decls:24,vars:1,consts:[[3,"file"],["module","ThemeService","subPackage","utils"]],template:function(t,r){1&t&&(e.TgZ(0,"header"),e._uU(1,"Theme Switcher API"),e.qZA(),e.TgZ(2,"description"),e._uU(3," Theme switcher API allows user to set specific theme programmatically. There is no longer need for each application to implement its own theme switcher code."),e._UZ(4,"br"),e._uU(5," At the moment this won't work for Internet Explorer 11. We will enhance this feature in the near future."),e._UZ(6,"br"),e._uU(7," The API requires additional assets from the npm packages: "),e.TgZ(8,"code"),e._uU(9,"@sap-theming/theming-base-content"),e.qZA(),e._uU(10," and "),e.TgZ(11,"code"),e._uU(12,"fundamental-styles"),e.qZA(),e._uU(13,"."),e._UZ(14,"br"),e._uU(15," Prerequisites - add those objects to assets array in "),e.TgZ(16,"code"),e._uU(17,"angular.json"),e.qZA(),e._uU(18,":"),e._UZ(19,"br"),e._UZ(20,"fd-code-snippet",0),e.qZA(),e._UZ(21,"import",1),e._UZ(22,"fd-header-tabs"),e._UZ(23,"router-outlet")),2&t&&(e.xp6(20),e.Q6J("file",r.file))},directives:[h.G,c.w,f.N,v.k,C.c,o.lC],encapsulation:2}),n})();var y=s(53789),S=s(64823),Z=s(98597),b=s(99775),_=s(6352),w=s(83382),F=s(16966),d=s(4654),g=s(86019),T=s(11937);function E(n,m){if(1&n){const t=e.EpF();e.TgZ(0,"span",1),e.TgZ(1,"button",2),e.NdJ("click",function(){const l=e.CHM(t).$implicit;return e.oxw().selectTheme(l.id)}),e.qZA(),e.qZA()}if(2&n){const t=m.$implicit;e.xp6(1),e.Q6J("label",t.name)}}let A=(()=>{class n{constructor(t){this._themesService=t,this.themeChanged=new e.vpe,this.themes=this._themesService.themes}selectTheme(t){this.cssUrl=this._themesService.setTheme(t),this.cssCustomUrl=this._themesService.setCustomTheme(t),this.themeChanged.emit({themeUrl:this.cssCustomUrl,customThemeUrl:this.cssUrl})}}return n.\u0275fac=function(t){return new(t||n)(e.Y36(d.OR))},n.\u0275cmp=e.Xpm({type:n,selectors:[["fd-theme-switcher-example"]],outputs:{themeChanged:"themeChanged"},decls:1,vars:1,consts:[["style","padding: 10px",4,"ngFor","ngForOf"],[2,"padding","10px"],["fd-button","",3,"label","click"]],template:function(t,r){1&t&&e.YNc(0,E,2,1,"span",0),2&t&&e.Q6J("ngForOf",r.themes)},directives:[g.sg,T.r],encapsulation:2}),n})();var P=s(33512),R=s(55505),D=s(50273),O=s(86263),Q=s(40961);function N(n,m){if(1&n){const t=e.EpF();e.TgZ(0,"span",2),e.TgZ(1,"button",3),e.NdJ("click",function(){const l=e.CHM(t).$implicit;return e.oxw().changeQueryUrl(l.id)}),e.qZA(),e.qZA()}if(2&n){const t=m.$implicit;e.xp6(1),e.Q6J("label",t.name)}}let j=(()=>{class n{constructor(t,r){this._themesService=t,this._router=r,this.themeChanged=new e.vpe,this.themes=this._themesService.themes,this.themeQueryParamName="customQueryParam",this._onDestroy$=new D.x,this._listenForThemeChange(),this._themesService.setThemeByRoute(this.themeQueryParamName),this._handleThemesFromUrl()}ngOnDestroy(){this._onDestroy$.next(),this._onDestroy$.complete()}changeQueryUrl(t){this._router.navigate([],{queryParams:{customQueryParam:t}})}_listenForThemeChange(){this._themesService.onThemeQueryParamChange.pipe((0,O.R)(this._onDestroy$)).subscribe(t=>{this.cssCustomUrl=t.customThemeUrl,this.cssUrl=t.themeUrl,this.themeChanged.emit({themeUrl:this.cssCustomUrl,customThemeUrl:this.cssUrl})})}_handleThemesFromUrl(){this.themeFromUrl=this._themesService.getThemesFromURL(this.themeQueryParamName),this.themeFromUrl&&(this.cssCustomUrl=this.themeFromUrl.customThemeUrl,this.cssUrl=this.themeFromUrl.themeUrl,this.themeChanged.emit({themeUrl:this.cssCustomUrl,customThemeUrl:this.cssUrl}))}}return n.\u0275fac=function(t){return new(t||n)(e.Y36(d.OR),e.Y36(o.F0))},n.\u0275cmp=e.Xpm({type:n,selectors:[["fd-theme-url-example"]],outputs:{themeChanged:"themeChanged"},decls:10,vars:4,consts:[["style","padding: 10px",4,"ngFor","ngForOf"],["fd-form-label",""],[2,"padding","10px"],["fd-button","",3,"label","click"]],template:function(t,r){1&t&&(e.YNc(0,N,2,1,"span",0),e._UZ(1,"br"),e._UZ(2,"br"),e.TgZ(3,"label",1),e._uU(4," Theming detected by "),e.TgZ(5,"code"),e._uU(6,"getThemeFromURL"),e.qZA(),e._uU(7," method: "),e.qZA(),e._uU(8),e.ALo(9,"json")),2&t&&(e.Q6J("ngForOf",r.themes),e.xp6(8),e.hij("\n",e.lcZ(9,2,r.themeFromUrl)," "))},directives:[g.sg,Q.h,T.r],pipes:[g.Ts],encapsulation:2}),n})(),I=(()=>{class n{constructor(t){this._docsThemeService=t,this.themeSwitcherExample=[{language:"html",code:y,fileName:"theme-switcher-example"},{language:"typescript",code:Z,fileName:"theme-switcher-example",component:"ThemeSwitcherExampleComponent"}],this.themeUrlExample=[{language:"html",code:S,fileName:"theme-url-example"},{language:"typescript",code:b,fileName:"theme-url-example",component:"ThemeUrlExampleComponent"}]}handleThemeChanged(t){this._docsThemeService.onThemeChange.next(t)}}return n.\u0275fac=function(t){return new(t||n)(e.Y36(_.S))},n.\u0275cmp=e.Xpm({type:n,selectors:[["app-theme-switcher-docs"]],decls:27,vars:2,consts:[["id","theme-switcher","componentName","theme-switcher"],[3,"themeChanged"],[3,"exampleFiles"],["id","via-url","componentName","theme-switcher"]],template:function(t,r){1&t&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," Theme switcher "),e.qZA(),e.TgZ(2,"description"),e._uU(3," Css files are switched via choosing option. "),e.qZA(),e.TgZ(4,"component-example"),e.TgZ(5,"fd-theme-switcher-example",1),e.NdJ("themeChanged",function(l){return r.handleThemeChanged(l)}),e.qZA(),e.qZA(),e._UZ(6,"code-example",2),e._UZ(7,"separator"),e.TgZ(8,"fd-docs-section-title",3),e._uU(9," Setting theme via url "),e.qZA(),e.TgZ(10,"description"),e._uU(11," Theme can be set by adding property in URL providing name of the theme like in the following example. Parameter is configurable, it can be set by calling "),e.TgZ(12,"code"),e._uU(13,"setThemeByRoute"),e.qZA(),e._uU(14,". See example by adding "),e.TgZ(15,"code"),e._uU(16,"?customQueryParam=sap_fiori_3_dark"),e.qZA(),e._uU(17," to URL. To make it work properly, you need to have imported "),e.TgZ(18,"code"),e._uU(19,"RouterModule"),e.qZA(),e._uU(20," into the project. In case you want to handle theming only once, after page is loaded, use "),e.TgZ(21,"code"),e._uU(22,"getThemesFromURL"),e.qZA(),e._uU(23," method.\n"),e.qZA(),e.TgZ(24,"component-example"),e.TgZ(25,"fd-theme-url-example",1),e.NdJ("themeChanged",function(l){return r.handleThemeChanged(l)}),e.qZA(),e.qZA(),e._UZ(26,"code-example",2)),2&t&&(e.xp6(6),e.Q6J("exampleFiles",r.themeSwitcherExample),e.xp6(20),e.Q6J("exampleFiles",r.themeUrlExample))},directives:[w.k,c.w,F.O,A,P.E,R.N,j],encapsulation:2}),n})();var J=s(16543),L=s(64296);const $=[{path:"",component:x,children:[{path:"",component:I},{path:"api",component:u.h,data:{content:i.X.globalConfig}}]}];let M=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=e.oAB({type:n}),n.\u0275inj=e.cJS({providers:[d.OR],imports:[[o.Bz.forChild($),J.g,L.px],o.Bz]}),n})()},87444:(a,p,s)=>{s.d(p,{k:()=>u});var o=s(83668);let u=(()=>{class i{constructor(h){this.currentLib=h}ngOnInit(){const h=["@fundamental-ngx",this.currentLib];this.subPackage&&h.push(this.subPackage),this.library=h.join("/")}}return i.\u0275fac=function(h){return new(h||i)(o.Y36("CURRENT_LIB"))},i.\u0275cmp=o.Xpm({type:i,selectors:[["import"]],inputs:{module:"module",subPackage:"subPackage"},decls:9,vars:2,consts:[[2,"color","rgb(0, 0, 136)"],[2,"color","rgb(0, 136, 0)"]],template:function(h,c){1&h&&(o.TgZ(0,"code"),o.TgZ(1,"span",0),o._uU(2,"import"),o.qZA(),o._uU(3),o.TgZ(4,"span",0),o._uU(5,"from "),o.qZA(),o.TgZ(6,"span",1),o._uU(7),o.qZA(),o._uU(8,"; "),o.qZA()),2&h&&(o.xp6(3),o.hij(" { ",c.module," } "),o.xp6(4),o.hij("'",c.library,"'"))},encapsulation:2}),i})()},53789:a=>{a.exports='<span *ngFor="let theme of themes" style="padding: 10px">\n    <button fd-button (click)="selectTheme(theme.id)" [label]="theme.name"></button>\n</span>\n\n\x3c!--Uncomment if used standalone--\x3e\n\x3c!--<link rel="stylesheet" *ngIf="cssUrl" [href]="cssUrl"/>--\x3e\n\x3c!--<link rel="stylesheet" *ngIf="cssCustomUrl" [href]="cssCustomUrl"/>--\x3e\n'},98597:a=>{a.exports="import { Component, EventEmitter, Output } from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { ThemeServiceOutput, ThemesService } from '@fundamental-ngx/core/utils';\n\n@Component({\n    selector: 'fd-theme-switcher-example',\n    templateUrl: './theme-switcher-example.component.html'\n})\nexport class ThemeSwitcherExampleComponent {\n    /** This is for internal usage, can be removed, when used in standalone application */\n    @Output()\n    themeChanged = new EventEmitter<ThemeServiceOutput>();\n\n    themes = this._themesService.themes;\n    cssUrl: SafeResourceUrl;\n    cssCustomUrl: SafeResourceUrl;\n\n    constructor(private _themesService: ThemesService) {}\n\n    selectTheme(selectedTheme: string): void {\n        this.cssUrl = this._themesService.setTheme(selectedTheme);\n        this.cssCustomUrl = this._themesService.setCustomTheme(selectedTheme);\n\n        this.themeChanged.emit({\n            themeUrl: this.cssCustomUrl,\n            customThemeUrl: this.cssUrl\n        });\n    }\n}\n"},64823:a=>{a.exports='<span *ngFor="let theme of themes" style="padding: 10px">\n    <button fd-button (click)="changeQueryUrl(theme.id)" [label]="theme.name"></button>\n</span>\n\n<br /><br />\n<label fd-form-label> Theming detected by <code>getThemeFromURL</code> method: </label>\n{{ themeFromUrl | json }}\n\n\x3c!--Uncomment if used standalone--\x3e\n\x3c!--<link rel="stylesheet" *ngIf="cssUrl" [href]="cssUrl"/>--\x3e\n\x3c!--<link rel="stylesheet" *ngIf="cssCustomUrl" [href]="cssCustomUrl"/>--\x3e\n'},99775:a=>{a.exports="import { Component, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { ThemeServiceOutput, ThemesService } from '@fundamental-ngx/core/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'fd-theme-url-example',\n    templateUrl: './theme-url-example.component.html'\n})\nexport class ThemeUrlExampleComponent implements OnDestroy {\n    /** This is for internal usage, can be removed, when used in standalone application */\n    @Output()\n    themeChanged = new EventEmitter<ThemeServiceOutput>();\n\n    themes = this._themesService.themes;\n    cssUrl: SafeResourceUrl;\n    cssCustomUrl: SafeResourceUrl;\n    themeFromUrl: ThemeServiceOutput;\n\n    readonly themeQueryParamName = 'customQueryParam';\n\n    /** An RxJS Subject that will kill the data stream upon destruction (for unsubscribing)  */\n    private readonly _onDestroy$: Subject<void> = new Subject<void>();\n\n    constructor(private _themesService: ThemesService, private _router: Router) {\n        this._listenForThemeChange();\n        this._themesService.setThemeByRoute(this.themeQueryParamName);\n\n        this._handleThemesFromUrl();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy$.next();\n        this._onDestroy$.complete();\n    }\n\n    changeQueryUrl(param: string): void {\n        this._router.navigate([], { queryParams: { customQueryParam: param } });\n    }\n\n    private _listenForThemeChange(): void {\n        this._themesService.onThemeQueryParamChange.pipe(takeUntil(this._onDestroy$)).subscribe((theme) => {\n            this.cssCustomUrl = theme.customThemeUrl;\n            this.cssUrl = theme.themeUrl;\n\n            this.themeChanged.emit({\n                themeUrl: this.cssCustomUrl,\n                customThemeUrl: this.cssUrl\n            });\n        });\n    }\n\n    // Method used to directly fetch themes, after page is being loaded. No subscriptions are added there.\n    private _handleThemesFromUrl(): void {\n        this.themeFromUrl = this._themesService.getThemesFromURL(this.themeQueryParamName);\n\n        if (this.themeFromUrl) {\n            this.cssCustomUrl = this.themeFromUrl.customThemeUrl;\n            this.cssUrl = this.themeFromUrl.themeUrl;\n\n            this.themeChanged.emit({\n                themeUrl: this.cssCustomUrl,\n                customThemeUrl: this.cssUrl\n            });\n        }\n    }\n}\n"}}]);