"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2319],{90147:(f,E,o)=>{o.d(E,{h:()=>e}),o(25978);var i=o(83668),_=o(34033),h=o(90101),g=o(86019),p=o(5551),U=o(11937),b=o(48869),A=o(22829),x=o(69290),F=o(17631);const I=["menu"];function D(v,y){if(1&v&&i._UZ(0,"button",8),2&v){const u=i.oxw(),c=i.MAs(6);i.Q6J("label","Select a file ("+u.files.length+")")("fdMenu",!0)("fdMenuTrigger",c)}}function S(v,y){if(1&v){const u=i.EpF();i.TgZ(0,"li",9),i.NdJ("click",function(){const L=i.CHM(u).$implicit;return i.oxw().getFile(L)}),i.TgZ(1,"div",10),i.TgZ(2,"span",11),i._uU(3),i.qZA(),i.qZA(),i.qZA()}if(2&v){const u=y.$implicit,c=i.oxw();i.ekj("is-selected",u===c.activeFile),i.xp6(3),i.Oqu(u)}}let e=(()=>{class v{constructor(u,c){this.route=u,this.apiService=c}ngOnInit(){this.route.snapshot.data&&(this.files=this.route.snapshot.data.content),this.files&&this.files.length>0?(this.files.sort(),this.getFile(this.files[0]),this.activeFile=this.files[0]):this.result="<h2>No API files found.</h2>"}getFile(u){this.apiService.getComponentHtml(u).subscribe(c=>{this.result=c,this.activeFile=u,this.menu.close()},c=>{console.warn("Did not find file "+u+".\nError: "+c)})}}return v.\u0275fac=function(u){return new(u||v)(i.Y36(_.gz),i.Y36(h.S))},v.\u0275cmp=i.Xpm({type:v,selectors:[["fd-api"]],viewQuery:function(u,c){if(1&u&&i.Gf(I,5),2&u){let C;i.iGM(C=i.CRH())&&(c.menu=C.first)}},decls:9,vars:5,consts:[[1,"api-main-container"],[1,"api-main-header"],[2,"display","flex","flex-grow","1"],["fd-button","",3,"label","fdMenu","fdMenuTrigger",4,"ngIf"],["placement","bottom-start",3,"fillControlMode"],["menu",""],["fd-menu-item","",3,"is-selected","click",4,"ngFor","ngForOf"],[3,"innerHTML"],["fd-button","",3,"label","fdMenu","fdMenuTrigger"],["fd-menu-item","",3,"click"],["fd-menu-interactive",""],["fd-menu-title",""]],template:function(u,c){1&u&&(i.TgZ(0,"div",0),i.TgZ(1,"h2",1),i._uU(2),i.qZA(),i._UZ(3,"span",2),i.YNc(4,D,1,3,"button",3),i.TgZ(5,"fd-menu",4,5),i.YNc(7,S,4,3,"li",6),i.qZA(),i.qZA(),i._UZ(8,"div",7)),2&u&&(i.xp6(2),i.Oqu(c.activeFile),i.xp6(2),i.Q6J("ngIf",c.files.length>1),i.xp6(1),i.Q6J("fillControlMode",null),i.xp6(2),i.Q6J("ngForOf",c.files),i.xp6(1),i.Q6J("innerHTML",c.result,i.oJD))},directives:[g.O5,p.M,g.sg,U.r,b.k,A.qv,x.K,F.h],styles:[".api-main-header[_ngcontent-%COMP%]{margin:0;font-weight:bold;text-rendering:optimizeLegibility}.api-main-container[_ngcontent-%COMP%]{margin-top:2em;display:flex;align-items:center;justify-content:flex-start;flex-wrap:wrap}fd-popover[_ngcontent-%COMP%]     .fd-button{margin-right:0}"]}),v})()},34506:(f,E,o)=>{o.d(E,{c:()=>A});var r=o(83668),i=o(73685),_=o(63062),h=o(34033),g=o(89095),p=o(82195),U=o(55505);const b=function(){return{exact:!0}};let A=(()=>{class x{}return x.\u0275fac=function(I){return new(I||x)},x.\u0275cmp=r.Xpm({type:x,selectors:[["fd-header-tabs"]],decls:12,vars:4,consts:[["fd-tab-nav",""],["fd-tab-item",""],["fd-tab-link","","routerLink","./","routerLinkActive","",3,"active","routerLinkActiveOptions"],["rla1","routerLinkActive"],["fd-tab-tag",""],["fd-tab-link","","routerLink","./api","routerLinkActive","",3,"active"],["rla2","routerLinkActive"],[2,"margin-top","0"]],template:function(I,D){if(1&I&&(r.TgZ(0,"ul",0),r.TgZ(1,"li",1),r.TgZ(2,"a",2,3),r.TgZ(4,"span",4),r._uU(5,"Examples"),r.qZA(),r.qZA(),r.qZA(),r.TgZ(6,"li",1),r.TgZ(7,"a",5,6),r.TgZ(9,"span",4),r._uU(10,"API"),r.qZA(),r.qZA(),r.qZA(),r.qZA(),r._UZ(11,"separator",7)),2&I){const S=r.MAs(3),e=r.MAs(8);r.xp6(2),r.Q6J("active",S.isActive)("routerLinkActiveOptions",r.DdM(3,b)),r.xp6(5),r.Q6J("active",e.isActive)}},directives:[i.d,_.w,h.yS,g.w,h.Od,p.P6,U.N],styles:["[_nghost-%COMP%]{display:block}.fd-tabs[_ngcontent-%COMP%]{margin-bottom:0;margin-top:24px;box-shadow:none}.fd-tabs__item[_ngcontent-%COMP%]{padding:0;margin-right:24px}.fd-tabs__link[_ngcontent-%COMP%]{min-width:60px;padding-right:12px;padding-left:12px;text-align:center}"]}),x})()},43870:(f,E,o)=>{o.d(E,{G:()=>_});var r=o(83668);const i=["*"];let _=(()=>{class h{}return h.\u0275fac=function(p){return new(p||h)},h.\u0275cmp=r.Xpm({type:h,selectors:[["header"]],ngContentSelectors:i,decls:2,vars:0,consts:[[1,"header"]],template:function(p,U){1&p&&(r.F$t(),r.TgZ(0,"h1",0),r.Hsn(1),r.qZA())},styles:[".header[_ngcontent-%COMP%]{margin-top:2rem;font-size:2.2rem}"]}),h})()},87444:(f,E,o)=>{o.d(E,{k:()=>i});var r=o(83668);let i=(()=>{class _{constructor(g){this.currentLib=g}ngOnInit(){const g=["@fundamental-ngx",this.currentLib];this.subPackage&&g.push(this.subPackage),this.library=g.join("/")}}return _.\u0275fac=function(g){return new(g||_)(r.Y36("CURRENT_LIB"))},_.\u0275cmp=r.Xpm({type:_,selectors:[["import"]],inputs:{module:"module",subPackage:"subPackage"},decls:9,vars:2,consts:[[2,"color","rgb(0, 0, 136)"],[2,"color","rgb(0, 136, 0)"]],template:function(g,p){1&g&&(r.TgZ(0,"code"),r.TgZ(1,"span",0),r._uU(2,"import"),r.qZA(),r._uU(3),r.TgZ(4,"span",0),r._uU(5,"from "),r.qZA(),r.TgZ(6,"span",1),r._uU(7),r.qZA(),r._uU(8,"; "),r.qZA()),2&g&&(r.xp6(3),r.hij(" { ",p.module," } "),r.xp6(4),r.hij("'",p.library,"'"))},encapsulation:2}),_})()},90101:(f,E,o)=>{o.d(E,{S:()=>_});var r=o(83668),i=o(44522);let _=(()=>{class h{constructor(p,U){this.httpClient=p,this.currentLib=U,this.BASE_URL="assets/typedoc/"}getComponentHtml(p){p=p.toLocaleLowerCase()+".html";const U=this.buildUrl(this.BASE_URL,this.currentLib||"core","classes",p);return this.httpClient.get(U,{responseType:"text"})}buildUrl(...p){return p.join("/").replace(/\/+/g,"/")}}return h.\u0275fac=function(p){return new(p||h)(r.LFG(i.eN),r.LFG("CURRENT_LIB"))},h.\u0275prov=r.Yz7({token:h,factory:h.\u0275fac}),h})()},16543:(f,E,o)=>{o.d(E,{g:()=>c});var r=o(86019),i=o(34033),_=o(39010),h=o(71029),g=o(52427),p=o(90101),U=o(58817),b=o(13131),A=o(90667),x=o(7754),F=o(23932),I=o(25978),D=o(73272),S=o(38203),e=o(74349),v=o(37152);const y=[e.P4,I.$9,x.Q,S.o,b.hJ,D.H,A.nY,F.L,v.s];var u=o(83668);let c=(()=>{class C{}return C.\u0275fac=function(M){return new(M||C)},C.\u0275mod=u.oAB({type:C}),C.\u0275inj=u.cJS({providers:[g.t,p.S],imports:[[_.u5,r.ez,i.Bz,U.f,y,h.JP.forChild()],_.u5,_.UX,U.f,r.ez,e.P4,I.$9,x.Q,S.o,b.hJ,D.H,A.nY,F.L,v.s]}),C})()},52978:(f,E,o)=>{o.r(E),o.d(E,{PlatformUploadCollectionDocsModule:()=>se});var r=o(34033),i=o(6438),_=o(80270),h=o(90147),g=o(16543),p=o(36034),U=o(12359),b=o(18035),A=o(10659),x=o(33972),F=o(95303),I=o(90055),D=o(5699),S=o(45653),e=o(83668),v=o(83382),y=o(9156),u=o(16966),c=o(22411),C=o(78526),L=o(23405),M=o(5250),R=o(81366),B=o(38053),j=o(28805),Z=o(4654);const O=["Liam","Noah","Oliver","William","Elijah","James","Benjamin","Lucas","Mason","Ethan","Alexander","Henry","Jacob","Michael","Daniel","Logan","Jackson","Sebastian","Jack","Aiden"],H=[".jpg",".png",".pdf",".xls"];function W(){const s="abcdefghijklmnopqrstuvwxyz";return s[Math.floor(Math.random()*s.length)].toUpperCase()}function J(s,l){return new Date(+s+Math.random()*(l.getTime()-s.getTime()))}function Y(s,l){return s=Math.ceil(s),l=Math.floor(l),Math.floor(Math.random()*(l-s+1))+s}function $(s){const l=[];for(let n=0;n<s;n++){const t=O[Math.floor(Math.random()*O.length)],d=Y(1,5242880),a=H[Math.floor(Math.random()*H.length)];let m;switch(a){case".jpg":case".png":m="https://picsum.photos/200";break;case".pdf":m="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";break;case".xls":m="https://file-examples-com.github.io/uploads/2017/02/file_example_XLS_10.xls"}l.push({documentId:(0,Z.k$)(),type:"file",name:`File-${n+1}${a}`,uploadedBy:{id:(0,Z.k$)(),name:`${t} ${W()}.`},url:m,uploadedOn:J(new Date(2018,0,1),new Date),fileSize:d,version:Math.floor(10*Math.random())||1})}return l}function K(s,l=3,n=0){const t=[];for(let d=0;d<s;d++){const a=O[Math.floor(Math.random()*O.length)],m=$(Math.floor(10*Math.random()));l!==n&&m.push(...K(Math.floor(10*Math.random()),l,n+1)),t.push({documentId:(0,Z.k$)(),type:"folder",name:`Folder-${d+1}`,uploadedBy:{id:(0,Z.k$)(),name:`${a} ${W()}.`},uploadedOn:J(new Date(2018,0,1),new Date),files:m})}return t}var T=(()=>{return(s=T||(T={}))[s.UPDATE=0]="UPDATE",s[s.NEW_FOLDER=1]="NEW_FOLDER",s[s.UPDATE_VERSION=2]="UPDATE_VERSION",T;var s})();class N extends i.lR{constructor(l){super(),this._http=l,this.items=[...$(50),...K(4,1)],this._cancelUploadNewFileIds=[],this._activeRequest=null}upload({parentFolderId:l,items:n}){return console.log("upload",l,n),this._activeRequest=T.UPDATE,(0,c.of)(this.items).pipe((0,M.g)(5e3),(0,R.b)(()=>{const t=n.map(d=>(delete d.file,d.status=i.c4.SUCCESSFUL,{temporaryDocumentId:d.documentId,item:d}));this._findParentFolderAndAddNewFiles(l,t),this._activeRequest=null}))}download(l){console.log("download",l);const n=l.items.map(t=>this._http.get(t.url,{responseType:"blob"}).pipe((0,B.U)(d=>({blob:d,file:t}))));return(0,C.T)(...n).pipe((0,B.U)(({file:t,blob:d})=>{const a=document.createElement("a"),m=URL.createObjectURL(d);return a.href=m,a.download=t.name,a.click(),URL.revokeObjectURL(m),null}))}moveTo({from:l,to:n,items:t,newFolder:d}){console.log("moveTo",l,n,t,d);const a=t.map(m=>m.documentId);if(this._findParentFolderAndRemoveItemsByIds(l?l.documentId:null,a),d){const m=this._generateNewFolder(d.folderName);this._findParentFolderAndAddFiles(d.parentFolderId,[m]),this._findParentFolderAndAddFiles(m.documentId,t)}else this._findParentFolderAndAddFiles(n?n.documentId:null,t);return(0,c.of)(this.items)}delete({parentFolderId:l,items:n}){console.log("delete",l,n);const t=n.map(d=>d.documentId);return this._findParentFolderAndRemoveItemsByIds(l,t),(0,c.of)(this.items)}fileRenamed({parentFolderId:l,item:n,fileName:t}){console.log("fileRenamed",l,n,t);const d=Object.assign(Object.assign({},n),{name:t});return this._findParentFolderAndUpdateItem(l,d),(0,c.of)(this.items).pipe((0,M.g)(5e3))}newFolder({parentFolderId:l,folder:n}){console.log("newFolder",n,l),this._activeRequest=T.NEW_FOLDER;const t=new L.xQ;return(0,c.of)(this.items).pipe((0,M.g)(5e3),(0,R.b)(()=>{const d=n.documentId;this._cancelUploadNewFileIds.includes(d)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(m=>m!==d),this._activeRequest=null,t.next())}),(0,j.R)(t),(0,R.b)(()=>{const d={temporaryDocumentId:n.documentId,item:Object.assign(Object.assign({},n),{status:i.c4.SUCCESSFUL})};this._findParentFolderAndAddNewFiles(l,[d]),this._activeRequest=null}))}updateVersion({parentFolderId:l,item:n,newItem:t}){console.log("updateVersion",l,n),this._activeRequest=T.UPDATE_VERSION;const d=new L.xQ;return(0,c.of)(this.items).pipe((0,M.g)(5e3),(0,R.b)(()=>{const a=n.documentId;this._cancelUploadNewFileIds.includes(a)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(P=>P!==a),this._activeRequest=null,d.next(!0))}),(0,R.b)(()=>{const a=Object.assign(Object.assign({},n),{status:i.c4.SUCCESSFUL,uploadedOn:new Date,uploadedBy:{id:Date.now(),name:"You"},version:+n.version,name:t.name,fileSize:t.size});this._findParentFolderAndUpdateItem(l,a),this._activeRequest=null}),(0,j.R)(d))}runAfterFail({parentFolderId:l,items:n}){console.log("runAfterFail",l,n);const t=n[0];return this._findParentFolderAndAddNewFiles(l,[{temporaryDocumentId:t.documentId,item:Object.assign(Object.assign({},t),{status:i.c4.SUCCESSFUL})}]),(0,c.of)(this.items)}cancelUploadNewFile({parentFolderId:l,item:n}){console.log("cancelUploadNewFile",l,n);const t=n.documentId;return this._cancelUploadNewFileIds.push(t),this._activeRequest===T.NEW_FOLDER&&this._findParentFolderAndRemoveItemsByIds(l,[t]),this._activeRequest===T.UPDATE&&this._findParentFolderAndRemoveItemsByIds(l,[t]),this._activeRequest===T.UPDATE_VERSION&&(n.status=null,this._findParentFolderAndUpdateItem(l,n)),(0,c.of)(null)}_findParentFolderAndUpdateItem(l,n,t=this.items){if(l)for(let d=0;d<t.length;d++){const a=t[d];if("folder"===a.type)if(a.documentId===l){if(-1!==a.files.findIndex(P=>P.documentId===n.documentId)){a.files[d]=n;break}}else this._findParentFolderAndUpdateItem(l,n,a.files)}else{const d=t.findIndex(a=>a.documentId===n.documentId);-1!==d&&(t[d]=n)}}_findParentFolderAndAddNewFiles(l,n,t=this.items){if(0!==n.length){if(!l){const d=n.pop(),a=t.findIndex(m=>m.documentId===d.temporaryDocumentId);return-1!==a&&(t[a]=d.item),void(n.length>0&&this._findParentFolderAndAddNewFiles(l,n))}for(let d=0;d<t.length;d++){const a=t[d];if("folder"===a.type){if(a.documentId===l){const m=n.reduce((P,Q)=>(P[Q.temporaryDocumentId]=Q.item,P),{});a.files=a.files.map(P=>m[P.documentId]?m[P.documentId]:P);break}this._findParentFolderAndAddNewFiles(l,n,a.files)}}}}_findParentFolderAndAddFiles(l,n,t=this.items){if(0!==n.length){if(!l)return void t.push(...n);for(let d=0;d<t.length;d++){const a=t[d];if("folder"===a.type){if(a.documentId===l){a.files.push(...n);break}this._findParentFolderAndAddFiles(l,n,a.files)}}}}_findParentFolderAndRemoveItemsByIds(l,n,t=this.items){if(0!==n.length){if(!l){const d=n.pop(),a=t.findIndex(m=>m.documentId===d);return void(-1!==a&&(t.splice(a,1),this._findParentFolderAndRemoveItemsByIds(l,n)))}for(let d=0;d<t.length;d++){const a=t[d];if("folder"===a.type){if(a.documentId===l){a.files=a.files.filter(m=>!n.some(P=>P===m.documentId));break}this._findParentFolderAndRemoveItemsByIds(l,n,a.files)}}}}_generateNewFolder(l){return{documentId:(0,Z.k$)(),type:"folder",name:l,uploadedBy:{id:(0,Z.k$)(),name:"You"},uploadedOn:new Date,files:[],status:i.c4.SUCCESSFUL}}}var w=o(44522),z=o(53065);let X=(()=>{class s{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new i.mq(new N(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return s.\u0275fac=function(n){return new(n||s)(e.Y36(w.eN))},s.\u0275cmp=e.Xpm({type:s,selectors:[["fdp-upload-collection-example"]],decls:1,vars:5,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(a){return t.typeMismatch(a)})("filenameLengthExceed",function(a){return t.filenameLengthExceed(a)})("fileSizeExceed",function(a){return t.fileSizeExceed(a)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},directives:[z.T],encapsulation:2}),s})();var G=o(33512);let k=(()=>{class s{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new i.mq(new N(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return s.\u0275fac=function(n){return new(n||s)(e.Y36(w.eN))},s.\u0275cmp=e.Xpm({type:s,selectors:[["fdp-upload-collection-disabled-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","disabled","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(a){return t.typeMismatch(a)})("filenameLengthExceed",function(a){return t.filenameLengthExceed(a)})("fileSizeExceed",function(a){return t.fileSizeExceed(a)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("disabled",!0)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},directives:[z.T],encapsulation:2}),s})(),ee=(()=>{class s{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new i.mq(new N(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return s.\u0275fac=function(n){return new(n||s)(e.Y36(w.eN))},s.\u0275cmp=e.Xpm({type:s,selectors:[["fdp-upload-collection-readonly-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","readonly","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(a){return t.typeMismatch(a)})("filenameLengthExceed",function(a){return t.filenameLengthExceed(a)})("fileSizeExceed",function(a){return t.fileSizeExceed(a)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("readonly",!0)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},directives:[z.T],encapsulation:2}),s})(),ne=(()=>{class s{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new i.mq(new N(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return s.\u0275fac=function(n){return new(n||s)(e.Y36(w.eN))},s.\u0275cmp=e.Xpm({type:s,selectors:[["fdp-upload-collection-turn-off-example"]],decls:1,vars:7,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","showSearch","enablePagination","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(a){return t.typeMismatch(a)})("filenameLengthExceed",function(a){return t.filenameLengthExceed(a)})("fileSizeExceed",function(a){return t.fileSizeExceed(a)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("showSearch",!1)("enablePagination",!1)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},directives:[z.T],encapsulation:2}),s})(),te=(()=>{class s{constructor(){this.uploadCollection=[{language:"html",code:b,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:U,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:p,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionReadOnly=[{language:"html",code:I,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:F,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:p,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionDisabled=[{language:"html",code:x,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:A,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:p,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionTurnOff=[{language:"html",code:S,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:D,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:p,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}]}}return s.\u0275fac=function(n){return new(n||s)},s.\u0275cmp=e.Xpm({type:s,selectors:[["app-platform-upload-collection"]],decls:47,vars:4,consts:[["id","default","componentName","upload-collection"],[3,"exampleFiles"],["id","disabled","componentName","upload-collection"],[1,"code-snippet"],["id","readonly","componentName","upload-collection"],["id","without-pagination-and-search","componentName","upload-collection"]],template:function(n,t){1&n&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," Default "),e.qZA(),e._UZ(2,"description"),e.TgZ(3,"component-example"),e._UZ(4,"fdp-upload-collection-example"),e.qZA(),e._UZ(5,"code-example",1),e.TgZ(6,"fd-docs-section-title",2),e._uU(7," Disabled State "),e.qZA(),e.TgZ(8,"description"),e._uU(9,"Use "),e.TgZ(10,"code",3),e._uU(11,'[disable]="true"'),e.qZA(),e._uU(12," to disable all CRUD buttons."),e.qZA(),e.TgZ(13,"component-example"),e._UZ(14,"fdp-upload-collection-disabled-example"),e.qZA(),e._UZ(15,"code-example",1),e.TgZ(16,"fd-docs-section-title",4),e._uU(17," Readonly State "),e.qZA(),e.TgZ(18,"description"),e._uU(19,"Use "),e.TgZ(20,"code",3),e._uU(21,'[readonly]="true"'),e.qZA(),e._uU(22," to hide all CRUD buttons."),e.qZA(),e.TgZ(23,"component-example"),e._UZ(24,"fdp-upload-collection-readonly-example"),e.qZA(),e._UZ(25,"code-example",1),e.TgZ(26,"fd-docs-section-title",5),e._uU(27," Without Pagination and Search\n"),e.qZA(),e.TgZ(28,"description"),e._uU(29," Use "),e.TgZ(30,"code",3),e._uU(31,'[showSearch]="false"'),e.qZA(),e._uU(32," to hide search input, by default "),e.TgZ(33,"code",3),e._uU(34,'[showSearch]="true"'),e.qZA(),e._uU(35,". "),e._UZ(36,"br"),e._uU(37," Use "),e.TgZ(38,"code",3),e._uU(39,'[enablePagination]="false"'),e.qZA(),e._uU(40," to hide pagination, by default "),e.TgZ(41,"code",3),e._uU(42,'[enablePagination]="true"'),e.qZA(),e._uU(43,".\n"),e.qZA(),e.TgZ(44,"component-example"),e._UZ(45,"fdp-upload-collection-turn-off-example"),e.qZA(),e._UZ(46,"code-example",1)),2&n&&(e.xp6(5),e.Q6J("exampleFiles",t.uploadCollection),e.xp6(10),e.Q6J("exampleFiles",t.uploadCollectionDisabled),e.xp6(10),e.Q6J("exampleFiles",t.uploadCollectionReadOnly),e.xp6(21),e.Q6J("exampleFiles",t.uploadCollectionTurnOff))},directives:[v.k,y.w,u.O,X,G.E,k,ee,ne],encapsulation:2}),s})();var oe=o(43870),le=o(90427),ae=o(87444),ie=o(34506);const de=[{path:"",component:(()=>{class s{}return s.\u0275fac=function(n){return new(n||s)},s.\u0275cmp=e.Xpm({type:s,selectors:[["fd-upload-collection-header"]],decls:31,vars:0,consts:[["label","SAP Ariba Component","title","SAP Ariba Component","color","8"],[1,"code-snippet"],["module","PlatformUploadCollectionModule","subPackage","upload-collection"]],template:function(n,t){1&n&&(e.TgZ(0,"header"),e._uU(1,"Upload Collection"),e.qZA(),e._UZ(2,"fd-info-label",0),e.TgZ(3,"description"),e.TgZ(4,"p"),e._uU(5,"The upload collection allows users to upload one or more files from different devices."),e.qZA(),e.TgZ(6,"h3"),e._uU(7,"Usage"),e.qZA(),e.TgZ(8,"p"),e._uU(9,"Use the upload collection if:"),e.qZA(),e.TgZ(10,"ul"),e.TgZ(11,"li"),e._uU(12,"You want to show a list of uploaded files that can be modified."),e.qZA(),e.TgZ(13,"li"),e._uU(14,"You want to allow users to add or remove files, and to change the file names."),e.qZA(),e.qZA(),e.TgZ(15,"p"),e._uU(16,"Don't use the upload collection if:"),e.qZA(),e.TgZ(17,"ul"),e.TgZ(18,"li"),e._uU(19,"The user can upload only one file to the app. In this case, use the FileUploader control instead."),e.qZA(),e.qZA(),e.TgZ(20,"h3"),e._uU(21,"Required"),e.qZA(),e.TgZ(22,"ul"),e.TgZ(23,"li"),e._uU(24," To use all CRUD operations need to describe "),e.TgZ(25,"code",1),e._uU(26,"UploadCollectionService"),e.qZA(),e._uU(27," (look at examples) "),e.qZA(),e.qZA(),e.qZA(),e._UZ(28,"import",2),e._UZ(29,"fd-header-tabs"),e._UZ(30,"router-outlet"))},directives:[oe.G,le.e,y.w,ae.k,ie.c,r.lC],encapsulation:2}),s})(),children:[{path:"",component:te},{path:"api",component:h.h,data:{content:_.X.uploadCollection}}]}];let se=(()=>{class s{}return s.\u0275fac=function(n){return new(n||s)},s.\u0275mod=e.oAB({type:s}),s.\u0275inj=e.cJS({imports:[[r.Bz.forChild(de),g.g,i.HD],r.Bz]}),s})()},36034:f=>{f.exports="import { HttpClient } from '@angular/common/http';\nimport { merge, Observable, of, Subject } from 'rxjs';\nimport { delay, map, takeUntil, tap } from 'rxjs/operators';\n\nimport { uuidv4 } from '@fundamental-ngx/core/utils';\nimport {\n    CancelUploadNewFileEvent,\n    DeleteEvent,\n    DownloadEvent,\n    FileRenamedEvent,\n    MoveToEvent,\n    NewFolderEvent,\n    UpdateVersionEvent,\n    UploadCollectionDataProvider,\n    UploadCollectionFile,\n    UploadCollectionFolder,\n    UploadCollectionItem,\n    UploadCollectionItemStatus,\n    UploadCollectionNewItem,\n    UploadEvent\n} from '@fundamental-ngx/platform/upload-collection';\n\nimport { generateUploadCollectionItems } from './platform-upload-collection-items-generator';\n\nenum CancelActiveRequest {\n    UPDATE,\n    NEW_FOLDER,\n    UPDATE_VERSION\n}\n\nexport class PlatformUploadCollectionDataProviderExample extends UploadCollectionDataProvider {\n    items: UploadCollectionItem[] = generateUploadCollectionItems(50, 4, 2);\n    private _cancelUploadNewFileIds: (string | number)[] = [];\n    private _activeRequest: CancelActiveRequest = null;\n\n    constructor(private readonly _http: HttpClient) {\n        super();\n    }\n\n    /** The method is triggered when valid files are selected in the file uploader dialog. */\n    upload({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('upload', parentFolderId, items);\n\n        this._activeRequest = CancelActiveRequest.UPDATE;\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const newFiles: UploadCollectionNewItem[] = items.map((item) => {\n                    delete item.file;\n                    item.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n                    return {\n                        temporaryDocumentId: item.documentId,\n                        item\n                    };\n                });\n\n                this._findParentFolderAndAddNewFiles(parentFolderId, newFiles);\n                this._activeRequest = null;\n            })\n        );\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Download button is pressed. */\n    download(data: DownloadEvent): Observable<void> {\n        console.log('download', data);\n\n        const obs = data.items.map((file) =>\n            this._http.get(file.url, { responseType: 'blob' }).pipe(\n                map((blob) => ({\n                    blob,\n                    file\n                }))\n            )\n        );\n\n        return merge(...obs).pipe(\n            map(({ file, blob }) => {\n                const a = document.createElement('a');\n                const objectUrl = URL.createObjectURL(blob);\n                a.href = objectUrl;\n                a.download = file.name;\n                a.click();\n                URL.revokeObjectURL(objectUrl);\n\n                return null;\n            })\n        );\n    }\n\n    /**\n     * The method is triggered when Move to button is pressed and folder to move is selected in the dialog modal.\n     * Should return full dataSource\n     * */\n    moveTo({ from, to, items, newFolder }: MoveToEvent): Observable<UploadCollectionItem[]> {\n        console.log('moveTo', from, to, items, newFolder);\n\n        const ids = items.map((item) => item.documentId);\n\n        this._findParentFolderAndRemoveItemsByIds(from ? from.documentId : null, ids);\n        if (newFolder) {\n            const folder = this._generateNewFolder(newFolder.folderName);\n\n            this._findParentFolderAndAddFiles(newFolder.parentFolderId, [folder]);\n            this._findParentFolderAndAddFiles(folder.documentId, items);\n        } else {\n            this._findParentFolderAndAddFiles(to ? to.documentId : null, items);\n        }\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Delete button is pressed. */\n    delete({ parentFolderId, items }: DeleteEvent): Observable<UploadCollectionItem[]> {\n        console.log('delete', parentFolderId, items);\n\n        const ids = items.map((item) => item.documentId);\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when the file name is changed. */\n    fileRenamed({ parentFolderId, item, fileName }: FileRenamedEvent): Observable<UploadCollectionItem[]> {\n        console.log('fileRenamed', parentFolderId, item, fileName);\n        const updatedItem = {\n            ...item,\n            name: fileName\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(delay(5000));\n    }\n\n    /** The method is triggered when the new folder added. */\n    newFolder({ parentFolderId, folder }: NewFolderEvent): Observable<UploadCollectionItem[]> {\n        console.log('newFolder', folder, parentFolderId);\n\n        this._activeRequest = CancelActiveRequest.NEW_FOLDER;\n        const complete = new Subject();\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const folderId = folder.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(folderId);\n\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== folderId);\n                    this._activeRequest = null;\n                    complete.next();\n                }\n            }),\n            takeUntil(complete),\n            tap(() => {\n                const uploadedFile = {\n                    temporaryDocumentId: folder.documentId,\n                    item: {\n                        ...folder,\n                        status: UploadCollectionItemStatus.SUCCESSFUL\n                    }\n                };\n\n                this._findParentFolderAndAddNewFiles(parentFolderId, [uploadedFile]);\n                this._activeRequest = null;\n            })\n        );\n    }\n\n    /** The method is triggered when Update Version button is pressed and valid file are selected in the file uploader dialog. */\n    updateVersion({ parentFolderId, item, newItem }: UpdateVersionEvent): Observable<UploadCollectionItem[]> {\n        console.log('updateVersion', parentFolderId, item);\n\n        this._activeRequest = CancelActiveRequest.UPDATE_VERSION;\n        const complete = new Subject();\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const itemId = item.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                    this._activeRequest = null;\n                    complete.next(true);\n                }\n            }),\n            tap(() => {\n                const updatedItem: UploadCollectionFile = {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL,\n                    uploadedOn: new Date(),\n                    uploadedBy: {\n                        id: Date.now(),\n                        name: 'You'\n                    },\n                    version: +item.version,\n                    name: newItem.name,\n                    fileSize: newItem.size\n                };\n\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n                this._activeRequest = null;\n            }),\n            takeUntil(complete)\n        );\n    }\n\n    runAfterFail({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('runAfterFail', parentFolderId, items);\n        const item = items[0];\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: item.documentId,\n                item: {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL\n                }\n            }\n        ]);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when Cancel button is pressed */\n    cancelUploadNewFile({ parentFolderId, item }: CancelUploadNewFileEvent): Observable<UploadCollectionItem[]> {\n        console.log('cancelUploadNewFile', parentFolderId, item);\n        const id = item.documentId;\n        this._cancelUploadNewFileIds.push(id);\n\n        if (this._activeRequest === CancelActiveRequest.NEW_FOLDER) {\n            this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n        }\n\n        if (this._activeRequest === CancelActiveRequest.UPDATE) {\n            this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n        }\n\n        if (this._activeRequest === CancelActiveRequest.UPDATE_VERSION) {\n            item.status = null;\n            this._findParentFolderAndUpdateItem(parentFolderId, item);\n        }\n\n        return of(null);\n    }\n\n    /** @hidden */\n    private _findParentFolderAndUpdateItem(\n        parentFolderId: string | number | null,\n        updatedItem: UploadCollectionItem,\n        items = this.items\n    ): void {\n        if (!parentFolderId) {\n            const index = items.findIndex((item) => item.documentId === updatedItem.documentId);\n            if (index !== -1) {\n                items[index] = updatedItem;\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const index = currentItem.files.findIndex((item) => item.documentId === updatedItem.documentId);\n                if (index !== -1) {\n                    currentItem.files[i] = updatedItem;\n\n                    break;\n                }\n            } else {\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddNewFiles(\n        parentFolderId: string | number | null,\n        uploadedFiles: UploadCollectionNewItem[],\n        items = this.items\n    ): void {\n        if (uploadedFiles.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const uploadedFile = uploadedFiles.pop();\n            const index = items.findIndex((item) => item.documentId === uploadedFile.temporaryDocumentId);\n            if (index !== -1) {\n                items[index] = uploadedFile.item;\n            }\n\n            if (uploadedFiles.length > 0) {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const hash = uploadedFiles.reduce((res, file) => {\n                    res[file.temporaryDocumentId] = file.item;\n                    return res;\n                }, {});\n\n                currentItem.files = currentItem.files.map((item) =>\n                    hash[item.documentId] ? hash[item.documentId] : item\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddFiles(\n        parentFolderId: string | number | null,\n        files: UploadCollectionItem[],\n        items = this.items\n    ): void {\n        if (files.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            items.push(...files);\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files.push(...files);\n\n                break;\n            } else {\n                this._findParentFolderAndAddFiles(parentFolderId, files, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndRemoveItemsByIds(\n        parentFolderId: string | number | null,\n        documentsIds: (number | string)[],\n        items = this.items\n    ): void {\n        if (documentsIds.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const documentId = documentsIds.pop();\n            const index = items.findIndex((item) => item.documentId === documentId);\n            if (index !== -1) {\n                items.splice(index, 1);\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files = currentItem.files.filter(\n                    (item) => !documentsIds.some((documentId) => documentId === item.documentId)\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _generateNewFolder(folderName: string): UploadCollectionFolder {\n        return {\n            documentId: uuidv4(),\n            type: 'folder',\n            name: folderName,\n            uploadedBy: {\n                id: uuidv4(),\n                name: 'You'\n            },\n            uploadedOn: new Date(),\n            files: [],\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n    }\n}\n"},33972:f=>{f.exports='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [disabled]="true"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n'},10659:f=>{f.exports="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-disabled-example',\n    templateUrl: './platform-upload-collection-disabled-example.component.html'\n})\nexport class PlatformUploadCollectionDisabledExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n"},18035:f=>{f.exports='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n'},12359:f=>{f.exports="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\n\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-example',\n    templateUrl: './platform-upload-collection-example.component.html'\n})\nexport class PlatformUploadCollectionExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n"},90055:f=>{f.exports='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [readonly]="true"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n'},95303:f=>{f.exports="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-readonly-example',\n    templateUrl: './platform-upload-collection-readonly-example.component.html'\n})\nexport class PlatformUploadCollectionReadonlyExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n"},45653:f=>{f.exports='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [showSearch]="false"\n    [enablePagination]="false"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n'},5699:f=>{f.exports="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-turn-off-example',\n    templateUrl: './platform-upload-collection-turn-off-example.component.html'\n})\nexport class PlatformUploadCollectionTurnOffExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n"}}]);