{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@fundamental-ngx/core/lib/utils/abstract-fd-ngx-class.ts","ng://@fundamental-ngx/core/lib/button/button.directive.ts","ng://@fundamental-ngx/core/lib/button/button.module.ts","ng://@fundamental-ngx/core/lib/icon/icon.component.ts","ng://@fundamental-ngx/core/lib/icon/icon.module.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-title/action-bar-title.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-description/action-bar-description.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-header/action-bar-header.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-actions/action-bar-actions.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-back/action-bar-back.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar-mobile/action-bar-mobile.directive.ts","ng://@fundamental-ngx/core/lib/action-bar/action-bar.module.ts","ng://@fundamental-ngx/core/lib/alert/alert-utils/alert-animations.ts","ng://@fundamental-ngx/core/lib/alert/alert-utils/alert-ref.ts","ng://@fundamental-ngx/core/lib/alert/alert.component.ts","ng://@fundamental-ngx/core/lib/alert/alert-utils/alert-container.component.ts","ng://@fundamental-ngx/core/lib/alert/alert-utils/alert-config.ts","ng://@fundamental-ngx/core/lib/utils/dynamic-component/dynamic-component-injector.ts","ng://@fundamental-ngx/core/lib/utils/dynamic-component/dynamic-component.service.ts","ng://@fundamental-ngx/core/lib/alert/alert-service/alert.service.ts","ng://@fundamental-ngx/core/lib/alert/alert.module.ts","ng://@fundamental-ngx/core/lib/badge-label/badge.directive.ts","ng://@fundamental-ngx/core/lib/badge-label/label.directive.ts","ng://@fundamental-ngx/core/lib/badge-label/status-label.directive.ts","ng://@fundamental-ngx/core/lib/badge-label/badge-label.module.ts","ng://@fundamental-ngx/core/lib/breadcrumb/breadcrumb.directive.ts","ng://@fundamental-ngx/core/lib/breadcrumb/breadcrumb-item.directive.ts","ng://@fundamental-ngx/core/lib/breadcrumb/breadcrumb-link.directive.ts","ng://@fundamental-ngx/core/lib/breadcrumb/breadcrumb.module.ts","ng://@fundamental-ngx/core/lib/button-group/button-group.component.ts","ng://@fundamental-ngx/core/lib/button-group/button-grouped.directive.ts","ng://@fundamental-ngx/core/lib/button-group/button-group.module.ts","ng://@fundamental-ngx/core/lib/calendar/i18n/calendar-i18n-labels.ts","ng://@fundamental-ngx/core/lib/calendar/i18n/calendar-i18n.ts","ng://@fundamental-ngx/core/lib/calendar/calendar-header/calendar-header.component.ts","ng://@fundamental-ngx/core/lib/calendar/calendar.service.ts","ng://@fundamental-ngx/core/lib/calendar/models/fd-date.ts","ng://@fundamental-ngx/core/lib/calendar/calendar-views/calendar-day-view/calendar-day-view.component.ts","ng://@fundamental-ngx/core/lib/calendar/calendar-views/calendar-month-view/calendar-month-view.component.ts","ng://@fundamental-ngx/core/lib/calendar/calendar-views/calendar-year-view/calendar-year-view.component.ts","ng://@fundamental-ngx/core/lib/calendar/calendar.component.ts","ng://@fundamental-ngx/core/lib/calendar/calendar.module.ts","ng://@fundamental-ngx/core/lib/popover/popover-directive/popover-container.ts","ng://@fundamental-ngx/core/lib/popover/popover-directive/popover.directive.ts","ng://@fundamental-ngx/core/lib/popover/popover-dropdown/popover-dropdown.component.ts","ng://@fundamental-ngx/core/lib/popover/popover.component.ts","ng://@fundamental-ngx/core/lib/popover/popover-control/popover-control.component.ts","ng://@fundamental-ngx/core/lib/popover/popover-body/popover-body.component.ts","ng://@fundamental-ngx/core/lib/popover/popover.module.ts","ng://@fundamental-ngx/core/lib/menu/menu.component.ts","ng://@fundamental-ngx/core/lib/menu/menu-group.component.ts","ng://@fundamental-ngx/core/lib/menu/menu-title.directive.ts","ng://@fundamental-ngx/core/lib/menu/menu-list.directive.ts","ng://@fundamental-ngx/core/lib/menu/menu-item.directive.ts","ng://@fundamental-ngx/core/lib/menu/menu-addon.directive.ts","ng://@fundamental-ngx/core/lib/menu/menu-item-addon.directive.ts","ng://@fundamental-ngx/core/lib/menu/menu.module.ts","ng://@fundamental-ngx/core/lib/utils/pipes/displayFn.pipe.ts","ng://@fundamental-ngx/core/lib/utils/pipes/search-highlight.pipe.ts","ng://@fundamental-ngx/core/lib/utils/pipes/pipe.module.ts","ng://@fundamental-ngx/core/lib/menu/menu-keyboard.service.ts","ng://@fundamental-ngx/core/lib/combobox/combobox.component.ts","ng://@fundamental-ngx/core/lib/combobox/combobox.module.ts","ng://@fundamental-ngx/core/lib/date-picker/format/date-parser.ts","ng://@fundamental-ngx/core/lib/date-picker/date-picker.component.ts","ng://@fundamental-ngx/core/lib/date-picker/date-picker.module.ts","ng://@fundamental-ngx/core/lib/time/i18n/time-i18n-labels.ts","ng://@fundamental-ngx/core/lib/time/i18n/time-i18n.ts","ng://@fundamental-ngx/core/lib/time/time.component.ts","ng://@fundamental-ngx/core/lib/datetime-picker/models/fd-datetime.ts","ng://@fundamental-ngx/core/lib/datetime-picker/format/datetime-parser.ts","ng://@fundamental-ngx/core/lib/datetime-picker/datetime-picker.component.ts","ng://@fundamental-ngx/core/lib/utils/directives/only-digits.directive.ts","ng://@fundamental-ngx/core/lib/time/time.module.ts","ng://@fundamental-ngx/core/lib/datetime-picker/datetime-picker.module.ts","ng://@fundamental-ngx/core/lib/file-input/file-input.component.ts","ng://@fundamental-ngx/core/lib/file-input/directives/file-select.directive.ts","ng://@fundamental-ngx/core/lib/file-input/directives/file-dragndrop.directive.ts","ng://@fundamental-ngx/core/lib/file-input/file-input.module.ts","ng://@fundamental-ngx/core/lib/form/form-set/form-set.directive.ts","ng://@fundamental-ngx/core/lib/form/form-control/form-control.directive.ts","ng://@fundamental-ngx/core/lib/form/form-item/form-item.directive.ts","ng://@fundamental-ngx/core/lib/form/form-label/form-label.directive.ts","ng://@fundamental-ngx/core/lib/form/form-legend/form-legend.directive.ts","ng://@fundamental-ngx/core/lib/form/form-message/form-message.component.ts","ng://@fundamental-ngx/core/lib/form/form-group/form-group.component.ts","ng://@fundamental-ngx/core/lib/form/form.module.ts","ng://@fundamental-ngx/core/lib/identifier/identifier.directive.ts","ng://@fundamental-ngx/core/lib/identifier/identifier.module.ts","ng://@fundamental-ngx/core/lib/image/image.component.ts","ng://@fundamental-ngx/core/lib/image/image.module.ts","ng://@fundamental-ngx/core/lib/infinite-scroll/infinite-scroll.directive.ts","ng://@fundamental-ngx/core/lib/infinite-scroll/infinite-scroll.module.ts","ng://@fundamental-ngx/core/lib/inline-help/inline-help.component.ts","ng://@fundamental-ngx/core/lib/inline-help/inline-help.module.ts","ng://@fundamental-ngx/core/lib/input-group/input-group.component.ts","ng://@fundamental-ngx/core/lib/input-group/input-group-number.component.ts","ng://@fundamental-ngx/core/lib/input-group/input-group-search.component.ts","ng://@fundamental-ngx/core/lib/input-group/input-group.module.ts","ng://@fundamental-ngx/core/lib/list/list.directive.ts","ng://@fundamental-ngx/core/lib/list/list-item.directive.ts","ng://@fundamental-ngx/core/lib/list/list-checkbox.component.ts","ng://@fundamental-ngx/core/lib/list/list-action.directive.ts","ng://@fundamental-ngx/core/lib/list/list.module.ts","ng://@fundamental-ngx/core/lib/loading-spinner/loading-spinner.component.ts","ng://@fundamental-ngx/core/lib/loading-spinner/loading-spinner.module.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-animations.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-ref.ts","ng://@fundamental-ngx/core/lib/modal/modal.component.ts","ng://@fundamental-ngx/core/lib/modal/modal-header/modal-header.component.ts","ng://@fundamental-ngx/core/lib/modal/modal-body/modal-body.component.ts","ng://@fundamental-ngx/core/lib/modal/modal-footer/modal-footer.component.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-backdrop.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-container.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-config.ts","ng://@fundamental-ngx/core/lib/modal/modal-service/modal.service.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-directives.ts","ng://@fundamental-ngx/core/lib/modal/modal.module.ts","ng://@fundamental-ngx/core/lib/multi-input/multi-input.component.ts","ng://@fundamental-ngx/core/lib/token/token.component.ts","ng://@fundamental-ngx/core/lib/token/token.module.ts","ng://@fundamental-ngx/core/lib/multi-input/multi-input.module.ts","ng://@fundamental-ngx/core/lib/pagination/pagination.service.ts","ng://@fundamental-ngx/core/lib/pagination/pagination.component.ts","ng://@fundamental-ngx/core/lib/pagination/pagination.module.ts","ng://@fundamental-ngx/core/lib/panel/panel.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-header/panel-header.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-head/panel-head.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-title/panel-title.directive.ts","ng://@fundamental-ngx/core/lib/panel/panel-description/panel-description.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-actions/panel-actions.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-filters/panel-filters.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-body/panel-body.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-footer/panel-footer.component.ts","ng://@fundamental-ngx/core/lib/panel/panel-grid/panel-grid.component.ts","ng://@fundamental-ngx/core/lib/panel/panel.module.ts","ng://@fundamental-ngx/core/lib/scroll-spy/scroll-spy.directive.ts","ng://@fundamental-ngx/core/lib/scroll-spy/scroll-spy.module.ts","ng://@fundamental-ngx/core/lib/search-input/search-input.component.ts","ng://@fundamental-ngx/core/lib/search-input/search-input.module.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar.component.ts","ng://@fundamental-ngx/core/lib/shellbar/product-menu/product-menu.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar-subtitle/shellbar-subtitle.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar-action/shellbar-action.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar-actions/shellbar-actions.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar-logo/shellbar-logo.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar-title/shellbar-title.component.ts","ng://@fundamental-ngx/core/lib/shellbar/shellbar.module.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation.component.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-group/side-navigation-group.component.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-title/side-navigation-title.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-list/side-navigation-list.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-link/side-navigation-link.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-sublist/side-navigation-sublist.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-item/side-navigation-item.component.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-subitem/side-navigation-subitem.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation-sublink/side-navigation-sublink.directive.ts","ng://@fundamental-ngx/core/lib/side-navigation/side-navigation.module.ts","ng://@fundamental-ngx/core/lib/select/option/option.component.ts","ng://@fundamental-ngx/core/lib/select/select.component.ts","ng://@fundamental-ngx/core/lib/select/select.module.ts","ng://@fundamental-ngx/core/lib/split-button/split-button-utils/split-button.directives.ts","ng://@fundamental-ngx/core/lib/split-button/split-button.component.ts","ng://@fundamental-ngx/core/lib/split-button/split-button.module.ts","ng://@fundamental-ngx/core/lib/table/table.directive.ts","ng://@fundamental-ngx/core/lib/table/column-sortable.directive.ts","ng://@fundamental-ngx/core/lib/table/table-responsive-wrapper.directive.ts","ng://@fundamental-ngx/core/lib/table/table.module.ts","ng://@fundamental-ngx/core/lib/tabs/tab-utils/tab-directives.ts","ng://@fundamental-ngx/core/lib/tabs/tab/tab-panel.component.ts","ng://@fundamental-ngx/core/lib/tabs/tabs.service.ts","ng://@fundamental-ngx/core/lib/tabs/tab-list.component.ts","ng://@fundamental-ngx/core/lib/tabs/tab-link/tab-link.directive.ts","ng://@fundamental-ngx/core/lib/tabs/tab-item/tab-item.directive.ts","ng://@fundamental-ngx/core/lib/tabs/tab-nav/tab-nav.directive.ts","ng://@fundamental-ngx/core/lib/tabs/tabs.module.ts","ng://@fundamental-ngx/core/lib/tile/tile.component.ts","ng://@fundamental-ngx/core/lib/tile/tile-content/tile-content.directive.ts","ng://@fundamental-ngx/core/lib/tile/tile-title/tile-title.directive.ts","ng://@fundamental-ngx/core/lib/tile/tile-media/tile-media.directive.ts","ng://@fundamental-ngx/core/lib/tile/tile-actions/tile-actions.directive.ts","ng://@fundamental-ngx/core/lib/tile/product-tile.component.ts","ng://@fundamental-ngx/core/lib/tile/product-tile-media/product-tile-media.directive.ts","ng://@fundamental-ngx/core/lib/tile/product-tile-content/product-tile-content.directive.ts","ng://@fundamental-ngx/core/lib/tile/product-tile-title/product-tile-title.directive.ts","ng://@fundamental-ngx/core/lib/tile/tile-grid/tile-grid.directive.ts","ng://@fundamental-ngx/core/lib/tile/tile.module.ts","ng://@fundamental-ngx/core/lib/tree/tree-child.component.ts","ng://@fundamental-ngx/core/lib/tree/tree.component.ts","ng://@fundamental-ngx/core/lib/tree/tree.module.ts","ng://@fundamental-ngx/core/lib/time/time-object.ts","ng://@fundamental-ngx/core/lib/time-picker/format/time-parser.ts","ng://@fundamental-ngx/core/lib/time-picker/time-picker.component.ts","ng://@fundamental-ngx/core/lib/time-picker/time-picker.module.ts","ng://@fundamental-ngx/core/lib/toggle/toggle.component.ts","ng://@fundamental-ngx/core/lib/toggle/toggle.module.ts","ng://@fundamental-ngx/core/lib/localizator-editor/localization-editor.directives.ts","ng://@fundamental-ngx/core/lib/localizator-editor/localization-editor-item/localization-editor-item.component.ts","ng://@fundamental-ngx/core/lib/localizator-editor/localization-editor-main/localization-editor-main.component.ts","ng://@fundamental-ngx/core/lib/localizator-editor/localization-editor.component.ts","ng://@fundamental-ngx/core/lib/localizator-editor/localization-editor.module.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu.component.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-sublink.directive.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-subitem.directive.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-link/mega-menu-link.directive.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-item/mega-menu-item.component.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-list/mega-menu-list.directive.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-group/mega-menu-group.component.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu-title/mega-menu-title.directive.ts","ng://@fundamental-ngx/core/lib/mega-menu/mega-menu.module.ts","ng://@fundamental-ngx/core/lib/fundamental-ngx-core.module.ts","ng://@fundamental-ngx/core/lib/menu/default-menu-item.ts","ng://@fundamental-ngx/core/lib/modal/modal-utils/modal-position.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","AbstractFdNgxClass","_addClassToElement","className","_a","_elementRef","classList","add","split","_addStyleToElement","attribute","style","ngOnChanges","remove","item","class","_setProperties","ngOnInit","Input","elementRef","_super","ButtonDirective","tslib_1.__extends","_this","compact","glyph","fdType","options","isArray","forEach","option","Directive","args","selector","ElementRef","ButtonModule","NgModule","imports","CommonModule","exports","declarations","PREFIX_ICON_CLASS","BASE_ICON_CLASS","IconComponent","size","Component","template","host","role","encapsulation","ViewEncapsulation","None","IconModule","ActionBarDirective","ActionBarTitleDirective","ActionBarDescriptionDirective","ActionBarHeaderDirective","ActionBarActionsDirective","ActionBarBackDirective","ActionBarMobileDirective","ActionBarModule","alertFadeNgIf","trigger","transition","opacity","animate","marginTop","paddingTop","paddingBottom","height","overflow","alertContainerNgIf","AlertRef","dismiss","reason","_afterDismissed","Subject","afterDismissed","asObservable","alertUniqueId","AlertComponent","alertRef","open","ngAfterViewInit","childComponentType","Type","loadFromComponent","TemplateRef","loadFromTemplate","loadFromString","cdRef","detectChanges","manualDismiss","elRef","nativeElement","onDismiss","emit","display","duration","ngZone","runOutsideAngular","setTimeout","mousePersist","wait_1","mouseInAlert","run","handleAlertMouseEvent","event","type","dismissible","context","$implicit","componentRef","containerRef","createEmbeddedView","componentType","componentFactory","componentFactoryResolver","resolveComponentFactory","clear","createComponent","contentString","message","[attr.aria-labelledby]","[attr.aria-label]","[style.width]","[style.min-width]","[attr.id]","[@fadeAlertNgIf]","animations","ChangeDetectorRef","ComponentFactoryResolver","NgZone","decorators","Optional","ViewChild","read","ViewContainerRef","Output","HostListener","id","ariaLabelledBy","ariaLabel","dismissLabel","EventEmitter","AlertContainerComponent","[@alertContainerNgIf]","HostBinding","fdAlertContainerClass","AlertConfig","width","minWidth","container","DynamicComponentInjector","get","token","notFoundValue","flags","_additionalTokens","_parentInjector","DynamicComponentService","createDynamicComponent","contentType","config","services","configMap","WeakMap","service","set","injector","appRef","attachView","hostView","configObj","keys","key","instance","componentEl","rootNodes","appendChild","document","body","destroyComponent","detachView","destroy","Injectable","ApplicationRef","Injector","AlertService","hasOpenAlerts","alerts","content","alertConfig","data","alertContainerRef","dynamicComponentService","location","component","refSub","subscribe","destroyAlertComponent","unsubscribe","dismissAll","ref","alert","indexOf","filter","undefined","destroyAlertContainer","AlertModule","entryComponents","providers","BadgeDirective","status","modifier","fdBadgeClass","LabelDirective","StatusLabelDirective","statusIcon","icon","BadgeLabelModule","BreadcrumbDirective","BreadcrumbItemDirective","BreadcrumbLinkDirective","BreadcrumbModule","ButtonGroupComponent","fdButtonGroupClass","ButtonGroupedDirective","state","fdButtonGroupedClass","ButtonGroupModule","CalendarI18nLabels","providedIn","yearSelectionLabel","previousYearLabel","nextYearLabel","monthSelectionLabel","previousMonthLabel","nextMonthLabel","CALENDAR_I18N_FACTORY","locale","CalendarI18nDefault","CalendarI18n","useFactory","deps","LOCALE_ID","getDayAriaLabel","date","getDate","monthsFull","getMonth","getFullYear","getAllFullMonthNames","getAllShortMonthNames","monthsShort","getAllShortWeekdays","weekdaysShort","checkForFallback","weekdaysFallback","monthsShortFallback","monthsFullFallback","Inject","sundayStartWeekdays_1","getLocaleDayNames","FormStyle","Standalone","TranslationWidth","Short","map","day","index","getLocaleMonthNames","Abbreviated","Wide","CalendarHeaderComponent","defineProperty","activeView","calendarI18nLabels","calendarI18n","currentlyDisplayed","month","isOnMonthView","isOnYearView","processViewChange","activeViewChange","previousClicked","nextClicked","CalendarService","getDaysInMonth","year","_year","datesEqual","date1","date2","toDateString","onKeydownHandler","code","preventDefault","onKeySelect","onListStartApproach","onFocusIdChange","onListEndApproach","focusEscapeFunction","shiftKey","FdDate","getToday","tempDate","Date","getModelFromDate","isDateValid","toDate","getTimeStamp","getTime","getDay","nextDay","maxDays","previousDay","CalendarDayViewComponent","selectDate","stopPropagation","newFocusedDayId","focusElement","blocked","disabled","calType","selectedDate","selectedDateChange","buildDayViewGrid","selectCounter","selectedRangeDate","start","end","selectedRangeDateChange","onKeydownDayHandler","cell","grid","y","dayViewGrid","x","selectPreviousMonth","selectNextMonth","ngAfterViewChecked","elementSelector","elementToFocus","eRef","querySelector","focus","focusActiveDay","getActiveCell","calendarDayList","monthStatus","reduce","totalCalendarRows","calendarRow","previousMonthSelect","nextMonthSelect","populateCalendar","calendar","getPreviousMonthDays","getCurrentMonthDays","getNextMonthDays","Math","floor","calendarDays","splice","amountOfDaysInCurrentMonth","dayNumber","fdDate","today","isTabIndexed","find","selected","prevMonthLastDay","prevMonthLastWeekDay","startingDayOfWeek","nextMonthDisplayedDays","nextD","weekDay","disableFunction","blockFunction","selectedFirst","selectedLast","selectedRange","disableRangeEndFunction","blockRangeEndFunction","disableRangeStartFunction","blockRangeStartFunction","slice","weekday","toLocaleUpperCase","fdCalendarDateViewClass","CalendarMonthViewComponent","calendarService","pipe","takeUntil","onDestroy$","selectMonth","ngOnDestroy","complete","_monthOffset","selectedMonth","monthSelected","monthOffset","monthClicked","onKeydownMonthHandler","CalendarYearViewComponent","newFocusedYearId","firstYearInList","yearSelected","constructYearList","selectYear","calendarYearList","loadPreviousYearList","loadNextYearList","getActiveYear","selectedYear","currentYear","onKeydownYearHandler","yearClicked","activeYear","calendarUniqueId","CalendarComponent","prepareDisplayedView","writeValue","valid","isValidDateChange","validate","control","isModelValid","dateValidation","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","handleActiveViewChange","selectedDateChanged","closeCalendar","selectedRangeDateChanged","dates","handleNextArrowClick","displayNextMonth","displayNextYear","displayNextYearList","handlePreviousArrowClick","displayPreviousMonth","displayPreviousYear","displayPreviousYearList","yearViewComponent","setCurrentlyDisplayed","handleMonthViewChange","changeDetectorRef","dayViewComponent","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","(blur)","fdCalendarClass","fdHasDisplayBlockClass","escapeFocusFunction","getElementById","CalendarModule","PopoverContainer","setupFocusTrap","isSetup","focusTrap","deactivate","focusTrapped","clickOutsideDeactivates","escapeDeactivates","initialFocus","activate","console","warn","escapeHandler","isOpen","closeOnEscapeKey","close","tabindex","noArrow","PopoverDirective","setupFillBehaviour","initPlacement","addTriggerListeners","popper","destroyContainer","destroyTriggerListeners","changes","triggers","currentValue","placement","fillControl","toggle","fireEvent","createContainer","isOpenChange","updatePopper","scheduleUpdate","factory","resolver","setupRef","createPopper","containerEl","appendTo","eventRef","renderer","listen","Popper","fillReference","offsets","left","reference","right","styles","atLeastReference","fillControlMode","modifiers","enabled","order","clickHandler","closeOnOutsideClick","target","contains","Renderer2","preventOverflow","escapeWithReference","boundariesElement","PopoverDropdownComponent","btnType","toolbar","popoverUniqueId","PopoverComponent","updatePopover","directiveRef","openChanged","updateDropdownIsOpen","dropdownComponent","[class.fd-popover-custom]","ContentChild","isDropdown","PopoverControlComponent","PopoverBodyComponent","PopoverModule","MenuComponent","fdMenuClass","separator","MenuGroupComponent","fdMenuGroupClass","MenuTitleDirective","elementClass","MenuListDirective","fdMenuListClass","MenuItemDirective","itemEl","click","fdMenuItemClass","MenuAddonDirective","fdMenuAddonClass","MenuItemAddonDirective","fdMenuItemAddonClass","MenuModule","DisplayFnPipe","transform","displayFn","Pipe","name","SearchHighlightPipe","active","startIndex","toLowerCase","matchingString","substr","replace","PipeModule","MenuKeyboardService","keyDownHandler","menuItems","disableKeydownHandling","focusEscapeAfterList","focusEscapeBeforeList","itemClicked","ComboboxComponent","dropdownValues","displayedValues","searchTerm","inputText","filterFn","menuKeyboardService","onMenuClickHandler","searchInputElement","onInputKeydownHandler","searchFunction","first","onInputKeyupHandler","isOpenChangeHandle","onMenuKeydownHandler","toArray","selectedItem","handleClickActions","inputTextValue","communicateByObject","getOptionObjectByDisplayedValue","handleSearchTermChange","onPrimaryButtonClick","defaultDisplay","str","defaultFilter","contentArray","searchLower","toLocaleLowerCase","includes","term","closeOnSelect","fillOnSelect","displayValue","returnFocusOnDeactivate","[class.fd-combobox-custom-class]","[class.fd-combobox-input]","ViewChildren","maxHeight","highlighting","ComboboxModule","FormsModule","DATE_FORMAT_FACTORY","DateFormatParserDefault","DateFormatParser","rangeDelimiter","parse","toString","Number","format","DatePickerComponent","handleCalendarActiveViewChange","closeFromCalendar","openCalendar","toggleCalendar","handleSingleDateChange","inputFieldDate","dateAdapter","handleRangeDateChange","handleInputChange","strDate","dateStringUpdate","calendarComponent","isInvalidDateInput","currentDates","firstDate","secondDate","allowNull","[class.fd-date-picker]","[class.fd-date-picker-custom]","placeholder","useValidation","dateInputLabel","displayCalendarToggleLabel","DatePickerModule","TimeI18nLabels","increaseHoursLabel","hoursLabel","decreaseHoursLabel","increaseMinutesLabel","minutesLabel","decreaseMinutesLabel","increaseSecondsLabel","secondsLabel","decreaseSecondsLabel","increasePeriodLabel","periodLabel","decreasePeriodLabel","TimeI18n","meridianAm","meridianPm","meridianPlaceholder","hoursPlaceholder","minutesPlaceholder","secondsPlaceholder","meridianCaseSensitive","TimeComponent","time","setDisplayedHour","meridian","hour","displayedHour","period","timeI18n","displayedHourChanged","inputBlur","inputType","round","abs","isAm","minute","second","isPm","increaseHour","decreaseHour","increaseMinute","decreaseMinute","increaseSecond","displaySeconds","decreaseSecond","togglePeriod","periodModelChange","minuteModelChange","secondModelChange","lastButtonKeydown","focusArrowLeft","pmMeridian","amMeridian","timeI18nLabels","spinners","displayMinutes","displayHours","FdDatetime","getHours","getMinutes","getSeconds","toLocaleDateString","isTimeValid","toLocaleString","DATE_TIME_FORMAT_FACTORY","DateTimeFormatParserDefault","DateTimeFormatParser","dateStr","dateSplitStr","timeStr","timeSplitStr","DatetimePickerComponent","togglePopover","closePopover","openPopover","onClose","isInvalidDateInputHandler","onEscapeKeydownHandler","onGlobalClick","dateFromInputSubscription","setInput","handleDateChange","timeComponent","handleTimeChange","fdTimeDate","dateTimeAdapter","fdDateTime","changeDetRef","[class.fd-datetime-host]","datetimeInputLabel","displayDatetimeToggleLabel","dateChange","calendarChange","timeChange","OnlyDigitsDirective","onKeyDown","keyCode","ctrlKey","metaKey","TimeModule","DatetimePickerModule","FileInputComponent","files","selectHandler","maxFileSize","valid_files_1","invalid_files_1","file","onSelect","onInvalidFiles","inputRef","fdFileInputClass","multiple","dragndrop","onDragEnter","onDragLeave","FileSelectDirective","HTMLInputElement","fileArray","from","onFileSelect","FileDragndropDirective","onDragover","onDragenter","elementStateCounter","onDragleave","onDrop","rawFiles","dataTransfer","valid_files","invalid_files","accept","allowed_extensions_1","ext","lastIndexOf","onFileChange","FileInputModule","FormSetDirective","FormControlDirective","FormItemDirective","isCheck","isInline","fdFormItemClass","FormLabelDirective","fdFormLabelClass","FormLegendDirective","fdFormLegendClass","FormMessageComponent","FormGroupComponent","fdFormGroupClass","FormModule","IdentifierDirective","circle","transparent","colorAccent","IdentifierModule","ImageComponent","label","ImageModule","InfiniteScrollDirective","scrollEvent","fromEvent","element","subscription","scrollTop","offsetHeight","scrollHeight","scrollPercent","onScrollAction","InfiniteScrollModule","InlineHelpComponent","InlineHelpModule","InputGroupComponent","buttonClicked","$event","addOnButtonClicked","InputGroupNumberComponent","stepUpClicked","stepDownClicked","stepUpLabel","stepDownLabel","InputGroupSearchComponent","clearLabel","InputGroupModule","ListDirective","ListItemDirective","listCheckboxUniqueId","ListCheckboxComponent","checked","onToggle","onActivated","ListActionDirective","ListModule","LoadingSpinnerComponent","loading","loadingLabel","LoadingSpinnerModule","modalFadeNgIf","ModalRef","result","_afterClosed","afterClosed","ModalComponent","backdropClickCloseable","hasBackdrop","closeModalEsc","escKeyCloseable","modalRef","modalPanelClass","[class.fd-modal]","[class.fd-modal-custom]","[attr.aria-describedby]","[attr.aria-modal]","[@modal-fade]","ariaDescribedBy","ModalHeaderComponent","modalHeader","ModalBodyComponent","modalBody","ModalFooterComponent","modalFooter","ModalBackdrop","backdropClass","closeModal","overlayMain","overlayModal","ModalContainer","[class.fd-modal-container]","ModalConfig","ModalService","hasOpenModals","modals","destroyModalComponent","modalConfig","backdrop","defaultBehaviourOnClose","setModalSize","setModalPosition","position","backdropRef","modal","arrayRef","minHeight","maxWidth","top","bottom","ModalTitleDirective","modalTitle","ModalCloseButtonDirective","lightButton","modalClose","ModalModule","MultiInputComponent","handleSelect","previousLength","popoverRef","selectedChange","searchTermChange","[class.fd-multi-input-custom]","multiInputClass","highlight","multiInputBodyLabel","TokenComponent","contentContainer","onCloseClick","[class.fd-token__disabled]","TokenModule","MultiInputModule","PaginationService","getPages","pagination","pages","totalPages","getTotalPages","currentPage","DISPLAY_NUM_PAGES","MORE","buffer","itemsPerPage","DEFAULT_ITEMS_PER_PAGE","ceil","totalItems","isDevMode","PaginationComponent","paginationService","getPaginationObject","isLastPage","onKeypressHandler","page","goToPage","pageChangeStart","displayTotalItems","displayText","previousLabel","nextLabel","PaginationModule","PanelComponent","columnSpan","backgroundImage","[class.fd-has-display-block]","fdPanelClass","PanelHeaderComponent","fdPanelHeaderClass","PanelHeadComponent","fdPanelHeadClass","PanelTitleDirective","fdPanelTitleClass","PanelDescriptionComponent","PanelActionsComponent","fdPanelActionsClass","PanelFiltersComponent","fdPanelFiltersClass","PanelBodyComponent","fdPanelBodyClass","bleed","PanelFooterComponent","fdPanelFooterClass","PanelGridComponent","nogap","col","PanelModule","ScrollSpyDirective","onScroll","spiedTag","children","targetScrollTop","targetOffsetTop","offsetTop","this_1","trackedTags","some","tag","tagName","targetPercent","fireEmpty","currentActive","spyChange","ScrollSpyModule","SearchInputComponent","foundItem_1","menuItemsArray_1","activeElement","foundItem_2","menuItemsArray_2","shellbarSearchInputClicked","inShellbar","searchInputClass","shellBarClass","SearchInputModule","ShellbarComponent","ProductMenuComponent","onResize","window","matchMedia","matches","productMenuCollapsed","closePopoverOnSelect","popoverComponent","callback","ShellbarSubtitleComponent","ShellbarActionComponent","ShellbarActionsComponent","actionsCollapsed","innerWidth","popoverComponents","popover","ngAfterContentChecked","totalNotifications","shellbarActions","action","notificationCount","toggleCollapsedProducts","showCollapsedProducts","ContentChildren","collapsedItemMenuLabel","ShellbarLogoComponent","ShellbarTitleComponent","ShellbarModule","SideNavigationComponent","collapsed","SideNavigationGroupComponent","SideNavigationTitleDirective","fdSideNavTitleClass","SideNavigationListDirective","SideNavigationLinkDirective","hasSublist","setAttribute","sublistIsOpen","changeSubListIsOpen","onSubListOpenChange","hasPopup","SideNavigationSublistDirective","subListIsOpenChange","SideNavigationItemComponent","ngAfterContentInit","linkElement","subListElement","subListOpenChanged$","SideNavigationSubitemDirective","SideNavigationSublinkDirective","SideNavigationModule","OptionComponent","viewValue","textContent","trim","setSelected","getHtmlElement","selectionHandler","[class.fd-option-default-custom]","[attr.aria-disabled]","[tabindex]","SelectComponent","resizeScrollHandler","selectValue","startWith","destroy$","resetOptions","initSelection","Promise","resolve","then","viewValueText","keydownHandler","decrementFocused","incrementFocused","calculatedMaxHeight","innerHeight","selectOption","fireEvents","isOptionActive","updateValue","matchOption","unselectOptions","valueChange","destroyCurrentObs","merge","optionsStatusChanges","correspondingOption","arrayOptions","[class.fd-select-custom]","descendants","fdDropdownClass","popperOptions","defer","switchMap","SelectModule","SplitButtonActionTitle","SplitButtonMenuDirective","SplitButtonLoadActionTitle","viewRef","contentRef","SplitButtonComponent","buttonClick","primaryButtonClicked","SplitButtonModule","TableDirective","fdTableClass","ColumnSortableDirective","[class.fd-table__sort-column--dsc]","[class.fd-table__sort-column--asc]","TableResponsiveWrapperDirective","TableModule","TabTitleDirective","TabLoadTitleDirective","tabPanelUniqueId","TabPanelComponent","[attr.aria-expanded]","[class.is-expanded]","expanded","TabsService","tabHeaderKeyHandler","elements","getTabLinkFromIndex","tabSelected","TabListComponent","selectTab","selectedIndex","_tabSelectSubscription","tabsService","_tabsSubscription","panelTabs","isIndexInRange","isTabContentEmpty","resetTabHook","tabIndex","isTargetTabEnabled","tab","selectedIndexChange","tabHeaderClickHandler","tabLinks","TabLinkDirective","TabItemDirective","TabNavDirective","links","link","items","linkItem","TabsModule","TileComponent","rowSpan","[attr.role]","isButton","TileContentDirective","TileTitleDirective","fdTileTitleClass","TileMediaDirective","TileActionsDirective","ProductTileComponent","[class.fd-product-tile-custom]","ProductTileMediaDirective","photo","ProductTileContentDirective","ProductTileTitleDirective","fdProductTileTitleClass","TileGridDirective","TileModule","TreeChildComponent","hideChildren","toggleDisplayChildren","hideAll","typeOf","variable","retVal","editTreeItem","row","editClicked","deleteTreeItem","deleteClicked","TreeComponent","treeData","getChildDepth","handleEmptyTrailingCells","toggleDisplayAll","treeChildren","child","depth","sublevelClass","rowData","headers","editRowClicked","deleteRowClicked","TreeModule","TimeObject","TIME_FORMAT_FACTORY","TimeFormatParserDefault","TimeFormatParser","test","splitString","parseInt","formattedHour","formattedMinute","formattedSecond","formattedTime","formattedMeridian","TimePickerComponent","getPlaceholder","getFormattedTime","timeAdapter","timeInputChanged","timeFromInput","isInvalidTimeInput","minutes","seconds","inputGroupClicked","onFocusHandler","popoverClosed","timeFromTimeComponentChanged","cd","timepickerclass","timePickerInputLabel","TimePickerModule","toggleUniqueId","ToggleComponent","inputElement","checkedChange","ariaLabelledby","ToggleModule","LocalizationEditorInputDirective","LocalizationEditorTextareaDirective","fdLocalizationEditorTextareaClass","LocalizationEditorLabel","LocalizationEditorElement","LocalizationEditorLoadLabel","LocalizationEditorItemComponent","refreshChildInput","textarea","input","LocalizationEditorMainComponent","LocalizationEditorComponent","handleOpenChange","opened","mainElement","fdLocalizationEditorClass","LocalizationEditorModule","MegaMenuComponent","MegaMenuSublinkDirective","fdMegaMenuClass","MegaMenuSubitemDirective","handleKeyboardEvent","keyDown","MegaMenuLinkDirective","hasChild","isExpanded","MegaMenuItemComponent","closeSubList","openSubList","changeDetectionRef","subItems","isSubListPositionRight","distanceFromCorner","subList","getBoundingClientRect","getLeftPropertyFromSubList","keyboardEvent","handleSubListKeyDown","subListPosition","toggleOpen","isShow","openChange","getComputedStyle","parentElement","offsetWidth","MegaMenuListDirective","handleListKeyDown","MegaMenuGroupComponent","MegaMenuTitleDirective","fdMegaMenuTitleClass","MegaMenuModule","FundamentalNgxCoreModule"],"mappings":"4xBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAGhC,SA+EgBI,EAAOC,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BZ,EAAIQ,EAAEJ,KAAKG,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANZ,GAAsB,EAANA,QAAcU,EAAIX,EAAEc,QAAQC,MAAMF,EAAGG,KAAKL,EAAEM,OAExE,MAAOC,GAASN,EAAI,CAAEM,MAAOA,WAEzB,IACQP,IAAMA,EAAEI,OAASP,EAAIR,EAAU,YAAIQ,EAAEJ,KAAKJ,WAExC,GAAIY,EAAG,MAAMA,EAAEM,OAE7B,OAAOL,EAGX,SAAgBM,IACZ,IAAK,IAAIN,EAAK,GAAIb,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3Ca,EAAKA,EAAGO,OAAOd,EAAOJ,UAAUF,KACpC,OAAOa,ECjIX,IAAAQ,GAcIA,EAAA3B,UAAA4B,mBAAA,SAAmBC,UACfC,EAAChC,KAAKiC,YAAyB,cAAiBC,WAAUC,IAAGtB,MAAAmB,EAAAL,EAAII,EAAUK,MAAM,QAIrFP,EAAA3B,UAAAmC,mBAAA,SAAmBC,EAAWb,GACzBzB,KAAKiC,YAAyB,cAAiBM,MAAMD,GAAab,GAUvEI,EAAA3B,UAAAsC,YAAA,WAEI,QADMN,EAAalC,KAAKiC,YAAyB,cAAiBC,UACxC,EAAnBA,EAAUvB,QACbuB,EAAUO,OAAOP,EAAUQ,KAAK,IAEhC1C,KAAK2C,UACL3C,KAAK8B,mBAAmB9B,KAAK2C,UAEjC3C,KAAK4C,kBAITf,EAAA3B,UAAA2C,SAAA,WACI7C,KAAK4C,mDAvCRE,EAAAA,SAyCLjB,GArBI,SAAAA,EAAsBkB,GAClB/C,KAAKiC,YAAcc,EACnB/C,KAAK4C,iBC1Bb,IAAAI,EAAAC,GAKqCC,EAAAA,EALrCF,EAKqCnB,GAsBjCoB,EAAA/C,UAAA0C,eAAA,WAAA,IAAAO,EAAAnD,KACIA,KAAK8B,mBAAmB,aACpB9B,KAAKoD,SACLpD,KAAK8B,mBAAmB,sBAExB9B,KAAKqD,OACLrD,KAAK8B,mBAAmB,aAAe9B,KAAKqD,OAE5CrD,KAAKsD,QACLtD,KAAK8B,mBAAmB,cAAgB9B,KAAKsD,QAE7CtD,KAAKuD,UACuB,iBAAjBvD,KAAKuD,QACZvD,KAAK8B,mBAAmB,cAAgB9B,KAAKuD,SACtC5D,MAAM6D,QAAQxD,KAAKuD,UAC1BvD,KAAKuD,QAAQE,QAAO,SAACC,GACK,iBAAXA,GACPP,EAAKrB,mBAAmB,cAAgB4B,2BA5C/DC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,2DAbMC,EAAAA,+CAkBfhB,EAAAA,qBAGAA,EAAAA,sBAIAA,EAAAA,wBAGAA,EAAAA,uBAGAA,EAAAA,oBAGAA,EAAAA,SA+BLG,GAHI,SAAAA,EAAoBF,GAApB,IAAAI,EACIH,EAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,IC9DxB,IAAAgB,uBAKCC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAClB,GACVmB,aAAc,CAACnB,OAEQc,GAL3B,SAAAA,SCiBAf,EATMqB,EAAoBC,aAS1BC,GAQmCrB,EAAAA,EARnCF,EAQmCnB,GAe/B0C,EAAArE,UAAA0C,eAAA,WACQ5C,KAAKqD,OACLrD,KAAK8B,mBAAmBuC,EAAoBrE,KAAKqD,OAGjDrD,KAAKwE,MACLxE,KAAK8B,mBAAmBuC,EAAoBrE,KAAKwE,2BA7B5DC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,UACVa,SAAU,GACVC,KAAM,CACFC,KAAM,gBAEVC,cAAeC,EAAAA,kBAAkBC,kDA5BjBjB,EAAAA,6CAmCfhB,EAAAA,oBAOAA,EAAAA,SAiBLyB,GAHI,SAAAA,EAAoBxB,GAApB,IAAAI,EACIH,EAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAdXI,EAAAqB,KAAe,KC1C5B,IAAAQ,uBAKChB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACI,GACVH,aAAc,CAACG,OAEMS,GALzB,SAAAA,KCUA,IAAAC,uBAACtB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,kBACVc,KAAM,CACFhC,QAAO,qBAGkBsC,GAPjC,SAAAA,KCFA,IAAAC,uBAACvB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,wBACVc,KAAM,CACFhC,QAAO,4BAGuBuC,GAPtC,SAAAA,KCAA,IAAAC,uBAACxB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,8BACVc,KAAM,CACFhC,QAAO,kCAG8BwC,GAP7C,SAAAA,KCDA,IAAAC,uBAACzB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,yBACVc,KAAM,CACFhC,QAAO,6BAGwByC,GAPvC,SAAAA,KCGA,IAAAC,uBAAC1B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,0BACVc,KAAM,CACFhC,QAAO,8BAGyB0C,GAPxC,SAAAA,KCFA,IAAAC,uBAAC3B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,uBACVc,KAAM,CACFhC,QAAO,2BAGsB2C,GAPrC,SAAAA,KCDA,IAAAC,uBAAC5B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,6BAE0B0B,GAJxC,SAAAA,KCZA,IAAAC,uBAaCxB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVa,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEJtB,QAAS,CAACC,EAAAA,aAAcH,EAAciB,GACtCb,QAAS,CACLc,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,OAGsBC,GArB9B,SAAAA,KCXA,IAAaC,EAA0CC,EAAAA,QACnD,gBACA,CACIC,EAAAA,WACI,SAAU,CACNpD,EAAAA,MAAM,CACFqD,QAAS,IAEbC,EAAAA,QAAQ,oBAAqBtD,EAAAA,MAAM,CAC/BqD,QAAS,OAIrBD,EAAAA,WACI,SAAU,CACNpD,EAAAA,MAAM,CACFqD,QAAS,EACTE,UAAW,IACXC,WAAY,IACZC,cAAe,IACfC,OAAQ,IACRC,SAAU,WAEdL,EAAAA,QAAQ,oBAAqBtD,EAAAA,MAAM,CAC/BqD,QAAS,EACTE,UAAW,EACXC,WAAY,EACZC,cAAe,EACfC,OAAQ,EACRC,SAAU,gBAOjBC,EAA+CT,EAAAA,QACxD,qBACA,CACIC,EAAAA,WACI,SAAU,CACNpD,EAAAA,MAAM,CAACqD,QAAS,IAChBC,EAAAA,QAAQ,oBAAqBtD,EAAAA,MAAM,CAACqD,QAAS,YCtBzDQ,EAAAlG,UAAAmG,QAAA,SAAQC,GACJtG,KAAKuG,gBAAgBjF,KAAKgF,IAElCF,GAlBA,SAAAA,IAEqBpG,KAAAuG,gBAAgC,IAAIC,EAAAA,QAG9CxG,KAAAyG,eAAkCzG,KAAKuG,gBAAgBG,mBCgBlE1D,EANI2D,EAAwB,EAM5BC,GAkBoC1D,EAAAA,EAlBpCF,EAkBoCnB,GAyEhC+E,EAAA1G,UAAA2C,SAAA,WACQ7C,KAAK6G,UACL7G,KAAK8G,OAET9G,KAAK4C,kBAITgE,EAAA1G,UAAA6G,gBAAA,WACQ/G,KAAKgH,qBACDhH,KAAKgH,8BAA8BC,EAAAA,KACnCjH,KAAKkH,kBAAkBlH,KAAKgH,oBACrBhH,KAAKgH,8BAA8BG,EAAAA,YAC1CnH,KAAKoH,iBAAiBpH,KAAKgH,oBAE3BhH,KAAKqH,eAAerH,KAAKgH,oBAE7BhH,KAAKsH,MAAMC,kBAYnBX,EAAA1G,UAAAmG,QAAA,SAAQC,EAAckB,QAAA,IAAAA,IAAAA,GAAA,GACdA,IACAxH,KAAKyH,MAAMC,cAAcxF,UAAUC,IAAI,uBACvCnC,KAAKyH,MAAMC,cAAcxF,UAAUO,OAAO,yBAE1CzC,KAAK6G,SACL7G,KAAK6G,SAASR,QAAQC,IAEtBtG,KAAKyH,MAAMC,cAAcxF,UAAUC,IAAI,uBACvCnC,KAAKyH,MAAMC,cAAcxF,UAAUO,OAAO,yBAE9CzC,KAAK2H,UAAUC,QAMnBhB,EAAA1G,UAAA4G,KAAA,WAAA,IAAA3D,EAAAnD,KACI,IAAKA,KAAK6G,SAAU,CAChB,GAA+C,UAA3C7G,KAAKyH,MAAMC,cAAcnF,MAAMsF,QAC/B,OAEJ7H,KAAKyH,MAAMC,cAAcxF,UAAUO,OAAO,uBAC1CzC,KAAKyH,MAAMC,cAAcxF,UAAUC,IAAI,wBAGtB,GAAjBnC,KAAK8H,UACL9H,KAAK+H,OAAOC,kBAAiB,WACzBC,WAAU,WACN,GAAI9E,EAAK+E,aAAc,KACbC,EAAI,YACoB,IAAtBhF,EAAKiF,aACLH,WAAWE,EAAM,KAEjBhF,EAAK4E,OAAOM,IAAG,WAAO,OAAAlF,EAAKkD,aAGnC8B,SAEAhF,EAAK4E,OAAOM,IAAG,WAAO,OAAAlF,EAAKkD,aAEhClD,EAAK2E,aAQpBlB,EAAA1G,UAAAoI,sBAFA,SAEsBC,GACC,eAAfA,EAAMC,KACNxI,KAAKoI,cAAe,EACE,eAAfG,EAAMC,OACbxI,KAAKoI,cAAe,IAK5BxB,EAAA1G,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,YACpB9B,KAAKwI,MACLxI,KAAK8B,mBAAmB,aAAe9B,KAAKwI,MAE5CxI,KAAKyI,aACLzI,KAAK8B,mBAAmB,0BAIxB8E,EAAA1G,UAAAkH,iBAAR,SAAyB1C,OACfgE,EAAU,CACZC,UAAW3I,KAAK6G,UAEpB7G,KAAK4I,aAAe5I,KAAK6I,aAAaC,mBAAmBpE,EAAUgE,IAG/D9B,EAAA1G,UAAAgH,kBAAR,SAA0B6B,OAChBC,EAAmBhJ,KAAKiJ,yBAAyBC,wBAAwBH,GAC/E/I,KAAK6I,aAAaM,QAClBnJ,KAAK4I,aAAe5I,KAAK6I,aAAaO,gBAAgBJ,IAGlDpC,EAAA1G,UAAAmH,eAAR,SAAuBgC,GACnBrJ,KAAK6I,aAAaM,QAClBnJ,KAAKsJ,QAAUD,uBA3MtB5E,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,WACVa,SAAA,sRAEAC,KAAM,CACF4E,yBAA0B,iBAC1BC,oBAAqB,YACrBC,gBAAiB,QACjBC,oBAAqB,WACrB9E,KAAQ,QACR+E,YAAa,KACbC,mBAAoB,IAExBC,WAAY,CACRpE,GAEJZ,cAAeC,EAAAA,kBAAkBC,sFAxCjCjB,EAAAA,kBACAgG,EAAAA,yBAEAC,EAAAA,gCAS+CC,EAAAA,cAI1C5D,EAAQ6D,WAAA,CAAA,CAAAzB,KA8FA0B,EAAAA,oDAjEZC,EAAAA,UAASvG,KAAA,CAAC,YAAa,CAACwG,KAAMC,EAAAA,wCAI9BvH,EAAAA,oBAIAA,EAAAA,kBAIAA,EAAAA,wBAIAA,EAAAA,4BAIAA,EAAAA,8BAIAA,EAAAA,yBAIAA,EAAAA,4BAIAA,EAAAA,qBAIAA,EAAAA,wBAIAA,EAAAA,uBAIAA,EAAAA,yBAIAwH,EAAAA,sCAkGAC,EAAAA,aAAY3G,KAAA,CAAC,aAAc,CAAC,YAAS,CAAA4E,KACrC+B,EAAAA,aAAY3G,KAAA,CAAC,aAAc,CAAC,cAsCjCgD,GA5HI,SAAAA,EAAoBa,EACAH,EACA2B,EACAlB,EACYlB,GAJhC,IAAA1D,EAKIH,EAAApC,KAAAZ,KAAMyH,IAAMzH,YALImD,EAAAsE,MAAAA,EACAtE,EAAAmE,MAAAA,EACAnE,EAAA8F,yBAAAA,EACA9F,EAAA4E,OAAAA,EACY5E,EAAA0D,SAAAA,EA5DhC1D,EAAAsF,aAAuB,EAQvBtF,EAAAqH,GAAa,YAAc7D,IAI3BxD,EAAA2E,SAAmB,IAInB3E,EAAA+E,cAAwB,EAIxB/E,EAAAsH,eAAyB,KAIzBtH,EAAAuH,UAAoB,KAIpBvH,EAAAwH,aAAuB,UAgBvBxH,EAAAwE,UAAqC,IAAIiD,EAAAA,aAGzCzH,EAAAiF,cAAwB,ICrG5B,IAAAyC,uBAGCpG,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAU,GAaVC,KAAM,CACFmG,wBAAyB,IAE7BjB,WAAY,CACR1D,GAEJtB,cAAeC,EAAAA,kBAAkBC,aAlBxB,0UAuBRgG,EAAAA,YAAWnH,KAAA,CAAC,+BAEjBiH,GA5BA,SAAAA,IA2BI7K,KAAAgL,uBAAiC,ECzBrC,IAAAC,EAAA,SAAAA,KAGIjL,KAAAyI,aAAwB,EASxBzI,KAAAkL,MAAiB,OAGjBlL,KAAAmL,SAAoB,QAMpBnL,KAAA8H,SAAoB,IAGpB9H,KAAAkI,cAAyB,EAGzBlI,KAAAyK,eAA0B,KAG1BzK,KAAA0K,UAAqB,KAGrB1K,KAAAoL,UAAmC,QCnCvCC,IAOIA,GAAAnL,UAAAoL,IAAA,SAAIC,EAAYC,EAAqBC,OAC3BhK,EAAQzB,KAAK0L,kBAAkBJ,IAAIC,GAEzC,OAAI9J,GAIGzB,KAAK2L,gBAAgBL,IAASC,EAAOC,IAEpDH,IAfI,SAAAA,GAAoBM,EAAmCD,GAAnC1L,KAAA2L,gBAAAA,EAAmC3L,KAAA0L,kBAAAA,ECW3D,IAAAE,IAiBWA,GAAA1L,UAAA2L,uBAAP,SACIC,EACA/C,EACAgD,EACAC,OAIMC,EAAY,IAAIC,QAClBF,GACAA,EAASvI,QAAO,SAAC0I,GAAW,OAAAF,EAAUG,IAAID,EAAQlM,YAAakM,SAK7DvD,EADmB5I,KAAKiJ,yBAAyBC,wBAAwBH,GACzC5I,OAAO,IAAIkL,GAAyBrL,KAAKqM,SAAUJ,IACzFjM,KAAKsM,OAAOC,WAAW3D,EAAa4D,cAG9BC,EAAYjN,OAAOa,OAAO,GAAI0L,GACpCvM,OAAOkN,KAAKD,GAAWhJ,QAAO,SAACkJ,GACf,SAARA,IACA/D,EAAagE,SAASD,GAAOF,EAAUE,MAG/C/D,EAAagE,SAAS5F,mBAAqB8E,MAGrCe,EAAejE,EAAqB,SAA0BkE,UAAU,GAO9E,MAN4B,SAAxBL,EAAUrB,UACVqB,EAAUrB,UAAU2B,YAAYF,GAEhCG,SAASC,KAAKF,YAAYF,GAGvBjE,GAIJgD,GAAA1L,UAAAgN,iBAAP,SAAwBtE,GACpB5I,KAAKsM,OAAOa,WAAWvE,EAAa4D,UACpC5D,EAAawE,gCA1DpBC,EAAAA,uDAdGtD,EAAAA,gCAEAuD,EAAAA,sBACAC,EAAAA,YAwEJ3B,IAzDI,SAAAA,GACY3C,EACAqD,EACAD,GAFArM,KAAAiJ,yBAAAA,EACAjJ,KAAAsM,OAAAA,EACAtM,KAAAqM,SAAAA,ECPhB,IAAAmB,IAaWA,GAAAtN,UAAAuN,cAAP,WACI,OAAOzN,KAAK0N,QAA+B,EAArB1N,KAAK0N,OAAO/M,QAQ/B6M,GAAAtN,UAAA4G,KAAP,SAAY6G,EAAgDC,GAA5D,IAAAzK,EAAAnD,UAA4D,IAAA4N,IAAAA,EAAA,IAA+B3C,GAGvF2C,EAAcpO,OAAOa,OAAO,IAAI4K,EAAe2C,OAGzCzB,EAAoB,IAAI/F,EAC9B+F,EAAQ0B,KAAOD,EAAYC,KAGtB7N,KAAK0N,QAAiC,IAAvB1N,KAAK0N,OAAO/M,QAAiBX,KAAK8N,oBAClD9N,KAAK8N,kBAAoB9N,KAAK+N,wBAAwBlC,uBACrB8B,EAAS9C,EAAyB+C,IAKvEA,EAAYxC,UAAYpL,KAAK8N,kBAAkBE,SAAStG,kBAElDuG,EAAYjO,KAAK+N,wBAAwBlC,uBAC1B8B,EAAS/G,EAAgBgH,EAAa,CAACzB,IAE5D8B,EAAUD,SAAStG,cAAcnF,MAAMuD,UAAY,WAG7CoI,EAAS/B,EAAQ1F,eAAe0H,UAAS,WAC3ChL,EAAKiL,sBAAsBH,GAC3BC,EAAOG,gBAKX,OADArO,KAAK0N,OAAOlM,KAAKyM,GACV9B,GAMJqB,GAAAtN,UAAAoO,WAAP,WAAA,IAAAnL,EAAAnD,KACIA,KAAK0N,OAAOjK,QAAO,SAAC8K,GAChBpL,EAAKiL,sBAAsBG,MAI3Bf,GAAAtN,UAAAkO,sBAAR,SAA8BI,GAC1BxO,KAAK0N,OAAO1N,KAAK0N,OAAOe,QAAQD,IAAU,KAC1CxO,KAAK0N,OAAS1N,KAAK0N,OAAOgB,OAAM,SAAChM,GAAQ,OAAS,OAATA,GAAiBA,IAASiM,YACnE3O,KAAK+N,wBAAwBb,iBAAiBsB,IAE1CxO,KAAK8N,mBAAuB9N,KAAK0N,QAAiC,IAAvB1N,KAAK0N,OAAO/M,QACvDX,KAAK4O,yBAILpB,GAAAtN,UAAA0O,sBAAR,WACI5O,KAAK+N,wBAAwBb,iBAAiBlN,KAAK8N,mBACnD9N,KAAK8N,kBAAoBa,gCA9EhCtB,EAAAA,uDANQzB,MAuFT4B,IA3EI,SAAAA,GACYO,GAAA/N,KAAA+N,wBAAAA,EALJ/N,KAAA0N,OAAyC,GCjBrD,IAAAmB,yBAQC7K,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACwC,EAAgBiE,GAC/B5G,QAAS,CAACC,EAAAA,aAAcc,GACxBb,QAAS,CAACyC,EAAgBiE,GAC1BiE,gBAAiB,CAACjE,EAAyBjE,GAC3CmI,UAAW,CAACvB,QAEUqB,IAP1B,SAAAA,MCDA,IAAA7L,GAAAgM,IAIoC9L,EAAAA,GAJpCF,GAIoCnB,GAYhCmN,GAAA9O,UAAA0C,eAAA,WACQ5C,KAAKiP,QACLjP,KAAK8B,mBAAmB,aAAe9B,KAAKiP,QAE5CjP,KAAKkP,UACLlP,KAAK8B,mBAAmB,aAAe9B,KAAKkP,gCArBvDvL,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,2DATaC,EAAAA,+CAatBhB,EAAAA,wBAGAA,EAAAA,4BAGAiI,EAAAA,YAAWnH,KAAA,CAAC,qBAiBjBoL,IAHI,SAAAA,GAAoBjM,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAbpBI,EAAAgM,cAAwB,ICb5B,IAAAnM,GAAAoM,IAIoClM,EAAAA,GAJpCF,GAIoCnB,GAKhCuN,GAAAlP,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,YACpB9B,KAAKiP,QACLjP,KAAK8B,mBAAmB,aAAe9B,KAAKiP,8BAZvDtL,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,2DATMC,EAAAA,+CAafhB,EAAAA,SAcLsM,IAHI,SAAAA,GAAoBrM,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAXXI,EAAA8L,OAAiB,KCN9B,IAAAjM,GAAAqM,IAI0CnM,EAAAA,GAJ1CF,GAI0CnB,GAWtCwN,GAAAnP,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,mBACpB9B,KAAKiP,QACLjP,KAAK8B,mBAAmB,oBAAsB9B,KAAKiP,QAEnDjP,KAAKsP,YACLtP,KAAK8B,mBAAmB,oBAAsB9B,KAAKsP,YAEnDtP,KAAKuP,MACLvP,KAAK8B,mBAAmB,aAAe9B,KAAKuP,4BAxBvD5L,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,kEATMC,EAAAA,+CAafhB,EAAAA,0BAGAA,EAAAA,oBAGAA,EAAAA,SAoBLuM,IAHI,SAAAA,GAAoBtM,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAvBXI,EAAA8L,OAAiB,GAGjB9L,EAAAmM,WAAqB,GAGrBnM,EAAAoM,KAAe,KCnB5B,IAAAC,yBAOCxL,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC6K,GAAgBI,GAAgBC,IAC1CjL,aAAc,CAAC4K,GAAgBI,GAAgBC,QAEnBG,IALhC,SAAAA,MCMA,IAAAC,yBAAC9L,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,gBACVc,KAAM,CACFhC,QAAO,qBAGmB8M,IARlC,SAAAA,MCFA,IAAAC,yBAAC/L,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,qBACVc,KAAM,CACFhC,QAAO,2BAGuB+M,IARtC,SAAAA,MCFA,IAAAC,yBAAChM,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,uBACVc,KAAM,CACFhC,QAAO,2BAGuBgN,IARtC,SAAAA,MCTA,IAAAC,yBAOC5L,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACsL,GAAqBC,GAAyBC,IACxDvL,aAAc,CAACqL,GAAqBC,GAAyBC,QAElCC,IAL/B,SAAAA,MCIA,IAAAC,yBAACpL,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,8BACAC,KAAM,CACFC,KAAQ,SAEZC,cAAeC,EAAAA,kBAAkBC,sDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,4BAEjBiM,IAbA,SAAAA,KAYI7P,KAAA8P,oBAA8B,ECblC,IAAA9M,GAAA+M,IAK4C7M,EAAAA,GAL5CF,GAK4CnB,GA6BxCkO,GAAA7P,UAAA0C,eAAA,WACQ5C,KAAKwE,MACLxE,KAAK8B,mBAAmB,cAAgB9B,KAAKwE,MAE7CxE,KAAKqD,OACLrD,KAAK8B,mBAAmB,aAAe9B,KAAKqD,OAE5CrD,KAAKgQ,OACLhQ,KAAK8B,mBAAmB,MAAQ9B,KAAKgQ,6BA1ChDrM,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,oEAbMC,EAAAA,6CAkBfhB,EAAAA,qBAIAA,EAAAA,qBAIAA,EAAAA,uBAIAA,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,0DAIZmH,EAAAA,YAAWnH,KAAA,CAAC,+BAoBjBmM,IAhBI,SAAAA,GAAoBhN,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAPpBI,EAAAC,SAAmB,EAInBD,EAAA8M,sBAAgC,ICpCpC,IAAAC,yBAMClM,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC0L,GAAsBE,IAChC3L,aAAc,CAACyL,GAAsBE,QAETG,IALhC,SAAAA,MCDA,IAAAC,yBAAC9C,EAAAA,WAAUzJ,KAAA,CAAC,CAACwM,WAAY,qHAAzB,SAAAD,KAOInQ,KAAAqQ,mBAA6B,iBAG7BrQ,KAAAsQ,kBAA4B,gBAG5BtQ,KAAAuQ,cAAwB,YAGxBvQ,KAAAwQ,oBAA8B,kBAG9BxQ,KAAAyQ,mBAA6B,iBAG7BzQ,KAAA0Q,eAAyB,aCvB7B,SAAgBC,GAAsBC,GAClC,OAAO,IAAIC,GAAoBD,GAMnC,IAAAE,yBAACzD,EAAAA,WAAUzJ,KAAA,CAAC,CACRwM,WAAY,OACZW,WAAYJ,GACZK,KAAM,CAACC,EAAAA,4IAHX,SAAAH,MA0BA,IAAA9N,GAAA6N,IACyC3N,EAAAA,GADzCF,GACyC8N,IAsCrCD,GAAA3Q,UAAAgR,gBAAA,SAAgBC,GACZ,OAAOA,EAAKC,UAAY,IAAMpR,KAAKqR,WAAWF,EAAKG,YAAc,IAAMH,EAAKI,eAIhFV,GAAA3Q,UAAAsR,qBAAA,WACI,OAAOxR,KAAKqR,YAIhBR,GAAA3Q,UAAAuR,sBAAA,WACI,OAAOzR,KAAK0R,aAIhBb,GAAA3Q,UAAAyR,oBAAA,WACI,OAAO3R,KAAK4R,eAIRf,GAAA3Q,UAAA2R,iBAAR,WACS7R,KAAK4R,eAA+C,IAA9B5R,KAAK4R,cAAcjR,SAC1CX,KAAK4R,cAAgB5R,KAAK8R,kBAGzB9R,KAAK0R,aAA2C,IAA5B1R,KAAK0R,YAAY/Q,SACtCX,KAAK0R,YAAc1R,KAAK+R,qBAGvB/R,KAAKqR,YAAyC,IAA3BrR,KAAKqR,WAAW1Q,SACpCX,KAAKqR,WAAarR,KAAKgS,0CArElC3E,EAAAA,gFAsBgBnD,EAAAA,UAAQ,CAAA1B,KAAIyJ,EAAAA,OAAMrO,KAAA,CAACqN,EAAAA,gBAmDpCJ,IAnDI,SAAAA,GAAmDD,GAAnD,IAAAzN,EACIH,GAAApC,KAAAZ,OAAOA,KACP,GAF+CmD,EAAAyN,OAAAA,EAf3CzN,EAAA2O,iBAA6B,CACjC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG9D3O,EAAA6O,mBAA+B,CACnC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACxD,SAAU,YAAa,UAAW,WAAY,YAG1C7O,EAAA4O,oBAAgC,CACpC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC1C,MAAO,MAAO,MAAO,MAAO,OAMxBnB,EAAQ,KACFsB,EAAsBC,EAAAA,kBAAkBvB,EAAQwB,EAAAA,UAAUC,WAAYC,EAAAA,iBAAiBC,OAC7FpP,EAAKyO,cAAgBM,EAAoBM,IAAG,SAAEC,EAAKC,GAAU,OAAAR,EAAoBQ,EAAQ,KACzFvP,EAAKuO,YAAciB,EAAAA,oBAAoB/B,EAAQwB,EAAAA,UAAUC,WAAYC,EAAAA,iBAAiBM,aACtFzP,EAAKkO,WAAasB,EAAAA,oBAAoB/B,EAAQwB,EAAAA,UAAUC,WAAYC,EAAAA,iBAAiBO,aAGzF1P,EAAK0O,qBC1Db,IAAAiB,IA4CItT,OAAAuT,eAAID,GAAA5S,UAAA,gBAAa,KAAjB,WACI,MAA2B,SAApBF,KAAKgT,WAAwBhT,KAAKiT,mBAAmBxC,mBACtDzQ,KAAKiT,mBAAmB3C,mDAIlC9Q,OAAAuT,eAAID,GAAA5S,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKgT,WAAwBhT,KAAKiT,mBAAmBvC,gDAKhElR,OAAAuT,eAAID,GAAA5S,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKkT,aAAa1B,uBAAuBxR,KAAKmT,mBAAmBC,MAAQ,oCAGpFN,GAAA5S,UAAAmT,cAAA,WACI,MAA2B,UAApBrT,KAAKgT,YAGhBF,GAAA5S,UAAAoT,aAAA,WACI,MAA2B,SAApBtT,KAAKgT,YAGhBF,GAAA5S,UAAAqT,kBAAA,SAAkB/K,GACVA,IAASxI,KAAKgT,WACdhT,KAAKgT,WAAa,MAElBhT,KAAKgT,WAAaxK,EAEtBxI,KAAKwT,iBAAiB5L,KAAK5H,KAAKgT,kCA1EvCvO,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,iyDAEAG,cAAeC,EAAAA,kBAAkBC,KACjCJ,KAAM,CACFgF,YAAa,4EAfZwG,UACAW,2CAoBJhO,EAAAA,kCAIAA,EAAAA,kBAIAA,EAAAA,gCAIAwH,EAAAA,gCAKAA,EAAAA,4BAKAA,EAAAA,UA2CLwI,IAvCI,SAAAA,GACWG,EACAC,GADAlT,KAAAiT,mBAAAA,EACAjT,KAAAkT,aAAAA,EAfFlT,KAAAwT,iBACH,IAAI5I,EAAAA,aAID5K,KAAAyT,gBACH,IAAI7I,EAAAA,aAID5K,KAAA0T,YACH,IAAI9I,EAAAA,aC7Cd,IAAA+I,IAwBWA,GAAAC,eAAP,SAAsBR,EAAeS,OAEbC,EAUpB,OAAc,IAAVV,GAVgBU,EAWED,GAVN,GAAM,GAEPC,EAAQ,KAAQ,GAGhBA,EAAQ,KAAQ,EAKI,GAAL,GAClBV,EAAQ,GAAM,GAAKA,EAAQ,GAAOA,EAAQ,GAAM,GAAa,EAARA,EACtD,GAEA,IAORO,GAAAI,WAAP,SAAkBC,EAAeC,GAC7B,SAAKD,IAAUC,IAGJD,EAAME,iBAAmBD,EAAMC,gBAWvCP,GAAAzT,UAAAiU,iBAAP,SAAwB5L,EAAsBmK,GAC1C,OAAQnK,EAAM6L,MACV,IAAK,QACL,IAAK,QACD7L,EAAM8L,iBACNrU,KAAKsU,YAAYhT,KAAKoR,GACtB,MAEJ,IAAK,YACDnK,EAAM8L,iBACQ,IAAV3B,GACA1S,KAAKuU,oBAAoBjT,OACzBtB,KAAKwU,gBAAgBlT,KAAK,KAE1BtB,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,GAEtC,MAEJ,IAAK,aACDnK,EAAM8L,iBACQ,KAAV3B,GACA1S,KAAKyU,kBAAkBnT,OACvBtB,KAAKwU,gBAAgBlT,KAAK,IAE1BtB,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,GAEtC,MAEJ,IAAK,UACDnK,EAAM8L,iBACF3B,GAAS,GACT1S,KAAKuU,oBAAoBjT,OACzBtB,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,IAElC1S,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,GAEtC,MAEJ,IAAK,YACDnK,EAAM8L,iBACO,GAAT3B,GACA1S,KAAKyU,kBAAkBnT,OACvBtB,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,IAElC1S,KAAKwU,gBAAgBlT,KAAKoR,EAAQ,GAEtC,MAEJ,IAAK,MACG1S,KAAK0U,sBAAwBnM,EAAMoM,WACnCpM,EAAM8L,iBACNrU,KAAK0U,yBAOzBf,IAvHA,SAAAA,KAGW3T,KAAAsU,YAA+B,IAAI9N,EAAAA,QAGnCxG,KAAAyU,kBAAmC,IAAIjO,EAAAA,QAGvCxG,KAAAuU,oBAAqC,IAAI/N,EAAAA,QAGzCxG,KAAAwU,gBAAmC,IAAIhO,EAAAA,gBCUvCoO,GAAAC,SAAP,eACUC,EAAiB,IAAIC,KAC3B,OAAO,IAAIH,GAAOE,EAASvD,cAAeuD,EAASxD,WAAa,EAAGwD,EAAS1D,YAMzEwD,GAAAI,iBAAP,SAAwB7D,GACpB,GAAIA,EACA,OAAO,IAAIyD,GAAOzD,EAAKI,cAAeJ,EAAKG,WAAa,EAAGH,EAAKC,YAmBjEwD,GAAA1U,UAAAgU,aAAP,WACI,OAAIlU,KAAK6T,MAAQ7T,KAAKoT,OAASpT,KAAKyS,KAAOzS,KAAKiV,cACrCjV,KAAKkV,SAAShB,eAEd,IAQRU,GAAA1U,UAAAiV,aAAP,WACI,OAAInV,KAAK6T,MAAQ7T,KAAKoT,OAASpT,KAAKyS,IACzBzS,KAAKkV,SAASE,WAEb,GAUTR,GAAA1U,UAAAmV,OAAP,WACI,OAAIrV,KAAK6T,MAAQ7T,KAAKoT,OAASpT,KAAKyS,IACzBzS,KAAKkV,SAASG,SAAW,GAExB,GAKTT,GAAA1U,UAAAoV,QAAP,eACUC,EAAU5B,GAAgBC,eAAe5T,KAAKoT,MAAOpT,KAAK6T,MAC1DpB,EAAMzS,KAAKyS,KAAO8C,EAAU,EAAIvV,KAAKyS,IAAM,EAC3CW,EAAgB,IAARX,EAAYzS,KAAKoT,MAAsB,GAAbpT,KAAKoT,MAAa,EAAIpT,KAAKoT,MAAQ,EAE3E,OAAO,IAAIwB,GADY,IAAVxB,EAAcpT,KAAK6T,KAAO7T,KAAK6T,KAAO,EAC3BT,EAAOX,IAI5BmC,GAAA1U,UAAAsV,YAAP,eACUD,EAAU5B,GAAgBC,eAAe5T,KAAKoT,MAAOpT,KAAK6T,MAC1DpB,EAAmB,IAAbzS,KAAKyS,IAAY8C,EAAUvV,KAAKyS,IAAM,EAC5CW,EAAQX,IAAQ8C,EAAUvV,KAAKoT,MAAwB,IAAfpT,KAAKoT,MAAc,GAAKpT,KAAKoT,MAAQ,EAEnF,OAAO,IAAIwB,GADY,KAAVxB,EAAepT,KAAK6T,KAAO7T,KAAK6T,KAAO,EAC5BT,EAAOX,IAM5BmC,GAAA1U,UAAAgV,OAAP,WACI,OAAO,IAAIH,KAAK/U,KAAK6T,KAAM7T,KAAKoT,MAAQ,EAAGpT,KAAKyS,MAM7CmC,GAAA1U,UAAA+U,YAAP,WACI,SAAKjV,QAIAA,KAAK6T,MAAS7T,KAAKoT,OAAUpT,KAAKyS,MAInCzS,KAAK6T,MAAQ,GAAK7T,KAAKoT,MAAQ,GAAkB,GAAbpT,KAAKoT,OAIzCpT,KAAKyS,IAAM,GAAKzS,KAAKyS,IAAMkB,GAAgBC,eAAe5T,KAAKoT,MAAOpT,KAAK6T,QAOvFe,IA3FI,SAAAA,GAAYf,EAAcT,EAAeX,GACrCzS,KAAK6T,KAAOA,EACZ7T,KAAKoT,MAAQA,EACbpT,KAAKyS,IAAMA,EC5BnB,IAAAgD,IAiIIA,GAAAvV,UAAAwV,WAAA,SAAWjD,EAAkBlK,GACrBA,IAIAA,EAAMoN,kBACNpN,EAAM8L,iBACNrU,KAAK4V,gBAAkBnD,EAAIjI,GAC3BxK,KAAK6V,aAAa7V,KAAK4V,kBAEtBnD,EAAIqD,SAAYrD,EAAIsD,WACA,WAAjB/V,KAAKgW,SACLhW,KAAKiW,aAAexD,EAAItB,KACxBnR,KAAKkW,mBAAmBtO,KAAK6K,EAAItB,MACjCnR,KAAKmW,oBAEsB,IAAvBnW,KAAKoW,eAA8C,IAAvBpW,KAAKoW,eACjCpW,KAAKqW,kBAAoB,CAAEC,MAAO7D,EAAItB,KAAMoF,IAAK,MACjDvW,KAAKwW,wBAAwB5O,KAAK5H,KAAKqW,mBACvCrW,KAAKmW,oBACyB,IAAvBnW,KAAKoW,gBAERpW,KAAKqW,kBAAkBC,MAAMnB,eAAiB1C,EAAItB,KAAKgE,eACvDnV,KAAKqW,kBAAoB,CAAEC,MAAOtW,KAAKqW,kBAAkBC,MAAOC,IAAK9D,EAAItB,MAEzEnR,KAAKqW,kBAAoB,CAAEC,MAAO7D,EAAItB,KAAMoF,IAAK,MAErDvW,KAAKwW,wBAAwB5O,KAAK5H,KAAKqW,mBACvCrW,KAAKmW,sBAQrBV,GAAAvV,UAAA2C,SAAA,WACI7C,KAAKmW,oBAST3W,OAAAuT,eAAI0C,GAAAvV,UAAA,gBAAa,KAAjB,WACI,OAAKF,KAAKqW,mBAAsBrW,KAAKqW,kBAAkBC,OAE5CtW,KAAKqW,kBAAkBC,OAC5BtW,KAAKqW,kBAAkBE,MACrB5C,GAAgBI,WAAW/T,KAAKqW,kBAAkBC,MAAOtW,KAAKqW,kBAAkBE,KAI7EvW,KAAKqW,kBAAkBC,OAAStW,KAAKqW,kBAAkBE,IACvD,OADJ,EADI,EANA,mCAmBfd,GAAAvV,UAAAuW,oBAAA,SAAoBlO,EAAOmO,EAAmBC,GAC1C,GAAmB,QAAfpO,EAAM6L,MAAmB7L,EAAMoM,SAM/B,OAAQpM,EAAM6L,MACV,IAAA,QACA,IAAA,QACI7L,EAAM8L,iBACNrU,KAAK0V,WAAWgB,GAChB1W,KAAK4V,gBAAkBc,EAAKlM,GAC5B,MAEJ,IAAA,UACIjC,EAAM8L,iBACO,EAATsC,EAAKC,EACL5W,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,EAAI,GAAGD,EAAKG,GAAGtM,IAE5DxK,KAAK+W,sBACL/W,KAAK4V,gBAAkB5V,KAAK6W,YAAY7W,KAAK6W,YAAYlW,OAAS,GAAGgW,EAAKG,GAAGtM,IAEjF,MAEJ,IAAA,YACIjC,EAAM8L,iBACFsC,EAAKC,EAAI5W,KAAK6W,YAAYlW,OAAS,EACnCX,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,EAAI,GAAGD,EAAKG,GAAGtM,IAE5DxK,KAAKgX,kBACLhX,KAAK4V,gBAAkB5V,KAAK6W,YAAY,GAAGF,EAAKG,GAAGtM,IAEvD,MAEJ,IAAA,YACIjC,EAAM8L,iBACO,EAATsC,EAAKG,EACL9W,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,GAAGD,EAAKG,EAAI,GAAGtM,GAC5C,EAATmM,EAAKC,EACZ5W,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,EAAI,GAAG5W,KAAK6W,YAAY,GAAGlW,OAAS,GAAG6J,IAEpFxK,KAAK+W,sBACL/W,KAAK4V,gBACD5V,KAAK6W,YAAY7W,KAAK6W,YAAYlW,OAAS,GAAGX,KAAK6W,YAAY,GAAGlW,OAAS,GAAG6J,IAGtF,MAEJ,IAAA,aACIjC,EAAM8L,iBACFsC,EAAKG,EAAI9W,KAAK6W,YAAY,GAAGlW,OAAS,EACtCX,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,GAAGD,EAAKG,EAAI,GAAGtM,GACrDmM,EAAKC,EAAI5W,KAAK6W,YAAYlW,OAAS,EAC1CX,KAAK4V,gBAAkB5V,KAAK6W,YAAYF,EAAKC,EAAI,GAAG,GAAGpM,IAEvDxK,KAAKgX,kBACLhX,KAAK4V,gBAAkB5V,KAAK6W,YAAY,GAAG,GAAGrM,SAvDtDxK,KAAK0U,sBACLnM,EAAM8L,iBACNrU,KAAK0U,uBA4DT1U,KAAK4V,iBACL5V,KAAK6V,aAAa7V,KAAK4V,kBAKxBH,GAAAvV,UAAAsC,YAAP,WACIxC,KAAKmW,oBAITV,GAAAvV,UAAA+W,mBAAA,WACQjX,KAAK4V,kBACL5V,KAAK6V,aAAa7V,KAAK4V,iBACvB5V,KAAK4V,gBAAkB,OAOxBH,GAAAvV,UAAA2V,aAAP,SAAoBqB,OACVC,EAAiBnX,KAAKoX,KAAK1P,cAAc2P,cAAc,IAAMH,GAC/DC,GACAA,EAAeG,SAKhB7B,GAAAvV,UAAAqX,eAAP,WACIvX,KAAK4V,gBAAkB5V,KAAKwX,cACxBxX,KAAKyX,gBAAgB/I,OAAM,SAACgI,GAAQ,MAAqB,YAArBA,EAAKgB,eAC3ClN,IAINhL,OAAAuT,eAAW0C,GAAAvV,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK6W,YAAYc,OAAM,SAAEC,EAAkCC,GAI9D,OAFIA,EADCA,GACa,GAEXD,EAAkBhW,OAAOiW,sCAShCpC,GAAAvV,UAAA6W,oBAAR,WACwC,EAAhC/W,KAAKmT,mBAAmBC,MACxBpT,KAAKmT,mBAAkB/S,EAAA,GAAQJ,KAAKmT,mBAAkB,CAAEC,MAAOpT,KAAKmT,mBAAmBC,MAAQ,IAE/FpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAO,EAAGT,MAAO,IAE/EpT,KAAKmW,mBACLnW,KAAK8X,oBAAoBlQ,QAQrB6N,GAAAvV,UAAA8W,gBAAR,WACwC,EAAhChX,KAAKmT,mBAAmBC,MACxBpT,KAAKmT,mBAAkB/S,EAAA,GAAQJ,KAAKmT,mBAAkB,CAAEC,MAAOpT,KAAKmT,mBAAmBC,MAAQ,IAE/FpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAO,EAAGT,MAAO,GAE/EpT,KAAKmW,mBACLnW,KAAK+X,gBAAgBnQ,QAOjB6N,GAAAvV,UAAA8X,iBAAR,WAAA,IAAA7U,EAAAnD,KACQiY,EAA0B,GAQ9B,OALAA,GADAA,EAAWjY,KAAKkY,qBAAqBD,IACjBrW,OAAO5B,KAAKmY,wBAChCF,EAAWjY,KAAKoY,iBAAiBH,IAExBxU,QAAO,SAAE7C,EAAM8R,GAAkB,OAAA9R,EAAK4J,GAAKrH,EAAKqH,GAAK,YAAc6N,KAAKC,MAAM5F,EAAQ,GAAK,GAAWA,EAAQ,IAEhHuF,GAOHxC,GAAAvV,UAAAiW,iBAAR,WACSnW,KAAKmT,qBACFnT,KAAKiW,aACLjW,KAAKmT,mBAAqB,CAAEC,MAAOpT,KAAKiW,aAAa7C,MAAOS,KAAM7T,KAAKiW,aAAapC,MAEpF7T,KAAKmT,mBAAqB,CAAEC,MAAOwB,GAAOC,WAAWzB,MAAOS,KAAMe,GAAOC,WAAWhB,OAO5F,QAHM0E,EAAevY,KAAKgY,mBACpBnB,EAA+B,GAER,EAAtB0B,EAAa5X,QAChBkW,EAAYrV,KAAK+W,EAAaC,OAAO,EAAG,IAE5CxY,KAAK6W,YAAcA,GAOfpB,GAAAvV,UAAAiY,oBAAR,WAKI,QAJM/E,EAAQpT,KAAKmT,mBAAmBC,MAChCS,EAAO7T,KAAKmT,mBAAmBU,KAC/B0E,EAA8B,GAC9BE,EAAqC9E,GAAgBC,eAAeR,EAAOS,GACxE6E,EAAY,EAAGA,GAAaD,EAA4BC,IAAa,KACpEC,EAAiB,IAAI/D,GAAOf,EAAMT,EAAOsF,GAC/CH,EAAa/W,KAAIpB,EAAA,GACVJ,KAAKqV,OAAOsD,GAAO,CACtBjB,YAAa,UACbkB,MAAOjF,GAAgBI,WAAWa,GAAOC,WAAY8D,MAI7D,OADA3Y,KAAKwX,cAAce,GAAcM,cAAe,EACzCN,GASH9C,GAAAvV,UAAAsX,cAAR,SAAsBe,GAClB,OAAIA,EAAaO,KAAI,SAACpC,GAAQ,OAAAA,EAAKqC,WACxBR,EAAaO,KAAI,SAACpC,GAAQ,OAAAA,EAAKqC,WAC/BR,EAAaO,KAAI,SAACpC,GAAQ,OAAAA,EAAKkC,QAC/BL,EAAaO,KAAI,SAACpC,GAAQ,OAAAA,EAAKkC,QAE/BL,EAAa,IAQpB9C,GAAAvV,UAAAgY,qBAAR,SAA6BK,OACnBnF,EAAwC,EAAhCpT,KAAKmT,mBAAmBC,MAAYpT,KAAKmT,mBAAmBC,MAAQ,EAAI,GAChFS,EAAuC,EAAhC7T,KAAKmT,mBAAmBC,MAAYpT,KAAKmT,mBAAmBU,KAAO7T,KAAKmT,mBAAmBU,KAAO,EACzG4E,EAAqC9E,GAAgBC,eAAeR,EAAOS,GAE3EmF,EAAmBP,EACrBQ,EAFsB,IAAIrE,GAAOf,EAAMT,EAAOqF,GAELpD,SAAWrV,KAAKkZ,kBAS7D,GAJID,EAAuB,IACvBA,GAA8C,GAG9CA,EAAuB,EACvB,KAA+B,GAAxBA,GAA2B,KAExBN,EAAS,IAAI/D,GAAOf,EAAMT,EADX4F,EAAmBC,GAExCV,EAAa/W,KAAIpB,EAAA,GAAMJ,KAAKqV,OAAOsD,GAAO,CAAEjB,YAAa,cACzDuB,IAGR,OAAOV,GAOH9C,GAAAvV,UAAAkY,iBAAR,SAAyBG,GAOrB,QANMnF,EAAQpT,KAAKmT,mBAAmBC,MAAQ,GAAKpT,KAAKmT,mBAAmBC,MAAQ,EAAI,EACjFS,EAAO7T,KAAKmT,mBAAmBC,MAAQ,GAAKpT,KAAKmT,mBAAmBU,KAAO7T,KAAKmT,mBAAmBU,KAAO,EAG1GsF,EAAyB,GAAKZ,EAAa5X,OAExCyY,EAAQ,EAAGA,GAASD,EAAwBC,IAAS,KACpDT,EAAS,IAAI/D,GAAOf,EAAMT,EAAOgG,GACvCb,EAAa/W,KAAIpB,EAAA,GAAMJ,KAAKqV,OAAOsD,GAAO,CAAEjB,YAAa,UAE7D,OAAOa,GAOH9C,GAAAvV,UAAAmV,OAAR,SAAesD,OACLlG,EAAmB,CACrBtB,KAAMwH,EACNU,QAASV,EAAOtD,SAChBU,SAAU/V,KAAKsZ,gBAAgBX,GAC/B7C,QAAS9V,KAAKuZ,cAAcZ,GAC5BI,SACsB,WAAjB/Y,KAAKgW,SAAwBrC,GAAgBI,WAAW4E,EAAQ3Y,KAAKiW,eACrEjW,KAAKqW,mBAAqB1C,GAAgBI,WAAW4E,EAAQ3Y,KAAKqW,kBAAkBC,QACpFtW,KAAKqW,mBAAqB1C,GAAgBI,WAAW4E,EAAQ3Y,KAAKqW,kBAAkBE,KAEzFiD,cAAgBxZ,KAAKqW,mBAAqB1C,GAAgBI,WAAW4E,EAAQ3Y,KAAKqW,kBAAkBC,OACpGmD,aAAezZ,KAAKqW,mBAAqB1C,GAAgBI,WAAW4E,EAAQ3Y,KAAKqW,kBAAkBE,KACnGmD,cAAgB1Z,KAAKqW,mBAChBrW,KAAKqW,kBAAkBC,OAAUtW,KAAKqW,kBAAkBC,MAAMnB,eAAiBwD,EAAOxD,gBACtFnV,KAAKqW,kBAAkBE,KAAQvW,KAAKqW,kBAAkBE,IAAIpB,eAAiBwD,EAAOxD,eAEvFzK,UAAW1K,KAAKkT,aAAahC,gBAAgByH,EAAOzD,WAoBxD,MAjBqB,UAAjBlV,KAAKgW,SAA+C,IAAvBhW,KAAKoW,eAA8C,IAAvBpW,KAAKoW,cAOhC,IAAvBpW,KAAKoW,gBACRpW,KAAK2Z,0BAA4BlH,EAAIsD,WACrCtD,EAAIsD,SAAW/V,KAAK2Z,wBAAwBlH,EAAItB,OAGhDnR,KAAK4Z,wBAA0BnH,EAAIqD,UACnCrD,EAAIqD,QAAU9V,KAAK4Z,sBAAsBnH,EAAItB,SAZ7CnR,KAAK6Z,4BAA8BpH,EAAIsD,WACvCtD,EAAIsD,SAAW/V,KAAK6Z,0BAA0BpH,EAAItB,OAElDnR,KAAK8Z,0BAA4BrH,EAAIqD,UACrCrD,EAAIqD,QAAU9V,KAAK8Z,wBAAwBrH,EAAItB,QAYhDsB,GAOXjT,OAAAuT,eAAI0C,GAAAvV,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKkT,aAAavB,sBACpBoI,MAAM/Z,KAAKkZ,kBAAoB,GAC/BtX,OAAO5B,KAAKkT,aAAavB,sBAAsBoI,MAAM,EAAG/Z,KAAKkZ,kBAAoB,IACjF1G,IAAG,SAACwH,GAAW,OAAAA,EAAQ,GAAGC,4EA9ftCxV,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,uBACVa,SAAA,iqDAEAG,cAAeC,EAAAA,kBAAkBC,KACjCJ,KAAM,CACFgF,YAAa,8EAfZmH,UARLhN,EAAAA,gEAmCCiH,EAAAA,YAAWnH,KAAA,CAAC,wDAIZd,EAAAA,4BAIAA,EAAAA,iCAIAA,EAAAA,iCAIAA,EAAAA,uBAIAA,EAAAA,kBAIAA,EAAAA,mCAGAA,EAAAA,uCAIAwH,EAAAA,gCAIAA,EAAAA,oCAIAA,EAAAA,mCAIAA,EAAAA,gCAOAxH,EAAAA,yCASAA,EAAAA,uCASAA,EAAAA,uCASAA,EAAAA,qCASAA,EAAAA,6BASAA,EAAAA,SA+YL2S,IAzYI,SAAAA,GACYvC,EACAkE,GADApX,KAAAkT,aAAAA,EACAlT,KAAAoX,KAAAA,EA7GZpX,KAAA4V,gBAA0B,GAOnB5V,KAAAka,yBAAmC,EAoB1Cla,KAAAgW,QAAwB,SAWRhW,KAAAwW,wBAAqD,IAAI5L,EAAAA,aAIzD5K,KAAA+X,gBAAsC,IAAInN,EAAAA,aAI1C5K,KAAA8X,oBAA0C,IAAIlN,EAAAA,aAI9C5K,KAAAkW,mBAA2C,IAAItL,EAAAA,aAO/D5K,KAAAsZ,gBAAe,SAAaX,GACxB,OAAO,GAQX3Y,KAAA6Z,0BAAyB,SAAalB,GAClC,OAAO,GAQX3Y,KAAA2Z,wBAAuB,SAAahB,GAChC,OAAO,GAQX3Y,KAAA8Z,wBAAuB,SAAanB,GAChC,OAAO,GAQX3Y,KAAA4Z,sBAAqB,SAAajB,GAC9B,OAAO,GAQX3Y,KAAAuZ,cAAa,SAAaZ,GACtB,OAAO,GC/Hf,IAAAwB,IAyCIA,GAAAja,UAAA2C,SAAA,WAAA,IAAAM,EAAAnD,KACIA,KAAKoa,gBAAgB1F,oBAAsB1U,KAAK0U,oBAEhD1U,KAAKoa,gBAAgB5F,gBAChB6F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,SAACuE,GAAS,OAAAvP,EAAK0S,aAAa,IAAM1S,EAAKqH,GAAK,aAAekI,KAGzE1S,KAAKoa,gBAAgB9F,YAChB+F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,SAACuE,GAAS,OAAAvP,EAAKqX,YAAY9H,MAK7CyH,GAAAja,UAAAua,YAAA,WACIza,KAAKua,WAAWjZ,OAChBtB,KAAKua,WAAWG,YAIpBlb,OAAAuT,eAAIoH,GAAAja,UAAA,eAAY,KAAhB,WACI,OAAO0U,GAAOC,WAAWzB,uCAI7B5T,OAAAuT,eAAIoH,GAAAja,UAAA,cAAW,KAAf,WACI,OAAOF,KAAK2a,8CAIhBR,GAAAja,UAAAsa,YAAA,SAAYI,EAAuBrS,GAC3BA,GACAA,EAAMoN,kBAEV3V,KAAK6a,cAAgBD,EAAgB5a,KAAK8a,YAC1C9a,KAAK+a,aAAanT,KAAK5H,KAAK6a,gBAIhCV,GAAAja,UAAA8a,sBAAA,SAAsBzS,EAAOmK,GAC1B1S,KAAKoa,gBAAgBjG,iBAAiB5L,EAAOmK,IAIhDyH,GAAAja,UAAA2V,aAAA,SAAaqB,OACHC,EAA8BnX,KAAKoX,KAAK1P,cAAc2P,cAAcH,GACtEC,GACAA,EAAeG,SAKvB9X,OAAAuT,eAAIoH,GAAAja,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKkT,aAAazB,8EA/FhChN,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,yBACVa,SAAA,wuBAEAG,cAAeC,EAAAA,kBAAkBC,KACjCJ,KAAM,CACFgF,YAAa,gFAd+C7F,EAAAA,kBAA+BgG,EAAAA,yBAE1FgH,UAGA6C,mCAqBJ7Q,EAAAA,6BAIAA,EAAAA,mCAIAA,EAAAA,4BAIAwH,EAAAA,UAmEL6P,IAhEI,SAAAA,GACY/C,EACA9P,EACA4L,EACAkH,GAHApa,KAAAoX,KAAAA,EACApX,KAAAsH,MAAAA,EACAtH,KAAAkT,aAAAA,EACAlT,KAAAoa,gBAAAA,EAzBKpa,KAAA2a,aAAuB,EAGvB3a,KAAAua,WAA4B,IAAI/T,EAAAA,QAgBxCxG,KAAA+a,aAAqC,IAAInQ,EAAAA,aChCtD,IAAAqQ,IAoDIA,GAAA/a,UAAA+W,mBAAA,WACQjX,KAAKkb,mBACLlb,KAAK6V,aAAa7V,KAAKkb,kBACvBlb,KAAKkb,iBAAmB,OAKhCD,GAAA/a,UAAA2C,SAAA,WAAA,IAAAM,EAAAnD,KACIA,KAAKmb,gBAAkBnb,KAAKob,aAC5Bpb,KAAKqb,oBAELrb,KAAKoa,gBAAgB5F,gBAChB6F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,SAACuE,GACPvP,EAAK+X,iBAAmB/X,EAAKqH,GAAK,YAAckI,EAChDvP,EAAK0S,aAAa1S,EAAK+X,oBAG/Blb,KAAKoa,gBAAgB1F,oBAAsB1U,KAAK0U,oBAEhD1U,KAAKoa,gBAAgB9F,YAChB+F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,SAACuE,GAAS,OAAAvP,EAAKmY,WAAWnY,EAAKoY,iBAAiB7I,MAG9D1S,KAAKoa,gBAAgB7F,oBAChB8F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,WAAO,OAAAhL,EAAKqY,yBAG1Bxb,KAAKoa,gBAAgB3F,kBAChB4F,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,WAAO,OAAAhL,EAAKsY,sBAK9BR,GAAA/a,UAAAua,YAAA,WACIza,KAAKua,WAAWjZ,OAChBtB,KAAKua,WAAWG,YASZO,GAAA/a,UAAAwb,cAAR,WAAA,IAAAvY,EAAAnD,KACU2b,EAAuB3b,KAAKub,iBAAiBzC,KAAI,SAACjF,GAAQ,OAAAA,IAAS1Q,EAAKiY,eAC9E,GAAIO,EACA,OAAOA,MAGLC,EAAsB5b,KAAKub,iBAAiBzC,KAAI,SAACjF,GAAQ,OAAAA,IAAS1Q,EAAKyY,cAC7E,OAAIA,GAIG5b,KAAKub,iBAAiB,IAIjCN,GAAA/a,UAAA2b,qBAAA,SAAqBtT,EAAOmK,GACxB1S,KAAKoa,gBAAgBjG,iBAAiB5L,EAAOmK,IAIjDuI,GAAA/a,UAAAub,iBAAA,WACIzb,KAAKmb,iBAAmB,GACxBnb,KAAKqb,qBAITJ,GAAA/a,UAAAsb,qBAAA,WACIxb,KAAKmb,iBAAmB,GACxBnb,KAAKqb,qBAITJ,GAAA/a,UAAA2V,aAAA,SAAaqB,GAC2BlX,KAAKoX,KAAK1P,cAAc2P,cAAc,IAAMH,IAE5ElX,KAAKoX,KAAK1P,cAAc2P,cAAc,IAAMH,GAAiBI,SAKrE2D,GAAA/a,UAAAob,WAAA,SAAWK,EAAsBpT,GACzBA,GACAA,EAAMoN,kBAEV3V,KAAKob,aAAeO,EACpB3b,KAAK8b,YAAYlU,KAAK5H,KAAKob,eAIvBH,GAAA/a,UAAAmb,kBAAR,WAEIrb,KAAKub,iBAAmB,GACxB,IAAK,IAAIzE,EAAI,EAAGA,EAFqB,KAEOA,EACxC9W,KAAKub,iBAAiB/Z,KAAKxB,KAAKmb,gBAAkBrE,GAEtD9W,KAAK+b,WAAa/b,KAAK0b,sCA5J9BjX,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,wBACVa,SAAA,ksBAEAG,cAAeC,EAAAA,kBAAkBC,KACjCJ,KAAM,CACFgF,YAAa,+EAbuD7F,EAAAA,kBAGnE6P,mCAoCJ7Q,EAAAA,mCAIAA,EAAAA,4BAIAA,EAAAA,2BAIAwH,EAAAA,UAkHL2Q,IA9GI,SAAAA,GAAoB7D,EAA0BgD,GAA1Bpa,KAAAoX,KAAAA,EAA0BpX,KAAAoa,gBAAAA,EA5B9Cpa,KAAA4b,YAAsBhH,GAAOC,WAAWhB,KAGxC7T,KAAAmb,gBAA0Bnb,KAAK4b,YAGd5b,KAAAua,WAA4B,IAAI/T,EAAAA,QAmBxCxG,KAAA8b,YAAoC,IAAIlR,EAAAA,iBChCjDoR,GAA2B,EAqB/BC,IAkKIA,GAAA/b,UAAA2C,SAAA,WACI7C,KAAKkc,wBAOTD,GAAA/b,UAAAic,WAAA,SAAWpD,OACHqD,GAAiB,EACjBrD,IACqB,WAAjB/Y,KAAKgW,SAGLoG,GAFArD,EAAQ,GAES9D,eACjBjV,KAAKiW,aAAe8C,GAEP9D,eACTjV,KAAKkc,wBAEe,UAAjBlc,KAAKgW,WACZ+C,EAAQ,GAEMzC,OAAUyC,EAASxC,MAC7B6F,GAAQ,GAERrD,EAASzC,QAAUyC,EAASzC,MAAMrB,gBAClCmH,GAAQ,GAERrD,EAASxC,MAAQwC,EAASxC,IAAItB,gBAC9BmH,GAAQ,GAEZpc,KAAKqW,kBAAoB,CAAEC,MAAOyC,EAASzC,MAAOC,IAAKwC,EAASxC,KAC5D6F,GACApc,KAAKkc,yBAIjBlc,KAAKqc,kBAAkBzU,KAAKwU,IAOhCH,GAAA/b,UAAAoc,SAAA,SAASC,GAGL,OAAOvc,KAAKwc,eAAiB,KAAO,CAChCC,eAAgB,CACZL,OAAO,KAMnBH,GAAA/b,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBV,GAAA/b,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBV,GAAA/b,UAAA6c,iBAAA,SAAkBC,KAOXf,GAAA/b,UAAA+c,uBAAP,SAA8BjK,GAC1BhT,KAAKgT,WAAaA,EAClBhT,KAAKwT,iBAAiB5L,KAAKoL,IAO/BiJ,GAAA/b,UAAAgd,oBAAA,SAAoB/L,GAChBnR,KAAKiW,aAAe9E,EACpBnR,KAAK4c,SAASzL,GACdnR,KAAK8c,YACL9c,KAAKkW,mBAAmBtO,KAAKuJ,GAC7BnR,KAAKmd,cAAcvV,QAOhBqU,GAAA/b,UAAAkd,yBAAP,SAAgCC,GACxBA,IACArd,KAAKqW,kBAAoB,CAAEC,MAAO+G,EAAM/G,MAAOC,IAAK8G,EAAM9G,IAAM8G,EAAM9G,IAAM8G,EAAM/G,OAClFtW,KAAKwW,wBAAwB5O,KAAK5H,KAAKqW,mBACvCrW,KAAK4c,SAAS5c,KAAKqW,mBACnBrW,KAAK8c,YACL9c,KAAKmd,cAAcvV,SAKpBqU,GAAA/b,UAAAod,qBAAP,WACI,OAAQtd,KAAKgT,YACT,IAAK,MACDhT,KAAKud,mBACL,MACJ,IAAK,QACDvd,KAAKwd,kBACL,MACJ,IAAK,OACDxd,KAAKyd,sBAGbzd,KAAK8c,aAIFb,GAAA/b,UAAAwd,yBAAP,WACI,OAAQ1d,KAAKgT,YACT,IAAK,MACDhT,KAAK2d,uBACL,MACJ,IAAK,QACD3d,KAAK4d,sBACL,MACJ,IAAK,OACD5d,KAAK6d,0BAGb7d,KAAK8c,aAIFb,GAAA/b,UAAAqd,iBAAP,WAC0C,KAAlCvd,KAAKmT,mBAAmBC,MACxBpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAO,EAAGT,MAAO,GAE3EpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAMT,MAAOpT,KAAKmT,mBAAmBC,MAAQ,IAKxG6I,GAAA/b,UAAAyd,qBAAP,WACQ3d,KAAKmT,mBAAmBC,OAAS,EACjCpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAO,EAAGT,MAAO,IAE3EpT,KAAKmT,mBAAqB,CAAEU,KAAM7T,KAAKmT,mBAAmBU,KAAMT,MAAOpT,KAAKmT,mBAAmBC,MAAQ,IAKxG6I,GAAA/b,UAAAsd,gBAAP,WACIxd,KAAKmT,mBAAqB,CAAEC,MAAOpT,KAAKmT,mBAAmBC,MAAOS,KAAM7T,KAAKmT,mBAAmBU,KAAO,IAIpGoI,GAAA/b,UAAA0d,oBAAP,WACI5d,KAAKmT,mBAAqB,CAAEC,MAAOpT,KAAKmT,mBAAmBC,MAAOS,KAAM7T,KAAKmT,mBAAmBU,KAAO,IAIpGoI,GAAA/b,UAAAud,oBAAP,WACIzd,KAAK8d,kBAAkBrC,oBAIpBQ,GAAA/b,UAAA2d,wBAAP,WACI7d,KAAK8d,kBAAkBtC,wBAMpBS,GAAA/b,UAAA6d,sBAAP,SAA6BpF,GACzB3Y,KAAKmT,mBAAqB,CAAEC,MAAOuF,EAAOvF,MAAOS,KAAM8E,EAAO9E,OAO3DoI,GAAA/b,UAAA8d,sBAAP,SAA6B5K,GACzBpT,KAAKmT,mBAAqB,CAAEC,MAAOA,EAAOS,KAAM7T,KAAKmT,mBAAmBU,MACxE7T,KAAKgT,WAAa,MAClBhT,KAAKwT,iBAAiB5L,KAAK5H,KAAKgT,YAChChT,KAAKie,kBAAkB1W,gBACvBvH,KAAKke,iBAAiB3G,kBAGnB0E,GAAA/b,UAAAyb,aAAP,SAAoBP,GAChBpb,KAAKgT,WAAa,MAClBhT,KAAKmT,mBAAmBU,KAAOuH,EAC/Bpb,KAAKie,kBAAkB1W,gBACvBvH,KAAKke,iBAAiB3G,kBAInB0E,GAAA/b,UAAAsc,aAAP,WACI,MAAqB,WAAjBxc,KAAKgW,QACEhW,KAAKiW,cACRjW,KAAKiW,wBAAwBrB,IAC7B5U,KAAKiW,aAAahB,cAEfjV,KAAKqW,mBAEJrW,KAAKqW,kBAAkBC,OACvBtW,KAAKqW,kBAAkBC,iBAAiB1B,IACxC5U,KAAKqW,kBAAkBC,MAAMrB,eAE7BjV,KAAKqW,kBAAkBE,KACvBvW,KAAKqW,kBAAkBE,eAAe3B,IACtC5U,KAAKqW,kBAAkBC,MAAMrB,eAUrCgH,GAAA/b,UAAAgc,qBAAR,WACI,GAAqB,WAAjBlc,KAAKgW,SAAwBhW,KAAKiW,cAAgBjW,KAAKiW,aAAa7C,OAASpT,KAAKiW,aAAapC,KAC/F7T,KAAKmT,mBAAqB,CAAEC,MAAOpT,KAAKiW,aAAa7C,MAAOS,KAAM7T,KAAKiW,aAAapC,WACjF,GAAI7T,KAAKqW,mBAAqBrW,KAAKqW,kBAAkBC,MACxDtW,KAAKmT,mBAAqB,CACtBC,MAAOpT,KAAKqW,kBAAkBC,MAAMlD,MACpCS,KAAM7T,KAAKqW,kBAAkBC,MAAMzC,WAEpC,GAAI7T,KAAKqW,mBAAqBrW,KAAKqW,kBAAkBE,IACxDvW,KAAKmT,mBAAqB,CACtBC,MAAOpT,KAAKqW,kBAAkBE,IAAInD,MAClCS,KAAM7T,KAAKqW,kBAAkBE,IAAI1C,UAElC,KACGiB,EAAWF,GAAOC,WACxB7U,KAAKmT,mBAAqB,CAAEC,MAAO0B,EAAS1B,MAAOS,KAAMiB,EAASjB,6BAlZ7EpP,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,cACVa,SAAA,w9EAEAG,cAAeC,EAAAA,kBAAkBC,KACjCgK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAArC,KAC9BsC,OAAO,GAEX,CACIJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAArC,KAC9BsC,OAAO,IAGf5Z,KAAM,CACF8Z,SAAU,cACV9U,YAAa,6UAhDZmH,UAXLhH,EAAAA,gEAiECK,EAAAA,UAASvG,KAAA,CAAC6R,+BAGVtL,EAAAA,UAASvG,KAAA,CAACqX,6BAGVlQ,EAAAA,YAAWnH,KAAA,CAAC,qDAIZmH,EAAAA,YAAWnH,KAAA,CAAC,oDAOZd,EAAAA,iCAIAA,EAAAA,0BAIAA,EAAAA,iCAIAA,EAAAA,uBAIAA,EAAAA,kBAIAA,EAAAA,gCAIAwH,EAAAA,mCAIAA,EAAAA,wCAIAA,EAAAA,kCAIAA,EAAAA,8BAIAA,EAAAA,gCAeAxH,EAAAA,yCASAA,EAAAA,uCASAA,EAAAA,uCASAA,EAAAA,qCASAA,EAAAA,6BASAA,EAAAA,mCAMAA,EAAAA,SAkQLmZ,IA1PI,SAAAA,GACW/I,EACC+K,GAFZ,IAAA9a,EAAAnD,KACWA,KAAAkT,aAAAA,EACClT,KAAAie,kBAAAA,EA9HZje,KAAA0e,iBAA2B,EAI3B1e,KAAA2e,wBAAkC,EAO3B3e,KAAAiW,aAAuBrB,GAAOC,WAQ9B7U,KAAAgT,WAA6B,MAI7BhT,KAAAkZ,kBAAgC,EAIhClZ,KAAAgW,QAAwB,SAI/BhW,KAAAwK,GAAK,eAAiBwR,KAINhc,KAAAwT,iBAAiD,IAAI5I,EAAAA,aAIrD5K,KAAAkW,mBAA2C,IAAItL,EAAAA,aAI/C5K,KAAAwW,wBAAqD,IAAI5L,EAAAA,aAIzD5K,KAAAqc,kBAA2C,IAAIzR,EAAAA,aAI/C5K,KAAAmd,cAAoC,IAAIvS,EAAAA,aAGxD5K,KAAA4c,SAAQ,aAIR5c,KAAA8c,UAAS,aAQT9c,KAAAsZ,gBAAe,SAAYX,GACvB,OAAO,GAQX3Y,KAAA6Z,0BAAyB,SAAYlB,GACjC,OAAO,GAQX3Y,KAAA2Z,wBAAuB,SAAYhB,GAC/B,OAAO,GAQX3Y,KAAA8Z,wBAAuB,SAAYnB,GAC/B,OAAO,GAQX3Y,KAAA4Z,sBAAqB,SAAYjB,GAC7B,OAAO,GAQX3Y,KAAAuZ,cAAa,SAAYZ,GACrB,OAAO,GAKX3Y,KAAA4e,oBAAmB,WACX5R,SAAS6R,eAAe1b,EAAKqH,GAAK,gBAClCwC,SAAS6R,eAAe1b,EAAKqH,GAAK,eAAe8M,SChM7D,IAAAwH,yBAWC9a,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC6X,GAAmBnJ,GAC9B2C,GAA0B0E,GAA4Bc,IAC1DhX,QAAS,CAACC,EAAAA,aAAcc,GACxBb,QAAS,CAAC8X,GAAmBxG,GACzB3C,GAAyBmI,GAA2Bd,IACxDpL,UAAW,CAAC4E,QAEamL,IAR7B,SAAAA,MCMA,IAAAC,IA6CIA,GAAA7e,UAAA6G,gBAAA,WACQ/G,KAAK2N,mBAAmBxG,EAAAA,YACxBnH,KAAKoH,iBAAiBpH,KAAK2N,SAE3B3N,KAAKqJ,cAAgBrJ,KAAK2N,QAE9B3N,KAAKgf,iBACLhf,KAAKif,QAAQrX,OACb5H,KAAKsH,MAAMC,iBAGfwX,GAAA7e,UAAAua,YAAA,WACQza,KAAKkf,WACLlf,KAAKkf,UAAUC,cAIfJ,GAAA7e,UAAAkH,iBAAR,SAAyBuG,GACrB3N,KAAK6I,aAAaM,YACZT,EAAU,CACZC,UAAW3I,KAAK0I,SAEpB1I,KAAK4I,aAAe5I,KAAK6I,aAAaC,mBAAmB6E,EAASjF,IAG9DqW,GAAA7e,UAAA8e,eAAR,WACI,GAAIhf,KAAKof,aACL,IACIpf,KAAKkf,UAAYA,EAAUlf,KAAKyH,MAAMC,cAAe,CACjD2X,yBAAyB,EACzBC,mBAAmB,EACnBC,aAAcvf,KAAKyH,MAAMC,gBAE7B1H,KAAKkf,UAAUM,WACjB,MAAOpe,GACLqe,QAAQC,KAAK,+EAMzBX,GAAA7e,UAAAyf,cADA,WAEQ3f,KAAK6I,cAAgB7I,KAAK0I,QAAQkX,QAAU5f,KAAK6f,kBACjD7f,KAAK0I,QAAQoX,8BAxFxBrb,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,uBACVa,SAAU,sJAOVC,KAAM,CACFhC,QAAO,iDACPod,SAAY,MAEhBlb,cAAeC,EAAAA,kBAAkBC,4LA3BtBjB,EAAAA,kBADXgG,EAAAA,4DAgCCK,EAAAA,UAASvG,KAAA,CAAC,KAAM,CAAEwG,KAAMC,EAAAA,oCAGxBU,EAAAA,YAAWnH,KAAA,CAAC,uDAGZ0G,EAAAA,8BA8DAC,EAAAA,aAAY3G,KAAA,CAAC,qBAMlBmb,IAlDI,SAAAA,GAAoBtX,EACAH,GADAtH,KAAAyH,MAAAA,EACAzH,KAAAsH,MAAAA,EArBpBtH,KAAAggB,SAAmB,EAGnBhgB,KAAAif,QAAU,IAAIrU,EAAAA,aChBlB,IAAAqV,IAyFIA,GAAA/f,UAAA2C,SAAA,WACQ7C,KAAK4f,QACL5f,KAAK8G,OAGT9G,KAAKkgB,qBACLlgB,KAAKmgB,gBAELngB,KAAKogB,sBACLpgB,KAAKif,SAAU,GAInBgB,GAAA/f,UAAAua,YAAA,WACQza,KAAKqgB,QACLrgB,KAAKqgB,OAAOjT,UAGZpN,KAAK6I,cACL7I,KAAKsgB,mBAGTtgB,KAAKugB,2BAITN,GAAA/f,UAAAsC,YAAA,SAAYge,GAAZ,IAAArd,EAAAnD,KACSA,KAAKif,UAINuB,EAAQC,UACRxY,WAAU,WACN9E,EAAKod,0BACLpd,EAAKid,wBAITI,EAAQZ,SACJY,EAAQZ,OAAOc,aACfzY,WAAU,WACN9E,EAAKyc,QAAS,EACdzc,EAAK2D,MAAK,KAGdmB,WAAU,WACN9E,EAAKyc,QAAS,EACdzc,EAAK2c,OAAM,MAKnBU,EAAQG,WACR1Y,WAAU,WACN9E,EAAKgd,kBAITK,EAAQI,aACR3Y,WAAU,WACN9E,EAAK+c,yBAQVD,GAAA/f,UAAA2gB,OAAP,SAAcC,QAAA,IAAAA,IAAAA,GAAA,GACN9gB,KAAK4f,OACL5f,KAAK8f,MAAMgB,GAEX9gB,KAAK8G,KAAKga,IAOXb,GAAA/f,UAAA4G,KAAP,SAAYga,QAAA,IAAAA,IAAAA,GAAA,GACH9gB,KAAK4f,QAAW5f,KAAK+V,WACtB/V,KAAK+gB,kBACL/gB,KAAK4f,QAAS,EAEVkB,GACA9gB,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAQjCK,GAAA/f,UAAA4f,MAAP,SAAagB,QAAA,IAAAA,IAAAA,GAAA,GACL9gB,KAAK4f,SACL5f,KAAKsgB,mBACLtgB,KAAK4f,QAAS,EAEVkB,GACA9gB,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAQjCK,GAAA/f,UAAA+gB,aAAP,WACQjhB,KAAKqgB,QACLrgB,KAAKqgB,OAAOa,kBAIZjB,GAAA/f,UAAA6gB,gBAAR,WAAA,IAAA5d,EAAAnD,KACI,IAAIA,KAAK6I,aAAT,KAIMsY,EAAUnhB,KAAKohB,SAASlY,wBAAwB6V,IACtD/e,KAAK6I,aAAesY,EAAQhhB,OAAOH,KAAKqM,WAGxCrM,KAAK6I,aAAa+D,SAASlE,QAAU1I,MAChC6I,aAAa+D,SAASe,QAAU3N,KAAK2N,QAC1C3N,KAAK6I,aAAa+D,SAASwS,aAAepf,KAAKof,aAC/Cpf,KAAK6I,aAAa+D,SAASoT,QAAUhgB,KAAKggB,QAC1ChgB,KAAK6I,aAAa+D,SAASiT,iBAAmB7f,KAAK6f,iBAEnD7f,KAAKsM,OAAOC,WAAWvM,KAAK6I,aAAa2D,cACnC6U,EAAWrhB,KAAK6I,aAAa+D,SAASqS,QAAQ9Q,UAAS,WACzDhL,EAAKme,eACLD,EAAShT,gBAGPkT,EAAevhB,KAAK6I,aAAqB,SAA0BiE,UAAU,GAE7D,SAAlB9M,KAAKwhB,SACLxU,SAASC,KAAKF,YAAYwU,GAE1BvhB,KAAKwhB,SAASzU,YAAYwU,KAK1BtB,GAAA/f,UAAAqgB,wBAAR,WACQvgB,KAAKyhB,UAAmC,EAAvBzhB,KAAKyhB,SAAS9gB,SAC/BX,KAAKyhB,SAAShe,QAAO,SAAC8E,GAClBA,MAEJvI,KAAKyhB,SAAW,KAIhBxB,GAAA/f,UAAAkgB,oBAAR,WAAA,IAAAjd,EAAAnD,KACQA,KAAKygB,UAAmC,EAAvBzgB,KAAKygB,SAAS9f,QAC/BX,KAAKygB,SAAShd,QAAO,SAACiC,GAClBvC,EAAKse,SAASjgB,KAAK2B,EAAKue,SAASC,OAAOxe,EAAKsE,MAAMC,cAAehC,EAAO,WACrEvC,EAAK0d,eAMbZ,GAAA/f,UAAAogB,iBAAR,WACQtgB,KAAK6I,eACL7I,KAAKsM,OAAOa,WAAWnN,KAAK6I,aAAa2D,UACzCxM,KAAK6I,aAAauE,UAClBpN,KAAK6I,aAAe,MAGpB7I,KAAKqgB,SACLrgB,KAAKqgB,OAAOjT,UACZpN,KAAKqgB,OAAS,OAIdJ,GAAA/f,UAAAohB,aAAR,WACIthB,KAAKqgB,OAAS,IAAIuB,EACd5hB,KAAKyH,MAAmB,cACxBzH,KAAK6I,aAAamF,SAAsB,cACxChO,KAAKuD,UAIL0c,GAAA/f,UAAA2hB,cAAR,SAAsBhU,GAIlB,OAHAA,EAAKiU,QAAQzB,OAAO0B,KAAOlU,EAAKiU,QAAQE,UAAUD,KAClDlU,EAAKiU,QAAQzB,OAAO4B,MAAQpU,EAAKiU,QAAQE,UAAUC,MACnDpU,EAAKiU,QAAQzB,OAAOnV,MAAQ2C,EAAKqU,OAAOhX,MAAQ2C,EAAKiU,QAAQE,UAAU9W,MAChE2C,GAGHoS,GAAA/f,UAAAiiB,iBAAR,SAAyBtU,GAIrB,OAHAA,EAAKiU,QAAQzB,OAAO0B,KAAOlU,EAAKiU,QAAQE,UAAUD,KAClDlU,EAAKiU,QAAQzB,OAAO4B,MAAQpU,EAAKiU,QAAQE,UAAUC,MACnDpU,EAAKqU,OAAO/W,SAAW0C,EAAKiU,QAAQE,UAAU9W,MAAQ,KAC/C2C,GAGHoS,GAAA/f,UAAAigB,cAAR,WACQngB,KAAK2gB,YACD3gB,KAAKuD,QACLvD,KAAKuD,QAAQod,UAAY3gB,KAAK2gB,UAE9B3gB,KAAKuD,QAAU,CAACod,UAAW3gB,KAAK2gB,aAKpCV,GAAA/f,UAAAggB,mBAAR,WACQlgB,KAAKoiB,kBACDpiB,KAAKuD,SAAWvD,KAAKuD,QAAQ8e,UAC7BriB,KAAKuD,QAAQ8e,UAAUR,cAAgB,CACnCS,SAAS,EACT3F,GAA6B,UAAzB3c,KAAKoiB,gBAA8BpiB,KAAK6hB,cAAgB7hB,KAAKmiB,iBACjEI,MAAO,KAGXviB,KAAKuD,QAAU,CACX8e,UAAW,CACPR,cAAe,CACXS,SAAS,EACT3F,GAA6B,UAAzB3c,KAAKoiB,gBAA8BpiB,KAAK6hB,cAAgB7hB,KAAKmiB,iBACjEI,MAAO,SAU/BtC,GAAA/f,UAAAsiB,aADA,SACaja,GACLvI,KAAK6I,cACL7I,KAAK4f,QACL5f,KAAKyiB,qBACLla,EAAMma,SAAW1iB,KAAKyH,MAAMC,gBAC3B1H,KAAKyH,MAAMC,cAAcib,SAASpa,EAAMma,UACxC1iB,KAAK6I,aAAamF,SAAStG,cAAcib,SAASpa,EAAMma,UACzDna,EAAM8L,iBACN9L,EAAMoN,kBACN3V,KAAK8f,+BA1UhBnc,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4DApBVC,EAAAA,kBAJAgG,EAAAA,yBACAC,EAAAA,gCAIAwD,EAAAA,gBANAD,EAAAA,sBAMuDsV,EAAAA,+CAwBtD9f,EAAAA,MAAKc,KAAA,CAAC,6BAINd,EAAAA,wBAKAA,EAAAA,uBAIAA,EAAAA,yBAKAA,EAAAA,4BAIAA,EAAAA,gCAIAA,EAAAA,wBAIAA,EAAAA,mCAIAA,EAAAA,wBAIAA,EAAAA,uBAKAA,EAAAA,+BAkBAA,EAAAA,4BAIAwH,EAAAA,6BAyPAC,EAAAA,aAAY3G,KAAA,CAAC,iBAAkB,CAAC,cAarCqc,IA7PI,SAAAA,GAAoBxY,EACAH,EACA8Z,EACA/U,EACAC,EACAoV,GALA1hB,KAAAyH,MAAAA,EACAzH,KAAAsH,MAAAA,EACAtH,KAAAohB,SAAAA,EACAphB,KAAAqM,SAAAA,EACArM,KAAAsM,OAAAA,EACAtM,KAAA0hB,SAAAA,EA1EpB1hB,KAAA4f,QAAkB,EAKlB5f,KAAAygB,SAAqB,CAAC,SAItBzgB,KAAAggB,SAAmB,EASnBhgB,KAAAof,cAAwB,EAIxBpf,KAAA6f,kBAA4B,EAI5B7f,KAAA+V,UAAoB,EAIpB/V,KAAAyiB,qBAA+B,EAI/BziB,KAAAwhB,SAAiC,OAKjCxhB,KAAAuD,QAAyB,CACrBod,UAAW,eACX0B,UAAW,CACPQ,gBAAiB,CACbP,SAAS,EACTQ,qBAAqB,EACrBC,kBAAmB,kBAgB/B/iB,KAAAghB,aAAsC,IAAIpW,EAAAA,aAIlC5K,KAAAyhB,SAAuB,GACvBzhB,KAAAif,SAAmB,EC1F/B,IAAA+D,yBAACve,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,sBACVc,KAAM,CACFhC,QAAO,eAEX+B,SAAA,msBACAG,cAAeC,EAAAA,kBAAkBC,2CAIhCjC,EAAAA,wBAIAA,EAAAA,qBAIAA,EAAAA,uBAIAA,EAAAA,uBAIAA,EAAAA,uBAIAA,EAAAA,sBAIAA,EAAAA,SAGLkgB,IArCA,SAAAA,KAWIhjB,KAAAggB,SAAmB,EAInBhgB,KAAA+V,UAAoB,EAQpB/V,KAAAijB,QAAkB,GAIlBjjB,KAAAoD,SAAmB,EAInBpD,KAAAkjB,SAAmB,EAInBljB,KAAA4f,QAAkB,MCpClBuD,GAA0B,EAQ9BC,IA8FWA,GAAAljB,UAAA2gB,OAAP,WACQ7gB,KAAK4f,OACL5f,KAAK8f,QAEL9f,KAAK8G,QAONsc,GAAAljB,UAAA4f,MAAP,WACQ9f,KAAK4f,SACL5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAO7BwD,GAAAljB,UAAA4G,KAAP,WACS9G,KAAK4f,SACN5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAO7BwD,GAAAljB,UAAAmjB,cAAP,WACIrjB,KAAKsjB,aAAarC,gBAMfmC,GAAAljB,UAAAqjB,YAAP,SAAmB3D,GACf5f,KAAKghB,aAAapZ,KAAKgY,GACvB5f,KAAKwjB,qBAAqB5D,IAOtBwD,GAAAljB,UAAAsjB,qBAAR,SAA6B5D,GACrB5f,KAAKyjB,oBACLzjB,KAAKyjB,kBAAkB7D,OAASA,yBA/I3Cnb,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,aACVa,SAAA,gqCAEAC,KAAM,CACF+e,4BAA6B,OAC7B/Z,YAAa,MAEjB9E,cAAeC,EAAAA,kBAAkBC,mKAKhCoF,EAAAA,UAASvG,KAAA,CAACqc,+BAGV0D,EAAAA,aAAY/f,KAAA,CAACof,qBAGblgB,EAAAA,wBAIAA,EAAAA,0BAIAA,EAAAA,wBAIAA,EAAAA,wBAKAA,EAAAA,yBAKAA,EAAAA,sBAIAA,EAAAA,uBAKAA,EAAAA,4BAaAA,EAAAA,+BASAA,EAAAA,mCAIAA,EAAAA,gCAIAA,EAAAA,4BAIAwH,EAAAA,mBAIAxH,EAAAA,SA2DLsgB,IAnJA,SAAAA,KAoBIpjB,KAAAggB,SAAmB,EAInBhgB,KAAA+V,UAAoB,EAIpB/V,KAAA4jB,YAAsB,EAStB5jB,KAAAygB,SAAqB,CAAC,SAStBzgB,KAAA4f,QAAkB,EAKlB5f,KAAAuD,QAAyB,CACrBod,UAAW,eACX0B,UAAW,CACPQ,gBAAiB,CACbP,SAAS,EACTQ,qBAAqB,EACrBC,kBAAmB,kBAO/B/iB,KAAAof,cAAwB,EAaxBpf,KAAAyiB,qBAA+B,EAI/BziB,KAAA6f,kBAA4B,EAI5B7f,KAAAghB,aAAsC,IAAIpW,EAAAA,aAI1C5K,KAAAwK,GAAa,cAAgB2Y,KCjGjC,IAAAU,yBAACpf,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,SAEC8e,IALtC,SAAAA,MCAA,IAAAC,yBAACrf,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,SAEF+e,IALnC,SAAAA,MCXA,IAAAC,yBAUC/f,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVgf,GACAS,GACAC,GACA7D,GACAlB,GACAiE,IAEJ/e,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACif,GAAkBS,GAAyBC,GAAsB7D,GAAkB+C,IAC7FlU,gBAAiB,CAACiQ,QAEMgF,IAb5B,SAAAA,MCDA,IAAAC,yBAACvf,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,UACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,gIAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,oCAKZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,qCAGjBogB,IAjBA,SAAAA,KASIhkB,KAAAikB,aAAuB,EAMvBjkB,KAAAkkB,WAAqB,ECnBzB,IAAAC,yBAAC1f,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,uIACAG,cAAeC,EAAAA,kBAAkBC,0DAIhCgG,EAAAA,YAAWnH,KAAA,CAAC,wDAIZmH,EAAAA,YAAWnH,KAAA,CAAC,2BAGjBugB,IAdA,SAAAA,KAQInkB,KAAA2e,wBAAkC,EAIlC3e,KAAAokB,kBAA4B,ECZhC,IAAAC,yBAAC1gB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,6DAITkH,EAAAA,YAAWnH,KAAA,CAAC,YAGjBygB,IAVA,SAAAA,KAQIrkB,KAAAskB,aAAe,iBCRnB,IAAAC,yBAAC5gB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,+DAITkH,EAAAA,YAAWnH,KAAA,CAAC,0BAEjB2gB,IATA,SAAAA,KAQIvkB,KAAAwkB,iBAA2B,ECP/B,IAAAC,IAcWA,GAAAvkB,UAAAoX,MAAP,WACItX,KAAK0kB,OAAOhd,cAAc4P,SAGvBmN,GAAAvkB,UAAAykB,MAAP,WACI3kB,KAAK0kB,OAAOhd,cAAcid,8BAnBjChhB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,+DATMC,EAAAA,wDAcfiH,EAAAA,YAAWnH,KAAA,CAAC,0BAajB6gB,IATI,SAAAA,GAAoBC,GAAA1kB,KAAA0kB,OAAAA,EAHpB1kB,KAAA4kB,iBAA2B,ECV/B,IAAAC,yBAAClhB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,gFAITkH,EAAAA,YAAWnH,KAAA,CAAC,kCAEjBihB,IAPA,SAAAA,KAMI7kB,KAAA8kB,kBAA4B,ECNhC,IAAAC,yBAACphB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,6FAITkH,EAAAA,YAAWnH,KAAA,CAAC,kCAEjBmhB,IAPA,SAAAA,KAMI/kB,KAAAglB,sBAAgC,ECXpC,IAAAC,yBAWCjhB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CACL6f,GACAG,GACAE,GACAE,GACAE,GACAI,GACAE,IAEJ3gB,aAAc,CACV4f,GACAG,GACAE,GACAE,GACAE,GACAI,GACAE,QAGkBE,IArB1B,SAAAA,MCXA,IAAAC,IAQIA,GAAAhlB,UAAAilB,UAAA,SAAU1jB,EAAY2jB,GAClB,OAAOA,EAAU3jB,yBAPxB4jB,EAAAA,KAAIzhB,KAAA,CAAC,CACF0hB,KAAM,oBAQVJ,IATA,SAAAA,MCFA,IAAAK,IAQIA,GAAArlB,UAAAilB,UAAA,SAAU1jB,EAAemC,EAAc4hB,GACnC,QADmC,IAAAA,IAAAA,GAAA,GAC/B5hB,GAAQnC,GAAS+jB,EAAQ,KACnBC,EAAahkB,EAAMikB,cAAcjX,QAAQ7K,EAAK8hB,eACpD,IAAoB,IAAhBD,EAAmB,KACbE,EAAiBlkB,EAAMmkB,OAAOH,EAAY7hB,EAAKjD,QACrD,OAAOc,EAAMokB,QAAQF,EAAgB,WAAaA,EAAiB,cAI3E,OAAOlkB,wBAfd4jB,EAAAA,KAAIzhB,KAAA,CAAC,CACF0hB,KAAM,gBAgBVC,IAjBA,SAAAA,MCFA,IAAAO,yBAKC9hB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACV8gB,GACAK,IAEJphB,QAAS,CACL+gB,GACAK,QAGiBO,IAVzB,SAAAA,MCLA,IAAAC,IA0BIA,GAAA7lB,UAAA8lB,eAAA,SAAezd,EAAsBmK,EAAeuT,GAEhD,IAAIjmB,KAAKkmB,uBAIT,OAAQ3d,EAAM6L,MACV,IAAA,YACQ6R,EAAUtlB,OAAS+R,EAAQ,EAC3BuT,EAAUvT,EAAQ,GAAG4E,QAEjBtX,KAAKmmB,qBACLnmB,KAAKmmB,uBAELF,EAAU,GAAG3O,QAGrB/O,EAAM8L,iBACN,MAEJ,IAAA,UACgB,EAAR3B,EACAuT,EAAUvT,EAAQ,GAAG4E,QAEjBtX,KAAKomB,sBACLpmB,KAAKomB,wBAELH,EAAUA,EAAUtlB,OAAS,GAAG2W,QAGxC/O,EAAM8L,iBACN,MAEJ,IAAA,QAOA,IAAA,QACQ4R,EAAUvT,KACVuT,EAAUvT,GAAOiS,QACjBpc,EAAM8L,0DA9DrB/J,EAAAA,UAoELyb,IAvEA,SAAAA,KAIoB/lB,KAAAqmB,YAA+B,IAAI7f,EAAAA,QAGnDxG,KAAAkmB,wBAAkC,ECyBtC,IAAAI,IAoIIA,GAAApmB,UAAA2C,SAAA,WACQ7C,KAAKumB,iBACLvmB,KAAKwmB,gBAAkBxmB,KAAKumB,gBAEhCvmB,KAAKgf,kBAITsH,GAAApmB,UAAAsC,YAAA,SAAYge,GACJxgB,KAAKumB,iBAAmB/F,EAAQ+F,gBAAkB/F,EAAQiG,cACtDzmB,KAAK0mB,UACL1mB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAK0mB,WAE/D1mB,KAAKwmB,gBAAkBxmB,KAAKumB,iBAKxCD,GAAApmB,UAAAua,YAAA,WACIza,KAAKua,WAAWjZ,OAChBtB,KAAKua,WAAWG,YAIpB4L,GAAApmB,UAAA6G,gBAAA,WAAA,IAAA5D,EAAAnD,KACIA,KAAK4mB,oBAAoBP,YACpBhM,KAAKC,EAAAA,UAAUta,KAAKua,aACpBpM,UAAS,SAACuE,GAAS,OAAAvP,EAAK0jB,mBAAmBnU,KAChD1S,KAAK4mB,oBAAoBR,sBAAqB,WAAS,OAAAjjB,EAAK2jB,mBAAmBpf,cAAc4P,SAC7FtX,KAAK4mB,oBAAoBT,qBAAoB,cAIjDG,GAAApmB,UAAA6mB,sBAAA,SAAsBxe,GACC,UAAfA,EAAM6L,MAAoBpU,KAAKgnB,eAC/BhnB,KAAKgnB,iBACiB,cAAfze,EAAM6L,OACb7L,EAAM8L,iBACFrU,KAAKimB,WAAajmB,KAAKimB,UAAUgB,OACjCjnB,KAAKimB,UAAUgB,MAAM3P,UAMjCgP,GAAApmB,UAAAgnB,oBAAA,SAAoB3e,GACZvI,KAAK0mB,WACL1mB,KAAK0mB,UAAU/lB,QACA,WAAf4H,EAAM6L,MACS,UAAf7L,EAAM6L,MACS,UAAf7L,EAAM6L,OACNpU,KAAK4f,QAAS,EACd5f,KAAKmnB,mBAAmBnnB,KAAK4f,UAKrC0G,GAAApmB,UAAAknB,qBAAA,SAAqB7e,EAAsBmK,GACvC1S,KAAK4mB,oBAAoBZ,eAAezd,EAAOmK,EAAO1S,KAAKimB,UAAUoB,YAIzEf,GAAApmB,UAAA2mB,mBAAA,SAAmBnU,OACT4U,EAAetnB,KAAKwmB,gBAAgB9T,GACtC4U,IACAtnB,KAAKunB,mBAAmBD,GACxBtnB,KAAKqmB,YAAYze,KAAK,CAAElF,KAAM4kB,EAAc5U,MAAOA,MAK3DlT,OAAAuT,eAAIuT,GAAApmB,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwnB,oBAIhB,SAAc/lB,GACVzB,KAAKwnB,eAAiB/lB,EAClBzB,KAAKynB,oBACLznB,KAAK4c,SAAS5c,KAAK0nB,gCAAgCjmB,IAEnDzB,KAAK4c,SAASnb,GAElBzB,KAAK8c,6CAITwJ,GAAApmB,UAAAic,WAAA,SAAW1a,GACHzB,KAAKynB,oBACLznB,KAAKwnB,eAAiBxnB,KAAKolB,UAAU3jB,GAErCzB,KAAKwnB,eAAiB/lB,GAK9B6kB,GAAApmB,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB2J,GAAApmB,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrB2J,GAAApmB,UAAAynB,uBAAA,WACI3nB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAK0mB,YAInEJ,GAAApmB,UAAA0nB,qBAAA,WACQ5nB,KAAKgnB,gBACLhnB,KAAKgnB,kBAKbV,GAAApmB,UAAAinB,mBAAA,SAAmBvH,GACf5f,KAAK4f,OAASA,EACd5f,KAAK8c,YACD8C,EACA5f,KAAKkf,UAAUM,WAEfxf,KAAKkf,UAAUC,cAKvBmH,GAAApmB,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAGZsJ,GAAApmB,UAAA2nB,eAAR,SAAuBC,GACnB,OAAOA,GAGHxB,GAAApmB,UAAA6nB,cAAR,SAAsBC,EAAqBvB,GAA3C,IAAAtjB,EAAAnD,KACUioB,EAAcxB,EAAWyB,oBAC/B,OAAOF,EAAatZ,OAAM,SAAChM,GACvB,GAAIA,EACA,OAAOS,EAAKiiB,UAAU1iB,GAAMwlB,oBAAoBC,SAASF,MAK7D3B,GAAApmB,UAAAqnB,mBAAR,SAA2Ba,GACnBpoB,KAAKqoB,gBACLroB,KAAK4f,QAAS,EACd5f,KAAKmnB,mBAAmBnnB,KAAK4f,SAE7B5f,KAAKsoB,eACLtoB,KAAK0mB,UAAY1mB,KAAKolB,UAAUgD,GAChCpoB,KAAK2nB,2BAILrB,GAAApmB,UAAAwnB,gCAAR,SAAwCa,GAAxC,IAAAplB,EAAAnD,KACI,OAAOA,KAAKumB,eAAezN,KAAI,SAACrX,GAAS,OAAA0B,EAAKiiB,UAAU3jB,KAAW8mB,KAG/DjC,GAAApmB,UAAA8e,eAAR,WACI,IACIhf,KAAKkf,UAAYA,EAAUlf,KAAKyH,MAAMC,cAAe,CACjD2X,yBAAyB,EACzBmJ,yBAAyB,EACzBlJ,mBAAmB,IAEzB,MAAOle,GACLqe,QAAQC,KAAK,8EA7SxBjb,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,cACVa,SAAA,miFAEAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAgI,KAC9B/H,OAAO,GAEXwH,IAEJphB,KAAM,CACF8jB,mCAAoC,OACpCC,4BAA6B,QAEjC7jB,cAAeC,EAAAA,kBAAkBC,sOAjDjCjB,EAAAA,kBAgBKiiB,+CAsCJjjB,EAAAA,wBAKAA,EAAAA,wBAIAA,EAAAA,2BAIAA,EAAAA,qBAIAA,EAAAA,wBAQAA,EAAAA,4BAOAA,EAAAA,yBAIAA,EAAAA,8BAIAA,EAAAA,uBAIAA,EAAAA,4BAIAA,EAAAA,6BAIAA,EAAAA,4BAIAA,EAAAA,mCAMAA,EAAAA,yBAOAA,EAAAA,2BAIAwH,EAAAA,0BAIAqe,EAAAA,aAAY/kB,KAAA,CAAC6gB,gCAIbta,EAAAA,UAASvG,KAAA,CAAC,yBA2Mf0iB,IAnLI,SAAAA,GACY7e,EACAmf,GADA5mB,KAAAyH,MAAAA,EACAzH,KAAA4mB,oBAAAA,EA1GZ5mB,KAAAumB,eAAwB,GAKxBvmB,KAAA2mB,SAAqB3mB,KAAK+nB,cAY1B/nB,KAAAqD,MAAgB,wBAQhBrD,KAAAygB,SAAqB,CAAC,SAWtBzgB,KAAA4oB,UAAoB,QAQpB5oB,KAAAoD,SAAmB,EAInBpD,KAAA6oB,cAAwB,EAIxB7oB,KAAAqoB,eAAyB,EAIzBroB,KAAAsoB,cAAwB,EAMxBtoB,KAAAynB,qBAA+B,EAO/BznB,KAAAolB,UAAsBplB,KAAK6nB,eAIlB7nB,KAAAqmB,YAA0C,IAAIzb,EAAAA,aAWvD5K,KAAAwmB,gBAAyB,GAGzBxmB,KAAA4f,QAAkB,EASD5f,KAAAua,WAA4B,IAAI/T,EAAAA,QAGjDxG,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aChKb,IAAAgM,yBAUC9kB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACkiB,IACfriB,QAAS,CAACC,EAAAA,aAAc6f,GAAegF,EAAAA,YAAa9D,GAAYa,GAAY/hB,GAC5EI,QAAS,CAACmiB,QAEewC,IAL7B,SAAAA,MCPA,SAAgBE,KACZ,OAAO,IAAIC,GAMf,IAAAC,yBAAC7b,EAAAA,WAAUzJ,KAAA,CAAC,CACRwM,WAAY,OACZW,WAAYiY,0FAFhB,SAAAE,KASIlpB,KAAAmpB,eAAyB,MAkB7B,IAAAnmB,GAAAimB,IAC6C/lB,EAAAA,GAD7CF,GAC6CkmB,IAMlCD,GAAA/oB,UAAAkpB,MAAP,SAAa3nB,GACT,GAAIA,EAAO,KACDqmB,EAAMrmB,EAAM4nB,WAAWjnB,MAAM,KAAKoQ,IAAI8W,QAC5C,OAAO,IAAI1U,GAAOkT,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAEtC,OAAO,IAAIlT,GAAO,KAAM,KAAM,OAQ/BqU,GAAA/oB,UAAAqpB,OAAP,SAAcpY,GACV,OAAOA,EAAKiC,MAAQ,IAAMjC,EAAKsB,IAAM,IAAMtB,EAAK0C,2BArBvDxG,EAAAA,aAuBD4b,IAvBA,SAAAA,sDCXA,IAAAO,IAyKWA,GAAAtpB,UAAAupB,+BAAP,SAAsCzW,GAClChT,KAAKwT,iBAAiB5L,KAAKoL,IAIxBwW,GAAAtpB,UAAAwpB,kBAAP,WACsB,WAAd1pB,KAAKwI,MACLxI,KAAKmd,iBAKbqM,GAAAtpB,UAAAypB,aAAA,WACS3pB,KAAK+V,WACN/V,KAAK8c,YACL9c,KAAK4f,QAAS,IAKf4J,GAAAtpB,UAAA0pB,eAAP,WACI5pB,KAAK8c,YACL9c,KAAK4f,QAAU5f,KAAK4f,QAIjB4J,GAAAtpB,UAAAid,cAAP,WACQnd,KAAK4f,SACL5f,KAAK4f,QAAS,IAQf4J,GAAAtpB,UAAA2pB,uBAAP,SAA8B1Y,GACtBA,IACAnR,KAAK8pB,eAAiB9pB,KAAK+pB,YAAYR,OAAOpY,GAC9CnR,KAAKiW,aAAe9E,EACpBnR,KAAKkW,mBAAmBtO,KAAKuJ,GAC7BnR,KAAK4c,SAASzL,KAQfqY,GAAAtpB,UAAA8pB,sBAAP,SAA6B3M,IACrBA,GACE1J,GAAgBI,WAAW/T,KAAKqW,kBAAkBC,MAAO+G,EAAM/G,QAC5D3C,GAAgBI,WAAW/T,KAAKqW,kBAAkBE,IAAK8G,EAAM9G,OAElEvW,KAAK8pB,eAAiB9pB,KAAK+pB,YAAYR,OAAOlM,EAAM/G,OAAStW,KAAK+pB,YAAYZ,eACxEnpB,KAAK+pB,YAAYR,OAAOlM,EAAM9G,KAEpCvW,KAAKqW,kBAAoB,CAAEC,MAAO+G,EAAM/G,MAAOC,IAAK8G,EAAM9G,KAC1DvW,KAAKwW,wBAAwB5O,KAAK5H,KAAKqW,mBACvCrW,KAAK4c,SAAS5c,KAAKqW,qBAQpBmT,GAAAtpB,UAAA+pB,kBAAP,SAAyBC,GACrBlqB,KAAKmqB,iBAAiBD,IAa1BV,GAAAtpB,UAAAoc,SAAA,SAASC,GAGL,OAAOvc,KAAKwc,eAAiB,KAAO,CAChCC,eAAgB,CACZL,OAAO,KAMnBoN,GAAAtpB,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB6M,GAAAtpB,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrB6M,GAAAtpB,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAOpBwM,GAAAtpB,UAAAic,WAAA,SAAWpD,GAEFA,GAIa,WAAd/Y,KAAKwI,MAKLuQ,EAAQ,EACR/Y,KAAKiW,aAAe8C,EAChB/Y,KAAKwc,gBACLxc,KAAK8pB,eAAiB9pB,KAAK+pB,YAAYR,OAAOxQ,GAC9C/Y,KAAKoqB,kBAAkBrM,sBAAsB/d,KAAKiW,eAElDjW,KAAK8pB,eAAiB,KAQ1B/Q,EAAQ,GAEKzC,OACTtW,KAAKqW,kBAAoB,CAAEC,MAAOyC,EAASzC,MAAOC,IAAKwC,EAASxC,KAE5DvW,KAAKwc,gBACLxc,KAAKoqB,kBAAkBrM,sBAAsB/d,KAAKqW,kBAAkBC,OACpEtW,KAAK8pB,eAAiB9pB,KAAK+pB,YAAYR,OAAOxQ,EAASzC,OACnDtW,KAAK+pB,YAAYZ,eAAiBnpB,KAAK+pB,YAAYR,OAAOxQ,EAASxC,MAEvEvW,KAAK8pB,eAAiB,IAG1B9pB,KAAK8pB,eAAiB,GAG9B9pB,KAAKqqB,oBAAsBrqB,KAAKwc,gBAtC5Bxc,KAAK8pB,eAAiB,IA8C9BN,GAAAtpB,UAAAiqB,iBAAA,SAAiBhZ,GAEb,GAAkB,WAAdnR,KAAKwI,KAAmB,KAElBmQ,EAAS3Y,KAAK+pB,YAAYX,MAAMjY,GAMjCwC,GAAgBI,WAAW4E,EAAQ3Y,KAAKiW,gBACzCjW,KAAKqqB,oBAAsB1R,EAAO1D,cAClCjV,KAAKiW,aAAe0C,EACpB3Y,KAAK4c,SAAS5c,KAAKiW,cACnBjW,KAAKkW,mBAAmBtO,KAAK5H,KAAKiW,cAG7BjW,KAAKqqB,oBACNrqB,KAAKoqB,kBAAkBrM,sBAAsBpF,QAMlD,KACG2R,EAAenZ,EAAK/O,MAAMpC,KAAK+pB,YAAYZ,gBAC3CoB,EAAYvqB,KAAK+pB,YAAYX,MAAMkB,EAAa,IAChDE,EAAaxqB,KAAK+pB,YAAYX,MAAMkB,EAAa,IAMlD3W,GAAgBI,WAAWwW,EAAWvqB,KAAKqW,kBAAkBC,QAC7D3C,GAAgBI,WAAWyW,EAAYxqB,KAAKqW,kBAAkBE,OAE/DvW,KAAKqqB,oBAAsBE,EAAUtV,gBAAkBuV,EAAWvV,cAG7DsV,EAAUpV,eAAiBqV,EAAWrV,gBAAmBqV,EAAWvV,cACrEjV,KAAKqW,kBAAoB,CAAEC,MAAOkU,EAAYjU,IAAKgU,GAEnDvqB,KAAKqW,kBAAoB,CAAEC,MAAOiU,EAAWhU,IAAKiU,GAGtDxqB,KAAKwW,wBAAwB5O,KAAK5H,KAAKqW,mBACvCrW,KAAK4c,SAAS,CAAEtG,MAAOtW,KAAKqW,kBAAkBC,MAAOC,IAAKvW,KAAKqW,kBAAkBE,MAG5EvW,KAAKqqB,oBACNrqB,KAAKoqB,kBAAkBrM,sBAAsB/d,KAAKqW,kBAAkBC,SAK3EnF,GAAQnR,KAAKyqB,YACdzqB,KAAKqqB,oBAAqB,IAK3Bb,GAAAtpB,UAAAsc,aAAP,WACI,MAAkB,WAAdxc,KAAKwI,KACExI,KAAKiW,cACRjW,KAAKiW,wBAAwBrB,IAC7B5U,KAAKiW,aAAahB,cAEfjV,KAAKqW,mBAEJrW,KAAKqW,kBAAkBC,OACvBtW,KAAKqW,kBAAkBC,iBAAiB1B,IACxC5U,KAAKqW,kBAAkBC,MAAMrB,eAE7BjV,KAAKqW,kBAAkBE,KACvBvW,KAAKqW,kBAAkBE,eAAe3B,IACtC5U,KAAKqW,kBAAkBE,IAAItB,oCAnZ9CxQ,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,iBACVa,SAAA,6pFAEAC,KAAM,CACF8Z,SAAU,cACViM,yBAA0B,OAC1BC,gCAAiC,QAErC5b,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAkL,KAC9BjL,OAAO,GAEX,CACIJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAkL,KAC9BjL,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,2JAhC5BmkB,kDA8CJ/e,EAAAA,UAASvG,KAAA,CAACqY,kBAGVnZ,EAAAA,2BAIAA,EAAAA,uBAIAA,EAAAA,4BAIAA,EAAAA,iCAIAA,EAAAA,iCAIAA,EAAAA,6BAIAA,EAAAA,8BAIAA,EAAAA,0CAIAA,EAAAA,yBAIAA,EAAAA,0BAIAA,EAAAA,yBAOAA,EAAAA,wBAIAA,EAAAA,kCAIAwH,EAAAA,wCAIAA,EAAAA,iCAIAA,EAAAA,gCAeAxH,EAAAA,yCASAA,EAAAA,uCASAA,EAAAA,uCASAA,EAAAA,qCASAA,EAAAA,6BASAA,EAAAA,SAuPL0mB,IAvKI,SAAAA,GACWO,GAAA/pB,KAAA+pB,YAAAA,EAxNX/pB,KAAA8pB,eAAiB,KAGjB9pB,KAAAqqB,oBAA8B,EAG9BrqB,KAAA4f,QAAkB,EAOlB5f,KAAAwI,KAAqB,SAIrBxI,KAAA4qB,YAAsB,aAItB5qB,KAAAoD,SAAmB,EAQZpD,KAAAqW,kBAAiC,CAAEC,MAAO,KAAMC,IAAK,MAI5DvW,KAAAkZ,kBAAgC,EAIhClZ,KAAA6qB,eAAyB,EAIzB7qB,KAAA8qB,eAAyB,aAIzB9qB,KAAA+qB,2BAAqC,0BAIrC/qB,KAAAyqB,WAAqB,EAIdzqB,KAAAgT,WAA6B,MAOpChT,KAAA2gB,UAAuB,eAQP3gB,KAAAkW,mBAA2C,IAAItL,EAAAA,aAI/C5K,KAAAwW,wBAAqD,IAAI5L,EAAAA,aAIzD5K,KAAAwT,iBAAiD,IAAI5I,EAAAA,aAGrE5K,KAAA4c,SAAQ,SAAS7D,KAIjB/Y,KAAA8c,UAAS,aAQT9c,KAAAsZ,gBAAe,SAAYX,GACvB,OAAO,GAQX3Y,KAAA6Z,0BAAyB,SAAYlB,GACjC,OAAO,GAQX3Y,KAAA2Z,wBAAuB,SAAYhB,GAC/B,OAAO,GAQX3Y,KAAA8Z,wBAAuB,SAAYnB,GAC/B,OAAO,GAQX3Y,KAAA4Z,sBAAqB,SAAYjB,GAC7B,OAAO,GAQX3Y,KAAAuZ,cAAa,SAAYZ,GACrB,OAAO,GC7Lf,IAAAqS,yBASChnB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAColB,IACfvlB,QAAS,CAACC,EAAAA,aAAcc,EAAY+e,GAAejF,GAAgBiK,EAAAA,aACnE5kB,QAAS,CAACqlB,QAEiBwB,IAL/B,SAAAA,MCJA,IAAAC,yBAAC5d,EAAAA,WAAUzJ,KAAA,CAAC,CAACwM,WAAY,qHAAzB,SAAA6a,KAIIjrB,KAAAkrB,mBAA6B,iBAG7BlrB,KAAAmrB,WAAqB,QAGrBnrB,KAAAorB,mBAA6B,iBAG7BprB,KAAAqrB,qBAA+B,mBAG/BrrB,KAAAsrB,aAAuB,UAGvBtrB,KAAAurB,qBAA+B,mBAG/BvrB,KAAAwrB,qBAA+B,mBAG/BxrB,KAAAyrB,aAAuB,UAGvBzrB,KAAA0rB,qBAA+B,mBAG/B1rB,KAAA2rB,oBAA8B,kBAG9B3rB,KAAA4rB,YAAsB,SAGtB5rB,KAAA6rB,oBAA8B,kBCrClC,IAAAC,yBAACze,EAAAA,WAAUzJ,KAAA,CAAC,CAACwM,WAAY,qHAAzB,SAAA0b,KAOI9rB,KAAA+rB,WAAqB,KAMrB/rB,KAAAgsB,WAAqB,KAKrBhsB,KAAAisB,oBAA8B,KAK9BjsB,KAAAksB,iBAA2B,KAK3BlsB,KAAAmsB,mBAA6B,KAK7BnsB,KAAAosB,mBAA6B,KAK7BpsB,KAAAqsB,uBAAiC,EC3CrC,IAAAC,IAiGIA,GAAApsB,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB2P,GAAApsB,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrB2P,GAAApsB,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GASpBsP,GAAApsB,UAAAic,WAAA,SAAWoQ,GACFA,IAGLvsB,KAAKusB,KAAOA,EACZvsB,KAAKwsB,qBAMTF,GAAApsB,UAAAsC,YAAA,SAAYge,IACJA,EAAQiM,UAAYjM,EAAQ+L,OAC5BvsB,KAAKwsB,oBAObF,GAAApsB,UAAAssB,iBAAA,WACSxsB,KAAKysB,SAEoB,IAAnBzsB,KAAKusB,KAAKG,MACjB1sB,KAAK2sB,cAAgB,GACrB3sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASd,YACJ,GAAjB/rB,KAAKusB,KAAKG,MACjB1sB,KAAK2sB,cAAgB3sB,KAAKusB,KAAKG,KAAO,GACtC1sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASb,YACF,KAAnBhsB,KAAKusB,KAAKG,MACjB1sB,KAAK2sB,cAAgB,GACrB3sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASb,aAE5BhsB,KAAK2sB,cAAgB3sB,KAAKusB,KAAKG,KAC/B1sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASd,YAZ5B/rB,KAAK2sB,cAAgB3sB,KAAKusB,KAAKG,MAmBvCJ,GAAApsB,UAAA4sB,qBAAA,WACS9sB,KAAKysB,SAGFzsB,KAAK4sB,SAAW5sB,KAAK6sB,SAASd,WACH,KAAvB/rB,KAAK2sB,cACL3sB,KAAKusB,KAAKG,KAAO,EAEjB1sB,KAAKusB,KAAKG,KAAO1sB,KAAK2sB,cAEnB3sB,KAAK4sB,SAAW5sB,KAAK6sB,SAASb,aACV,KAAvBhsB,KAAK2sB,cACL3sB,KAAKusB,KAAKG,KAAO1sB,KAAK2sB,cAEtB3sB,KAAKusB,KAAKG,KAAO1sB,KAAK2sB,cAAgB,IAZ9C3sB,KAAKusB,KAAKG,KAAO1sB,KAAK2sB,cAgB1B3sB,KAAK4c,SAAS5c,KAAKusB,OAOvBD,GAAApsB,UAAA6sB,UAAA,SAAUC,GACN,OAAQA,GACJ,IAAK,OACDhtB,KAAK2sB,cAAgBtU,KAAK4U,MAAM5U,KAAK6U,IAAIltB,KAAK2sB,gBAAkB,GAChE3sB,KAAKusB,KAAKG,KAAO1sB,KAAK2sB,cAElB3sB,KAAKysB,WACoB,GAArBzsB,KAAK2sB,eACL3sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASb,WAC5BhsB,KAAK2sB,cAAuC,KAAvB3sB,KAAK2sB,cAAuB3sB,KAAK2sB,cAAgB,GAAK3sB,KAAK2sB,eAClD,IAAvB3sB,KAAK2sB,eACZ3sB,KAAK2sB,cAAgB,GACrB3sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASd,YACrB/rB,KAAKmtB,KAAKntB,KAAK4sB,SAAkC,KAAvB5sB,KAAK2sB,gBACtC3sB,KAAKusB,KAAKG,KAAO,IAGzB,MAEJ,IAAK,SACD1sB,KAAKusB,KAAKa,OAAS/U,KAAK6U,IAAI7U,KAAK4U,MAAMjtB,KAAKusB,KAAKa,QAAU,IAC3D,MAEJ,IAAK,SACDptB,KAAKusB,KAAKc,OAAShV,KAAK6U,IAAI7U,KAAK4U,MAAMjtB,KAAKusB,KAAKc,QAAU,IAC3D,MAEJ,IAAK,SAIIrtB,KAAK4sB,SACJ5sB,KAAKstB,KAAKttB,KAAK4sB,SAAY5sB,KAAKmtB,KAAKntB,KAAK4sB,UAE5C5sB,KAAKwsB,mBAIjBxsB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAAqtB,aAAA,WAC2B,OAAnBvtB,KAAKusB,KAAKG,KACV1sB,KAAKusB,KAAKG,KAAO,EACS,KAAnB1sB,KAAKusB,KAAKG,KACjB1sB,KAAKusB,KAAKG,KAAO,EAEjB1sB,KAAKusB,KAAKG,KAAO1sB,KAAKusB,KAAKG,KAAO,EAEtC1sB,KAAKwsB,mBACLxsB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAAstB,aAAA,WAC2B,OAAnBxtB,KAAKusB,KAAKG,KACV1sB,KAAKusB,KAAKG,KAAO,EACS,IAAnB1sB,KAAKusB,KAAKG,KACjB1sB,KAAKusB,KAAKG,KAAO,GAEjB1sB,KAAKusB,KAAKG,KAAO1sB,KAAKusB,KAAKG,KAAO,EAEtC1sB,KAAKwsB,mBACLxsB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAAutB,eAAA,WAC6B,OAArBztB,KAAKusB,KAAKa,OACVptB,KAAKusB,KAAKa,OAAS,EACS,KAArBptB,KAAKusB,KAAKa,QACjBptB,KAAKusB,KAAKa,OAAS,EACnBptB,KAAKutB,gBAELvtB,KAAKusB,KAAKa,OAASptB,KAAKusB,KAAKa,OAAS,EAE1CptB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAAwtB,eAAA,WAC6B,OAArB1tB,KAAKusB,KAAKa,OACVptB,KAAKusB,KAAKa,OAAS,EACS,IAArBptB,KAAKusB,KAAKa,QACjBptB,KAAKusB,KAAKa,OAAS,GACnBptB,KAAKwtB,gBAELxtB,KAAKusB,KAAKa,OAASptB,KAAKusB,KAAKa,OAAS,EAE1CptB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAAytB,eAAA,WACQ3tB,KAAK4tB,iBACoB,OAArB5tB,KAAKusB,KAAKc,OACVrtB,KAAKusB,KAAKc,OAAS,EACS,KAArBrtB,KAAKusB,KAAKc,QACjBrtB,KAAKusB,KAAKc,OAAS,EACnBrtB,KAAKytB,kBAELztB,KAAKusB,KAAKc,OAASrtB,KAAKusB,KAAKc,OAAS,GAG9CrtB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAA2tB,eAAA,WACQ7tB,KAAK4tB,iBACoB,OAArB5tB,KAAKusB,KAAKc,OACVrtB,KAAKusB,KAAKc,OAAS,EACS,IAArBrtB,KAAKusB,KAAKc,QACjBrtB,KAAKusB,KAAKc,OAAS,GACnBrtB,KAAK0tB,kBAEL1tB,KAAKusB,KAAKc,OAASrtB,KAAKusB,KAAKc,OAAS,GAG9CrtB,KAAK4c,SAAS5c,KAAKusB,OAIvBD,GAAApsB,UAAA4tB,aAAA,WACQ9tB,KAAKusB,KAAKG,KAAO,IAAwB,GAAlB1sB,KAAKusB,KAAKG,OAC7B1sB,KAAKmtB,KAAKntB,KAAK4sB,SACf5sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASb,WAC5BhsB,KAAK+tB,qBACE/tB,KAAKstB,KAAKttB,KAAK4sB,UACtB5sB,KAAK4sB,OAAS5sB,KAAK6sB,SAASd,WAC5B/rB,KAAK+tB,uBAQjBzB,GAAApsB,UAAA8tB,kBAAA,YAC6B,GAAnBhuB,KAAKusB,KAAKa,QAAeptB,KAAKusB,KAAKa,OAAS,IAAOptB,KAAKsc,UAC1Dtc,KAAK4c,SAAS5c,KAAKusB,OAO3BD,GAAApsB,UAAA+tB,kBAAA,YAC6B,GAAnBjuB,KAAKusB,KAAKc,QAAertB,KAAKusB,KAAKc,OAAS,IAAOrtB,KAAKsc,UAC1Dtc,KAAK4c,SAAS5c,KAAKusB,OAO3BD,GAAApsB,UAAA6tB,kBAAA,WACQ/tB,KAAKusB,OAASvsB,KAAKusB,KAAKG,OACxB1sB,KAAKusB,KAAKG,KAAO,GAEjB1sB,KAAKusB,KAAKG,KAAO,IAAwB,GAAlB1sB,KAAKusB,KAAKG,OAC7B1sB,KAAKstB,KAAKttB,KAAK4sB,SAAW5sB,KAAKusB,KAAKG,KAAO,GAC3C1sB,KAAKusB,KAAKG,KAAO1sB,KAAKusB,KAAKG,KAAO,GACT,IAAlB1sB,KAAKusB,KAAKG,MAAc1sB,KAAKmtB,KAAKntB,KAAK4sB,UAC9C5sB,KAAKusB,KAAKG,KAAO1sB,KAAKusB,KAAKG,KAAO,IAEtC1sB,KAAK4c,SAAS5c,KAAKusB,QAO3BD,GAAApsB,UAAAguB,kBAAA,SAAkB3lB,GACK,QAAfA,EAAM6L,MAAmB7L,EAAMoM,WAC/BpM,EAAM8L,iBACNrU,KAAKmuB,eAAevmB,SAQpB0kB,GAAApsB,UAAAotB,KAAR,SAAaV,OACHwB,EAAapuB,KAAK6sB,SAASR,sBAAwBrsB,KAAK6sB,SAASb,WAAahsB,KAAK6sB,SAASb,WAAW/R,oBAE7G,OADA2S,EAAS5sB,KAAK6sB,SAASR,sBAAwBO,EAASA,EAAO3S,uBAC7CmU,GAOd9B,GAAApsB,UAAAitB,KAAR,SAAaP,OACHyB,EAAaruB,KAAK6sB,SAASR,sBAAwBrsB,KAAK6sB,SAASd,WAAa/rB,KAAK6sB,SAASd,WAAW9R,oBAE7G,OADA2S,EAAS5sB,KAAK6sB,SAASR,sBAAwBO,EAASA,EAAO3S,uBAC7CoU,wBAvXzB5pB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,UACVa,SAAA,gjLAEAC,KAAM,CACF8Z,SAAU,cACV9b,QAAO,gCAEXoM,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAgO,KAC9B/N,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,4LAlB5BkmB,UACAa,yCAyBJhpB,EAAAA,wBAKAA,EAAAA,wBAKAA,EAAAA,wBAKAA,EAAAA,8BAKAA,EAAAA,8BAGAA,EAAAA,4BAMAA,EAAAA,oBAWAA,EAAAA,8BAIAwH,EAAAA,UAsTLgiB,IAhRI,SAAAA,GACWgC,EACAzB,GADA7sB,KAAAsuB,eAAAA,EACAtuB,KAAA6sB,SAAAA,EApFF7sB,KAAAysB,UAAoB,EAKpBzsB,KAAAsc,UAAoB,EAUpBtc,KAAAuuB,UAAoB,EAKpBvuB,KAAA4tB,gBAA0B,EAInC5tB,KAAAwuB,gBAA0B,EAM1BxuB,KAAAyuB,cAAwB,EAWxBzuB,KAAAusB,KAAmB,CAAEG,KAAM,EAAGU,OAAQ,EAAGC,OAAQ,GAIxCrtB,KAAAmuB,eAAqC,IAAIvjB,EAAAA,aAYlD5K,KAAA2sB,cAAwB,EAGxB3sB,KAAA4c,SAAQ,SAAI2P,KAIZvsB,KAAA8c,UAAS,qBC9EF4R,GAAA7Z,SAAP,eACU1D,EAAa,IAAI4D,KACjBwX,EAAmB,CAACG,KAAMvb,EAAKwd,WAAYvB,OAAQjc,EAAKyd,aAAcvB,OAAQlc,EAAK0d,cACzF,OAAO,IAAIH,GAAW9Z,GAAOC,WAAY0X,IAmBtCmC,GAAAxuB,UAAA4uB,mBAAP,WACI,OAAI9uB,KAAKkV,UAAYlV,KAAK+uB,eAAiB/uB,KAAKiV,cACrCjV,KAAKkV,SAAS8Z,iBAEd,MAORN,GAAAxuB,UAAA6uB,YAAP,WAEI,SAAK/uB,KAAKusB,MACNvsB,KAAK0sB,OAAS/d,WACd3O,KAAKotB,SAAWze,WAChB3O,KAAKqtB,SAAW1e,WAKJ,GAAZ3O,KAAK0sB,MAAa1sB,KAAK0sB,KAAO,GAIhB,GAAd1sB,KAAKotB,QAAeptB,KAAKotB,OAAS,GAIpB,GAAdptB,KAAKqtB,QAAertB,KAAKqtB,OAAS,IAUnCqB,GAAAxuB,UAAA+U,YAAP,WACI,OAAOjV,KAAKmR,MAAQnR,KAAKmR,KAAK8D,eAGlCzV,OAAAuT,eAAW2b,GAAAxuB,UAAA,OAAI,KAAf,WACI,GAAIF,KAAKmR,KACL,OAAOnR,KAAKmR,KAAK0C,sCAIzBrU,OAAAuT,eAAW2b,GAAAxuB,UAAA,QAAK,KAAhB,WACI,GAAIF,KAAKmR,KACL,OAAOnR,KAAKmR,KAAKiC,uCAIzB5T,OAAAuT,eAAW2b,GAAAxuB,UAAA,MAAG,KAAd,WACI,GAAIF,KAAKmR,KACL,OAAOnR,KAAKmR,KAAKsB,qCAIzBjT,OAAAuT,eAAW2b,GAAAxuB,UAAA,OAAI,KAAf,WACI,GAAIF,KAAKusB,KACL,OAAOvsB,KAAKusB,KAAKG,sCAIzBltB,OAAAuT,eAAW2b,GAAAxuB,UAAA,SAAM,KAAjB,WACI,GAAIF,KAAKusB,KACL,OAAOvsB,KAAKusB,KAAKa,wCAIzB5tB,OAAAuT,eAAW2b,GAAAxuB,UAAA,SAAM,KAAjB,WACI,GAAIF,KAAKusB,KACL,OAAOvsB,KAAKusB,KAAKc,wCAOlBqB,GAAAxuB,UAAAgV,OAAP,WACI,OAAO,IAAIH,KAAK/U,KAAK6T,KAAM7T,KAAKoT,MAAQ,EAAGpT,KAAKyS,IAAKzS,KAAK0sB,KAAM1sB,KAAKotB,OAAQptB,KAAKqtB,SAE1FqB,IAhGI,SAAAA,GACIvd,EACAob,GAEAvsB,KAAKmR,KAAOA,EACZnR,KAAKusB,KAAOA,EC1BpB,SAAgB0C,KACZ,OAAO,IAAIC,GAMf,IAAAC,yBAAC9hB,EAAAA,WAAUzJ,KAAA,CAAC,CACRwM,WAAY,OACZW,WAAYke,0FAFhB,SAAAE,MAsBA,IAAAnsB,GAAAksB,IACiDhsB,EAAAA,GADjDF,GACiDmsB,IAMtCD,GAAAhvB,UAAAkpB,MAAP,SAAa3nB,GACT,IAAKA,EACD,OAAOitB,GAAW7Z,eAEd0X,OAAI,EACJpb,OAAI,EACFie,EAAU3tB,EAAMW,MAAM,KAAK,GACjC,GAAIgtB,EAAS,KACHC,EAAeD,EAAQhtB,MAAM,KAAKoQ,IAAI8W,QAC5CnY,EAAO,IAAIyD,GAAOya,EAAa,GAAIA,EAAa,GAAIA,EAAa,QAE/DC,EAAU7tB,EAAMW,MAAM,KAAK,GACjC,GAAIktB,EAAS,KACHC,EAAeD,EAAQltB,MAAM,KAAKoQ,IAAI8W,QAC5CiD,EAAO,CAAEG,KAAM6C,EAAa,GAAInC,OAAQmC,EAAa,GAAIlC,OAAQkC,EAAa,IAElF,OAAIpe,EACO,IAAIud,GAAWvd,EAAMob,QADhC,GAUD2C,GAAAhvB,UAAAqpB,OAAP,SAAcpY,GACV,OAAOA,EAAKsB,IAAM,IACdtB,EAAKiC,MAAQ,IACbjC,EAAK0C,KAAO,KACZ1C,EAAKub,KAAO,IACZvb,EAAKic,OAAS,IACdjc,EAAKkc,6BAvChBhgB,EAAAA,aA0CD6hB,IA1CA,SAAAA,sDCFA,IAAAM,IA+MIA,GAAAtvB,UAAAoc,SAAA,SAASC,GAGL,OAAOvc,KAAKwc,eAAiB,KAAO,CAChCC,eAAgB,CACZL,OAAO,KAMnBoT,GAAAtvB,UAAAuvB,cAAA,WACIzvB,KAAK8c,YACD9c,KAAK4f,OACL5f,KAAK0vB,eAEL1vB,KAAK2vB,eAONH,GAAAtvB,UAAAupB,+BAAP,SAAsCzW,GAClChT,KAAKwT,iBAAiB5L,KAAKoL,IAI/Bwc,GAAAtvB,UAAAyvB,YAAA,WACS3vB,KAAK4f,QAAW5f,KAAK+V,WACtB/V,KAAK8c,YACL9c,KAAK4f,QAAS,IAKtB4P,GAAAtvB,UAAAwvB,aAAA,WACQ1vB,KAAK4f,SACL5f,KAAKiqB,kBAAkBjqB,KAAK8pB,gBAC5B9pB,KAAK4vB,QAAQhoB,OACb5H,KAAK4f,QAAS,IAKtB4P,GAAAtvB,UAAA2vB,0BAAA,SAA0BzuB,GACtBpB,KAAKqqB,mBAAqBjpB,GAK9BouB,GAAAtvB,UAAA4vB,uBADA,WAEI9vB,KAAK0vB,gBAKFF,GAAAtvB,UAAA6vB,cADP,SACqBxnB,GACZvI,KAAKyH,MAAMC,cAAcib,SAASpa,EAAMma,SACzC1iB,KAAK0vB,gBAKbF,GAAAtvB,UAAA2C,SAAA,WACQ7C,KAAKmR,MAAgC,OAAxBnR,KAAK8pB,iBAClB9pB,KAAKiW,aAAejW,KAAKmR,KAAKA,KAC9BnR,KAAKusB,KAAOvsB,KAAKmR,KAAKob,OAK9BiD,GAAAtvB,UAAAua,YAAA,WACQza,KAAKgwB,2BACLhwB,KAAKgwB,0BAA0B3hB,eAYvCmhB,GAAAtvB,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB6S,GAAAtvB,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrB6S,GAAAtvB,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAOpBwS,GAAAtvB,UAAAic,WAAA,SAAWpD,GACFA,GAAcA,aAAoB2V,KAGvC1uB,KAAKiW,aAAe8C,EAAS5H,KAC7BnR,KAAKusB,KAAOxT,EAASwT,KACrBvsB,KAAKmR,KAAO,IAAIud,GAAW1uB,KAAKiW,aAAcjW,KAAKusB,MAC/CvsB,KAAKwc,iBACLxc,KAAKoqB,kBAAkBrM,sBAAsB/d,KAAKmR,KAAKA,MACvDnR,KAAKiwB,SAASjwB,KAAKmR,SAS3Bqe,GAAAtvB,UAAAgwB,iBAAA,SAAiB/e,GACbnR,KAAKiW,aAAe9E,EACfnR,KAAKmR,KAAK4d,gBACX/uB,KAAKusB,KAAOvsB,KAAKmwB,cAAc5D,MAEnCvsB,KAAKmR,KAAO,IAAIud,GAAW1uB,KAAKiW,aAAcjW,KAAKusB,MACnDvsB,KAAKqqB,oBAAsBrqB,KAAKwc,eAChCxc,KAAKiwB,SAASjwB,KAAKmR,MACnBnR,KAAK4c,SAAS5c,KAAKmR,OAOvBqe,GAAAtvB,UAAAkwB,iBAAA,SAAiB7D,GACbvsB,KAAKusB,KAAOA,EACPvsB,KAAKiW,cAAiBjW,KAAKiW,aAAahB,gBACzCjV,KAAKiW,aAAerB,GAAOC,YAE/B7U,KAAKmR,KAAO,IAAIud,GAAW1uB,KAAKiW,aAAcjW,KAAKusB,MACnDvsB,KAAKqqB,oBAAsBrqB,KAAKwc,eAChCxc,KAAKiwB,SAASjwB,KAAKmR,MACnBnR,KAAK4c,SAAS5c,KAAKmR,OAIvBqe,GAAAtvB,UAAAiuB,eAAA,WACQnuB,KAAKyH,MAAMC,cAAc2P,cAAc,IAAMrX,KAAKoqB,kBAAkB5f,GAAK,gBACzExK,KAAKyH,MAAMC,cAAc2P,cAAc,IAAMrX,KAAKoqB,kBAAkB5f,GAAK,eAAe8M,SAShGkY,GAAAtvB,UAAA+pB,kBAAA,SAAkB9Y,OACRkf,EAAarwB,KAAKswB,gBAAgBlH,MAAMjY,GAC9CnR,KAAKiW,aAAeoa,EAAWlf,KAC/BnR,KAAKusB,KAAO8D,EAAW9D,KACvBvsB,KAAKmR,KAAO,IAAIud,GAAW1uB,KAAKiW,aAAcjW,KAAKusB,MACnDvsB,KAAKqqB,oBAAsBrqB,KAAKwc,eAChCxc,KAAK4c,SAASyT,GACTrwB,KAAKqqB,oBACNrqB,KAAKoqB,kBAAkBrM,sBAAsBsS,EAAWlf,OAEvDA,GAAQnR,KAAKyqB,WACdzqB,KAAKqqB,oBAAqB,EAC1BrqB,KAAKmR,KAAOud,GAAW7Z,WACvB7U,KAAKiW,aAAejW,KAAKmR,KAAKA,KAC9BnR,KAAKusB,KAAOvsB,KAAKmR,KAAKob,KACtBvsB,KAAKoqB,kBAAkBrM,sBAAsB/d,KAAKmR,KAAKA,MACvDnR,KAAK4c,SAAS,OACN5c,KAAKyqB,YACbzqB,KAAKqqB,oBAAqB,IAK3BmF,GAAAtvB,UAAAsc,aAAP,WACI,OAAOxc,KAAKmR,MACRnR,KAAKmR,gBAAgBud,IACrB1uB,KAAKmR,KAAK8D,eAAiBjV,KAAKmR,KAAK4d,eAGrCS,GAAAtvB,UAAA+vB,SAAR,SAAiBM,GACbvwB,KAAK8pB,eAAiB9pB,KAAKswB,gBAAgB/G,OAAOgH,GAClDvwB,KAAKwwB,aAAajpB,sCA9YzB9C,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,+gHAEAC,KAAM,CACF8Z,SAAU,cACVgS,2BAA4B,QAEhC1hB,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAkR,KAC9BjR,OAAO,GAEX,CACIJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAkR,KAC9BjR,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,6eAjDjCjB,EAAAA,kBAFAgG,EAAAA,yBAkBKqlB,8CAsCJhlB,EAAAA,UAASvG,KAAA,CAAC0oB,+BAIVniB,EAAAA,UAASvG,KAAA,CAACqY,yBAsBVnZ,EAAAA,uBAIAA,EAAAA,yBAOAA,EAAAA,wBAIAA,EAAAA,wBAIAA,EAAAA,wBAIAA,EAAAA,8BAIAA,EAAAA,8BAIAA,EAAAA,4BAIAA,EAAAA,6BAIAA,EAAAA,oBAIAA,EAAAA,sBAIAA,EAAAA,iCAIAA,EAAAA,0BAIAA,EAAAA,kCAIAA,EAAAA,0CAIAA,EAAAA,yBAIAA,EAAAA,gCAIAwH,EAAAA,2BAIAA,EAAAA,+BAIAA,EAAAA,2BAIAA,EAAAA,wBAIAA,EAAAA,gCAeAxH,EAAAA,yCASAA,EAAAA,uCASAA,EAAAA,uCASAA,EAAAA,qCASAA,EAAAA,6BASAA,EAAAA,sCA2DAyH,EAAAA,aAAY3G,KAAA,CAAC,0BAA2B,2BAMxC2G,EAAAA,aAAY3G,KAAA,CAAC,iBAAkB,CAAC,cA0IrC4rB,IAnHI,SAAAA,GAAoB/nB,EACA+oB,EACDF,GAFCtwB,KAAAyH,MAAAA,EACAzH,KAAAwwB,aAAAA,EACDxwB,KAAAswB,gBAAAA,EA5PnBtwB,KAAA8pB,eAAyB,KAGzB9pB,KAAAqqB,oBAA8B,EAG9BrqB,KAAAusB,KAAmB,CAAEG,KAAM,EAAGU,OAAQ,EAAGC,OAAQ,GAUjDrtB,KAAA4qB,YAAsB,0BAItB5qB,KAAAoD,SAAmB,EAOnBpD,KAAA2gB,UAAuB,eAIvB3gB,KAAAysB,UAAoB,EAQpBzsB,KAAAuuB,UAAoB,EAIpBvuB,KAAA4tB,gBAA0B,EAI1B5tB,KAAAwuB,gBAA0B,EAI1BxuB,KAAAyuB,cAAwB,EAIxBzuB,KAAA6qB,eAAyB,EAIzB7qB,KAAAmR,KAAmBud,GAAW7Z,WAI9B7U,KAAA4f,QAAkB,EAIlB5f,KAAAkZ,kBAAgC,EAIzBlZ,KAAAgT,WAA6B,MAIpChT,KAAA0wB,mBAA6B,iBAI7B1wB,KAAA2wB,2BAAqC,0BAIrC3wB,KAAAyqB,WAAqB,EAILzqB,KAAAwT,iBAAiD,IAAI5I,EAAAA,aAI5D5K,KAAA4wB,WAAuC,IAAIhmB,EAAAA,aAI3C5K,KAAA6wB,eAA2C,IAAIjmB,EAAAA,aAI/C5K,KAAA8wB,WAAuC,IAAIlmB,EAAAA,aAI3C5K,KAAA4vB,QAA8B,IAAIhlB,EAAAA,aAG3C5K,KAAA4c,SAAQ,SAAS7D,KAIjB/Y,KAAA8c,UAAS,aAQT9c,KAAAsZ,gBAAe,SAAYX,GACvB,OAAO,GAQX3Y,KAAA6Z,0BAAyB,SAAYlB,GACjC,OAAO,GAQX3Y,KAAA2Z,wBAAuB,SAAYhB,GAC/B,OAAO,GAQX3Y,KAAA8Z,wBAAuB,SAAYnB,GAC/B,OAAO,GAQX3Y,KAAA4Z,sBAAqB,SAAYjB,GAC7B,OAAO,GAQX3Y,KAAAuZ,cAAa,SAAYZ,GACrB,OAAO,GCxOf,IAAAoY,IAQIA,GAAA7wB,UAAA8wB,UADA,SACU5vB,IAGyC,IAA3C,CAAC,GAAI,EAAG,EAAG,GAAI,IAAIqN,QAAQrN,EAAE6vB,UACd,KAAd7vB,EAAE6vB,UAAgC,IAAd7vB,EAAE8vB,SACR,KAAd9vB,EAAE6vB,UAAgC,IAAd7vB,EAAE8vB,SACR,KAAd9vB,EAAE6vB,UAAgC,IAAd7vB,EAAE8vB,SACR,KAAd9vB,EAAE6vB,UAAgC,IAAd7vB,EAAE8vB,SACR,KAAd9vB,EAAE6vB,UAAgC,IAAd7vB,EAAE+vB,SACR,KAAd/vB,EAAE6vB,UAAgC,IAAd7vB,EAAE+vB,SACR,KAAd/vB,EAAE6vB,UAAgC,IAAd7vB,EAAE+vB,SACR,KAAd/vB,EAAE6vB,UAAgC,IAAd7vB,EAAE+vB,SACT,IAAb/vB,EAAE6vB,SAAiB7vB,EAAE6vB,SAAW,KAMhC7vB,EAAEuT,UAAavT,EAAE6vB,QAAU,IAAkB,GAAZ7vB,EAAE6vB,WACnC7vB,EAAE6vB,QAAU,IAAkB,IAAZ7vB,EAAE6vB,UAErB7vB,EAAEiT,uCA3Bb1Q,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2EAIP0G,EAAAA,aAAY3G,KAAA,CAAC,UAAW,CAAC,cAyB9BmtB,IA9BA,SAAAA,MCFA,IAAAK,yBAQCptB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACkoB,GAAeyE,IAC9B9sB,QAAS,CAACC,EAAAA,aAAc6kB,EAAAA,aACxB5kB,QAAS,CAACmoB,GAAeyE,QAEJK,IALzB,SAAAA,MCRA,IAAAC,yBASCrtB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACorB,IACfvrB,QAAS,CAACC,EAAAA,aAAcc,EAAY+e,GAAejF,GAAgBiK,EAAAA,YAAaqI,IAChFjtB,QAAS,CAACqrB,QAEqB6B,IALnC,SAAAA,MCDA,IAAAC,IAmEIA,GAAApxB,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB2U,GAAApxB,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrB2U,GAAApxB,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAIpBsU,GAAApxB,UAAAic,WAAA,SAAWoV,KAKXD,GAAApxB,UAAAsxB,cAAA,SAAcjpB,GAAd,IAAApF,EAAAnD,KACI,GAAIA,KAAKyxB,YAAa,KACZC,EAAsB,GACtBC,EAAwB,GAC9BppB,EAAM9E,QAAO,SAACmuB,GACNA,EAAKptB,KAAOrB,EAAKsuB,YACjBC,EAAYlwB,KAAKowB,GAEjBD,EAAcnwB,KAAKowB,KAGF,EAArBF,EAAY/wB,SACZX,KAAK4c,SAAS8U,GACd1xB,KAAK6xB,SAASjqB,KAAK8pB,IAEI,EAAvBC,EAAchxB,QACdX,KAAK8xB,eAAelqB,KAAK+pB,QAG7B3xB,KAAK4c,SAASrU,GACdvI,KAAK6xB,SAASjqB,KAAKW,IAOpB+oB,GAAApxB,UAAA4G,KAAP,WACI9G,KAAK+xB,SAASrqB,cAAcid,SAMzB2M,GAAApxB,UAAAiJ,MAAP,WACInJ,KAAK+xB,SAASrqB,cAAcjG,MAAQ,GACpCzB,KAAK4c,SAAS,0BA3HrBnY,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,umBAEAC,KAAM,CACF8Z,SAAU,eAEd1P,UAAW,CAAC,CACRoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAgT,KAC9B/S,OAAO,IAEX1Z,cAAeC,EAAAA,kBAAkBC,wJAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,yCAIZuG,EAAAA,UAASvG,KAAA,CAAC,2BAIVd,EAAAA,wBAIAA,EAAAA,sBAIAA,EAAAA,yBAIAA,EAAAA,2BAIAA,EAAAA,wBAIAwH,EAAAA,+BAIAA,EAAAA,4BAIAA,EAAAA,4BAIAA,EAAAA,UAqELgnB,IA9HA,SAAAA,KAkBItxB,KAAAgyB,kBAA4B,EAQ5BhyB,KAAA+V,UAAoB,EAIpB/V,KAAAiyB,UAAoB,EAQpBjyB,KAAAkyB,WAAqB,EAQZlyB,KAAA6xB,SAAiC,IAAIjnB,EAAAA,aAIrC5K,KAAA8xB,eAAuC,IAAIlnB,EAAAA,aAI3C5K,KAAAmyB,YAAkC,IAAIvnB,EAAAA,aAItC5K,KAAAoyB,YAAkC,IAAIxnB,EAAAA,aAG/C5K,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aClEb,IAAAuV,IAcI7yB,OAAAuT,eACIsf,GAAAnyB,UAAA,kBAAe,KADnB,WAEI,OAAOF,KAAKiyB,SAAW,GAAKtjB,2CAKhC0jB,GAAAnyB,UAAA0c,SADA,SACSrU,GACL,GAAIA,EAAMma,kBAAkB4P,iBAAkB,KAEpCf,EAD6ChpB,EAAY,OACjCgpB,MACxBgB,EAAoB5yB,MAAM6yB,KAAKjB,GACjCA,EAAM5wB,QACNX,KAAKyyB,aAAa7qB,KAAK2qB,0BA3BtC5uB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,wDAKTf,EAAAA,4BAIAwH,EAAAA,gCAIAS,EAAAA,YAAWnH,KAAA,CAAC,mCAMZ2G,EAAAA,aAAY3G,KAAA,CAAC,SAAU,CAAC,cAW7ByuB,IA/BA,SAAAA,KAOYryB,KAAAiyB,UAAoB,EAInBjyB,KAAAyyB,aAAqC,IAAI7nB,EAAAA,aCZtD,IAAA8nB,IAyCWA,GAAAxyB,UAAAyyB,WADP,SACkBpqB,GACVvI,KAAKkyB,YACL3pB,EAAM8L,iBACN9L,EAAMoN,oBAMP+c,GAAAxyB,UAAA0yB,YADP,aAEM5yB,KAAK6yB,oBACH7yB,KAAKkyB,WAA0C,IAA7BlyB,KAAK6yB,qBACvB7yB,KAAKmyB,YAAYvqB,QAMlB8qB,GAAAxyB,UAAA4yB,YADP,SACmBvqB,KACbvI,KAAK6yB,oBACH7yB,KAAKkyB,WAA0C,IAA7BlyB,KAAK6yB,sBACvBtqB,EAAM8L,iBACN9L,EAAMoN,kBACN3V,KAAKoyB,YAAYxqB,SAMlB8qB,GAAAxyB,UAAA6yB,OADP,SACcxqB,GAGV,GAFAvI,KAAK6yB,oBAAsB,EAEtB7yB,KAAKkyB,YAAalyB,KAAK+V,SAA5B,CAIAxN,EAAM8L,iBACN9L,EAAMoN,sBAEAqd,EAAWzqB,EAAM0qB,aAAa1B,MAC9BA,EAAgB5xB,MAAM6yB,KAAKQ,GAEjC,IAAKhzB,KAAKiyB,UAA2B,EAAfV,EAAM5wB,OACxBX,KAAK8xB,eAAelqB,KAAK2pB,OAD7B,KAKM2B,EAAsB,GACtBC,EAAwB,GAC9B,GAAmB,EAAf5B,EAAM5wB,OAAY,CAClB,GAAKX,KAAKozB,OAIH,KACGC,EAAqBrzB,KAAKozB,OAAOlL,oBAAoBrC,QAAQ,SAAU,IAAIzjB,MAAM,KACvFmvB,EAAM9tB,QAAO,SAAEmuB,OACL0B,EAAM1B,EAAKtM,KAAKljB,MAAM,KAAKwvB,EAAKtM,KAAKljB,MAAM,KAAKzB,OAAS,IAClB,IAAzC0yB,EAAmBE,YAAYD,GAC/BJ,EAAY1xB,KAAKowB,GAEjBuB,EAAc3xB,KAAKowB,UAV3BL,EAAM9tB,QAAO,SAAEmuB,GACXsB,EAAY1xB,KAAKowB,KAazB5xB,KAAKwzB,aAAa5rB,KAAKsrB,GACI,EAAvBC,EAAcxyB,QACdX,KAAK8xB,eAAelqB,KAAKurB,4BA5GxCxvB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,2DAKTf,EAAAA,sBAIAA,EAAAA,wBAIAA,EAAAA,yBAIAA,EAAAA,4BAIAwH,EAAAA,+BAIAA,EAAAA,4BAIAA,EAAAA,4BAIAA,EAAAA,2BAMAC,EAAAA,aAAY3G,KAAA,CAAC,WAAY,CAAC,gCAS1B2G,EAAAA,aAAY3G,KAAA,CAAC,YAAa,yBAS1B2G,EAAAA,aAAY3G,KAAA,CAAC,YAAa,CAAC,2BAW3B2G,EAAAA,aAAY3G,KAAA,CAAC,OAAQ,CAAC,cA2C3B8uB,IAhHA,SAAAA,KAOI1yB,KAAAiyB,UAAoB,EAQpBjyB,KAAA+V,UAAoB,EAIpB/V,KAAAkyB,WAAqB,EAIZlyB,KAAAwzB,aAAqC,IAAI5oB,EAAAA,aAIzC5K,KAAA8xB,eAAuC,IAAIlnB,EAAAA,aAI3C5K,KAAAmyB,YAAkC,IAAIvnB,EAAAA,aAItC5K,KAAAoyB,YAAkC,IAAIxnB,EAAAA,aAEvC5K,KAAA6yB,oBAA8B,EC1C1C,IAAAY,yBAOCzvB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,aAAc6kB,EAAAA,aACxB5kB,QAAS,CAACmtB,GAAoBe,GAAqBK,IACnDtuB,aAAc,CAACktB,GAAoBe,GAAqBK,QAE9Be,IAL9B,SAAAA,MCMA,IAAAC,yBAAC/vB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,gBACVc,KAAM,CACFhC,QAAO,oBAGgB+wB,IAR/B,SAAAA,MCHA,IAAA1wB,GAAA2wB,IAK0CzwB,EAAAA,GAL1CF,GAK0CnB,GAUtC8xB,GAAAzzB,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,oBACpB9B,KAAKgQ,OACLhQ,KAAK8B,mBAAmB,MAAQ9B,KAAKgQ,6BAlBhDrM,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,kEAbaC,EAAAA,8CAqBtBhB,EAAAA,SAeL6wB,IAHI,SAAAA,GAAoB5wB,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,ICtBxB,IAAA6wB,yBAACjwB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,uDAKTf,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,gDAIZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,wDAIZmH,EAAAA,YAAWnH,KAAA,CAAC,0BAEjBgwB,IApBA,SAAAA,KAUI5zB,KAAA6zB,SAAmB,EAKnB7zB,KAAA8zB,UAAoB,EAIpB9zB,KAAA+zB,iBAA2B,ECpB/B,IAAAC,yBAACrwB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,iEAITkH,EAAAA,YAAWnH,KAAA,CAAC,2BAEjBowB,IATA,SAAAA,KAQIh0B,KAAAi0B,kBAA4B,ECXhC,IAAAC,yBAACvwB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,mEAKTkH,EAAAA,YAAWnH,KAAA,CAAC,4BAEjBswB,IAVA,SAAAA,KASIl0B,KAAAm0B,mBAA6B,ECXjC,IAAAC,yBAAC3vB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,qIACAG,cAAeC,EAAAA,kBAAkBC,wCAKhCjC,EAAAA,SAELsxB,IAVA,SAAAA,KASIp0B,KAAAwI,KAAe,GCAnB,IAAA6rB,yBAAC5vB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,oDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,2BAEjBywB,IAVA,SAAAA,KASIr0B,KAAAs0B,kBAA4B,ECvBhC,IAAAC,yBAWCvwB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CACLuvB,GACAC,GACAC,GACAI,GACAE,GACAE,GACAC,IAEJjwB,aAAc,CACVsvB,GACAC,GACAC,GACAI,GACAE,GACAE,GACAC,QAGiBE,IArBzB,SAAAA,MCAA,IAAAvxB,GAAAwxB,IAQyCtxB,EAAAA,GARzCF,GAQyCnB,GAyBrC2yB,GAAAt0B,UAAA0C,eAAA,WACQ5C,KAAKwE,MACLxE,KAAK8B,mBAAmB,kBAAoB9B,KAAKwE,MAEjDxE,KAAKy0B,QACLz0B,KAAK8B,mBAAmB,yBAExB9B,KAAK00B,aACL10B,KAAK8B,mBAAmB,8BAExB9B,KAAK20B,aACL30B,KAAK8B,mBAAmB,kCAAoC9B,KAAK20B,aAEjE30B,KAAKqD,OACLrD,KAAK8B,mBAAmB,aAAe9B,KAAKqD,6BA/CvDM,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,kBACVc,KAAM,CACFC,KAAM,8DAhBMd,EAAAA,WAAUmG,WAAA,CAAA,CAAAzB,KA+DbyJ,EAAAA,OAAMrO,KAAA,CAACE,EAAAA,gDAtCnBhB,EAAAA,sBAKAA,EAAAA,2BAKAA,EAAAA,2BAGAA,EAAAA,qBAGAA,EAAAA,SAyBL0xB,IAHI,SAAAA,GAAgCzxB,UAC5BC,GAAApC,KAAAZ,KAAM+C,IAAW/C,KChEzB,IAAA40B,yBAKC5wB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACqwB,IACVpwB,aAAc,CAACowB,QAEYI,IAL/B,SAAAA,MCIA,IAAAC,yBAACpwB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,WACVa,SAAA,8MACAG,cAAeC,EAAAA,kBAAkBC,wCAOhCjC,EAAAA,sBAKAA,EAAAA,qBAKAA,EAAAA,qBAKAA,EAAAA,SACL+xB,IA1BA,SAAAA,KAUa70B,KAAAwE,KAAe,IAKfxE,KAAAy0B,QAAkB,EAKlBz0B,KAAA80B,MAAgB,cC7B7B,IAAAC,yBAKC/wB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC0wB,IACVzwB,aAAc,CAACywB,QAEOE,IAL1B,SAAAA,MCCA,IAAAC,IAoBIA,GAAA90B,UAAA2C,SAAA,WAAA,IAAAM,EAAAnD,KACIA,KAAKi1B,YAAcC,EAAAA,UAAUl1B,KAAKm1B,QAAQztB,cAAe,UAEzD1H,KAAKo1B,aAAep1B,KAAKi1B,YAAY9mB,UAAS,SAAE/M,IACvCA,EAAEshB,OAAO2S,UAAYj0B,EAAEshB,OAAO4S,cAAgBl0B,EAAEshB,OAAO6S,aAAepyB,EAAKqyB,cAAgB,KAC5FryB,EAAKsyB,eAAe7tB,KAAK,SAKrCotB,GAAA90B,UAAAua,YAAA,WACQza,KAAKo1B,cACLp1B,KAAKo1B,aAAa/mB,oCAhC7B1K,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,mEAPMC,EAAAA,sDAYfhB,EAAAA,8BAIAwH,EAAAA,UA0BL0qB,IAnBI,SAAAA,GAAoBG,GAAAn1B,KAAAm1B,QAAAA,EAVpBn1B,KAAAw1B,cAAwB,GAIxBx1B,KAAAy1B,eAAiB,IAAI7qB,EAAAA,aCjBzB,IAAA8qB,yBAIC1xB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC4wB,IACf7wB,QAAS,CAAC6wB,QAEqBU,IAJnC,SAAAA,MCQA,IAAAC,yBAAClxB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,iBACVa,SAAA,uaACAG,cAAeC,EAAAA,kBAAkBC,qRAShCjC,EAAAA,wBAKAA,EAAAA,SAEL6yB,IAnBA,SAAAA,KAaI31B,KAAA2gB,UAAuB,eAKvB3gB,KAAAygB,SAAqB,CAAC,aAAc,cC9BxC,IAAAmV,yBAMC5xB,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,aAAc6f,IACxB5f,QAAS,CAACwxB,IACVvxB,aAAc,CAACuxB,QAEYC,IAL/B,SAAAA,MCMA,IAAAC,IA8DIr2B,OAAAuT,eAAI8iB,GAAA31B,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwnB,oBAIhB,SAAc/lB,GACVzB,KAAKwnB,eAAiB/lB,EACtBzB,KAAK4c,SAASnb,GACdzB,KAAK8c,6CAIT+Y,GAAA31B,UAAAic,WAAA,SAAW1a,GACPzB,KAAKwnB,eAAiB/lB,GAI1Bo0B,GAAA31B,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBkZ,GAAA31B,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBkZ,GAAA31B,UAAA41B,cAAA,SAAcC,GACV/1B,KAAKg2B,mBAAmBpuB,KAAKmuB,yBA1FpCtxB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,iBACVa,SAAA,qsDACAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAuX,KAC9BtX,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,6CAOhCjC,EAAAA,uBAIAA,EAAAA,sBAIAA,EAAAA,2BAIAA,EAAAA,yBAIAA,EAAAA,qBAIAA,EAAAA,sBAIAA,EAAAA,wBAIAA,EAAAA,kCAIAwH,EAAAA,UA2CLurB,IA5FA,SAAAA,KAsBI71B,KAAAoD,SAAmB,EA4BnBpD,KAAAg2B,mBAAwC,IAAIprB,EAAAA,aAM5C5K,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aC5Db,IAAAmZ,IAuCIz2B,OAAAuT,eAAIkjB,GAAA/1B,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwnB,oBAIhB,SAAc/lB,GACVzB,KAAKwnB,eAAiB/lB,EACtBzB,KAAK4c,SAASnb,GACdzB,KAAK8c,6CAITmZ,GAAA/1B,UAAAic,WAAA,SAAW1a,GACPzB,KAAKwnB,eAAiB/lB,GAI1Bw0B,GAAA/1B,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBsZ,GAAA/1B,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBsZ,GAAA/1B,UAAAg2B,cAAA,WACIl2B,KAAKwnB,iBACLxnB,KAAK4c,SAAS5c,KAAKwnB,gBACnBxnB,KAAK8c,aAITmZ,GAAA/1B,UAAAi2B,gBAAA,WACIn2B,KAAKwnB,iBACLxnB,KAAK4c,SAAS5c,KAAKwnB,gBACnBxnB,KAAK8c,kCA5EZrY,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,wBACVa,SAAA,i3BACAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA2X,KAC9B1X,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,4CAIhCjC,EAAAA,2BAIAA,EAAAA,2BAIAA,EAAAA,6BAIAA,EAAAA,SAoDLmzB,IA9EA,SAAAA,KAuBIj2B,KAAAo2B,YAAsB,UAItBp2B,KAAAq2B,cAAwB,YAMxBr2B,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aCrCb,IAAAwZ,IAmCI92B,OAAAuT,eAAIujB,GAAAp2B,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwnB,oBAIhB,SAAc/lB,GACVzB,KAAKwnB,eAAiB/lB,EACtBzB,KAAK4c,SAASnb,GACdzB,KAAK8c,6CAITwZ,GAAAp2B,UAAAic,WAAA,SAAW1a,GACPzB,KAAKwnB,eAAiB/lB,GAI1B60B,GAAAp2B,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpB2Z,GAAAp2B,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,wBA1DxBlY,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,wBACVa,SAAA,qhBACAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAgY,KAC9B/X,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,4CAIhCjC,EAAAA,2BAIAA,EAAAA,0BAIAA,EAAAA,SAsCLwzB,IA5DA,SAAAA,KAuBIt2B,KAAAu2B,WAAqB,QAMrBv2B,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aC1Cb,IAAA0Z,yBAUCxyB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACkyB,GAA2BL,GAA2BJ,IACrE5xB,QAAS,CAACC,EAAAA,aAAcH,EAAciB,EAAY+jB,EAAAA,aAClD5kB,QAAS,CAACmyB,GAA2BL,GAA2BJ,QAErCW,IAL/B,SAAAA,MCJA,IAAAC,yBAAC9yB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,YACVc,KAAM,CACFhC,QAAO,qBAGa8zB,IAP5B,SAAAA,MCQA,IAAAC,yBAAC/yB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,iBACVc,KAAM,CACFhC,QAAS,2BAGe+zB,IARhC,SAAAA,UCXIC,GAA+B,EAanCC,IA6CIp3B,OAAAuT,eAAI6jB,GAAA12B,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK62B,aAIhB,SAAcp1B,GACVzB,KAAK62B,QAAUp1B,EACfzB,KAAK4c,SAASnb,GACdzB,KAAK8c,YACL9c,KAAK82B,SAASlvB,KAAK,CAAC4C,GAAIxK,KAAKwK,GAAI/I,MAAOA,IAEpCzB,KAAK62B,SACL72B,KAAK+2B,YAAYnvB,KAAK5H,KAAKwK,qCAKnCosB,GAAA12B,UAAAic,WAAA,SAAW1a,GACPzB,KAAK62B,QAAUp1B,GAInBm1B,GAAA12B,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBia,GAAA12B,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,wBAzExBlY,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVc,KAAM,CACFhC,QAAO,qCACPgH,YAAa,MAEjBjF,SAAA,mXACAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAsY,KAC9BrY,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,2CAKhCjC,EAAAA,wBAIAA,EAAAA,wBAIAwH,EAAAA,4BAIAA,EAAAA,mBAIAxH,EAAAA,SAyCL8zB,IA5EA,SAAAA,KAoBI52B,KAAA62B,SAAmB,EAInB72B,KAAA+V,UAAoB,EAIX/V,KAAA82B,SAAuD,IAAIlsB,EAAAA,aAI3D5K,KAAA+2B,YAAoC,IAAInsB,EAAAA,aAIjD5K,KAAAwK,GAAa,oBAAsBmsB,KAGnC32B,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aC3Cb,IAAAka,yBAACrzB,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,iBACVc,KAAM,CACFhC,QAAO,6BAGmBq0B,IARlC,SAAAA,MCfA,IAAAC,yBASCjzB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACqyB,GAAeC,GAAmBM,GAAqBJ,IACtE3yB,QAAS,CAACC,EAAAA,aAAcH,EAAciB,EAAY+jB,EAAAA,aAClD5kB,QAAS,CAACsyB,GAAeC,GAAmBM,GAAqBJ,QAE5CK,IALzB,SAAAA,MCAA,IAAAC,yBAACzyB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,qHAEAG,cAAeC,EAAAA,kBAAkBC,uDAIhCjC,EAAAA,4BAIAA,EAAAA,SAELo0B,IAdA,SAAAA,KASIl3B,KAAAm3B,SAAmB,EAInBn3B,KAAAo3B,aAAuB,UCtB3B,IAAAC,yBAICrzB,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC8yB,IACf/yB,QAAS,CAAC+yB,IACVjzB,QAAS,CAACC,EAAAA,kBAEqBmzB,IALnC,SAAAA,MCFA,IAAaC,GAA0C5xB,EAAAA,QACnD,aACA,CACIC,EAAAA,WACI,SAAU,CACNpD,EAAAA,MAAM,CAACqD,QAAS,IAChBC,EAAAA,QAAQ,oBAAqBtD,EAAAA,MAAM,CAACqD,QAAS,OAGrDD,EAAAA,WACI,SAAU,CACNpD,EAAAA,MAAM,CAACqD,QAAS,IAChBC,EAAAA,QAAQ,mBAAoBtD,EAAAA,MAAM,CAACqD,QAAS,aCSxD2xB,GAAAr3B,UAAA4f,MAAA,SAAM0X,GACFx3B,KAAKy3B,aAAan2B,KAAKk2B,IAO3BD,GAAAr3B,UAAAmG,QAAA,SAAQC,GACJtG,KAAKy3B,aAAa/1B,MAAM4E,IAEhCixB,IA3BA,SAAAA,KACqBv3B,KAAAy3B,aAAe,IAAIjxB,EAAAA,QAM7BxG,KAAA03B,YAA+B13B,KAAKy3B,aAAa/wB,0BC8BxBxD,EAAAA,MAAArB,GAoChC81B,GAAAz3B,UAAA2C,SAAA,WACI7C,KAAK4C,kBAGT+0B,GAAAz3B,UAAAua,YAAA,WACQza,KAAKkf,WACLlf,KAAKkf,UAAUC,cAIvBwY,GAAAz3B,UAAA6G,gBAAA,WAQI,GAPI/G,KAAKgH,qBACDhH,KAAKgH,8BAA8BC,EAAAA,KACnCjH,KAAKkH,kBAAkBlH,KAAKgH,oBACrBhH,KAAKgH,8BAA8BG,EAAAA,aAC1CnH,KAAKoH,iBAAiBpH,KAAKgH,qBAG/BhH,KAAKof,aACL,IACIpf,KAAKkf,UAAYA,EAAUlf,KAAKyH,MAAMC,cAAe,CACjD2X,wBAAyBrf,KAAK43B,wBAA0B53B,KAAK63B,YAC7DvY,mBAAmB,EACnBC,aAAcvf,KAAKyH,MAAMC,gBAE7B1H,KAAKkf,UAAUM,WACjB,MAAOpe,GACLqe,QAAQC,KAAK,2EAGrB1f,KAAKsH,MAAMC,iBAIfowB,GAAAz3B,UAAA43B,cADA,SACcvvB,GACNvI,KAAK+3B,iBAAiC,WAAdxvB,EAAMoE,KAC9B3M,KAAKg4B,SAAS3xB,QAAQ,WAItBsxB,GAAAz3B,UAAAgH,kBAAR,SAA0ByG,GACtB3N,KAAK6I,aAAaM,YACZH,EAAmBhJ,KAAKiJ,yBAAyBC,wBAAwByE,GAC/E3N,KAAK4I,aAAe5I,KAAK6I,aAAaO,gBAAgBJ,IAGlD2uB,GAAAz3B,UAAAkH,iBAAR,SAAyBuG,GACrB3N,KAAK6I,aAAaM,YACZT,EAAU,CACZC,UAAW3I,KAAKg4B,UAEpBh4B,KAAK4I,aAAe5I,KAAK6I,aAAaC,mBAAmB6E,EAASjF,IAGtEivB,GAAAz3B,UAAA0C,eAAA,WACQ5C,KAAKi4B,iBACLj4B,KAAK8B,mBAAmB9B,KAAKi4B,uCAjHxCxzB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,WAEVa,SAAA,qUACAC,KAAM,CACFC,KAAQ,SACRszB,mBAAoB,OACpBC,0BAA2B,OAC3B5uB,yBAA0B,iBAC1BC,oBAAqB,YACrB4uB,0BAA2B,kBAC3BC,oBAAqB,OACrB1uB,YAAa,KACboW,SAAY,KACZuY,gBAAiB,IAErBzuB,WAAY,CACRytB,IAEJzyB,cAAeC,EAAAA,kBAAkBC,iUApCjCjB,EAAAA,kBAFAiG,EAAAA,gCAFAD,EAAAA,yBAmBKytB,GAAQttB,WAAA,CAAA,CAAAzB,KAuDA0B,EAAAA,qDA9BZC,EAAAA,UAASvG,KAAA,CAAC,KAAM,CAACwG,KAAMC,EAAAA,0CAmEvBE,EAAAA,aAAY3G,KAAA,CAAC,QAAS,CAAC,cA0B5B+zB,IAlEI,SAAAA,GAAoBlwB,EACAwB,EACA3B,EACY0wB,GAHhC,IAAA70B,EAIIH,GAAApC,KAAAZ,KAAMyH,IAAMzH,YAJImD,EAAAsE,MAAAA,EACAtE,EAAA8F,yBAAAA,EACA9F,EAAAmE,MAAAA,EACYnE,EAAA60B,SAAAA,EAzBhC70B,EAAA40B,iBAA2B,EAE3B50B,EAAAic,cAAwB,EAExBjc,EAAAsH,eAAyB,KAEzBtH,EAAAuH,UAAoB,KAEpBvH,EAAAo1B,gBAA0B,KAI1Bp1B,EAAAy0B,wBAAkC,EAElCz0B,EAAA00B,aAAwB,EAExB10B,EAAA80B,gBAA0B,KCvD9B,IAAAO,yBAAC/zB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,sCACS,qEAKRqG,EAAAA,YAAWnH,KAAA,CAAC,6BAEjB40B,IAVA,SAAAA,KASIx4B,KAAAy4B,aAAc,ECVlB,IAAAC,yBAACj0B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,sCACS,mKAWRqG,EAAAA,YAAWnH,KAAA,CAAC,2BAEjB80B,IAhBA,SAAAA,KAeI14B,KAAA24B,WAAY,ECfhB,IAAAC,yBAACn0B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,mFACS,yJAURqG,EAAAA,YAAWnH,KAAA,CAAC,6BAEjBg1B,IAfA,SAAAA,KAcI54B,KAAA64B,aAAc,aCRiB31B,EAAAA,MAAArB,GAa/Bi3B,GAAA54B,UAAA2C,SAAA,WACI7C,KAAK4C,kBAGTk2B,GAAA54B,UAAA0C,eAAA,WACQ5C,KAAK+4B,eACL/4B,KAAK8B,mBAAmB9B,KAAK+4B,gBAKrCD,GAAA54B,UAAA84B,WADA,WAEQh5B,KAAK43B,wBACL53B,KAAKg4B,SAAS3xB,QAAQ,kCAtCjC5B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVa,SAAU,GACVC,KAAM,CACFob,SAAY,KACZuY,gBAAiB,IAErBzuB,WAAY,CACRytB,IAEJzyB,cAAeC,EAAAA,kBAAkBC,mDAfjBjB,EAAAA,kBAGXyzB,4CAmBJxsB,EAAAA,YAAWnH,KAAA,CAAC,0CACZmH,EAAAA,YAAWnH,KAAA,CAAC,+CAiBZ2G,EAAAA,aAAY3G,KAAA,CAAC,YAMlBk1B,IArBI,SAAAA,GAAoBrxB,EACAuwB,GADpB,IAAA70B,EAEIH,GAAApC,KAAAZ,KAAMyH,IAAMzH,YAFImD,EAAAsE,MAAAA,EACAtE,EAAA60B,SAAAA,EAPpB70B,EAAA41B,cAAwB,GACxB51B,EAAAy0B,wBAAkC,EAEDz0B,EAAA81B,aAAc,EACP91B,EAAA+1B,cAAe,ICvB3D,IAAAC,yBAGC10B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAU,GAcVC,KAAM,CACF2zB,gBAAiB,GACjBc,6BAA8B,QAElCvvB,WAAY,CACRytB,IAEJzyB,cAAeC,EAAAA,kBAAkBC,aApBxB,gTAsBgBo0B,IAzB7B,SAAAA,MCGA,IAAAE,GAAA,SAAAA,KA2BIr5B,KAAA0K,UAAqB,KAGrB1K,KAAAyK,eAA0B,KAG1BzK,KAAAu4B,gBAA2B,KAG3Bv4B,KAAA63B,aAAwB,EAGxB73B,KAAA+4B,cAAyB,GAGzB/4B,KAAA43B,wBAAmC,EAGnC53B,KAAAi4B,gBAA2B,GAG3Bj4B,KAAA+3B,iBAA4B,EAG5B/3B,KAAAof,cAAyB,EAGzBpf,KAAAoL,UAAmC,QC3CvCkuB,IAiBWA,GAAAp5B,UAAAq5B,cAAP,WACI,OAAOv5B,KAAKw5B,QAA+B,EAArBx5B,KAAKw5B,OAAO74B,QAM/B24B,GAAAp5B,UAAAoO,WAAP,WAAA,IAAAnL,EAAAnD,KACIA,KAAKw5B,OAAO/1B,QAAO,SAACf,GAChBS,EAAKs2B,sBAAsB/2B,EAAKs1B,aASjCsB,GAAAp5B,UAAA4G,KAAP,SAAYgF,EAA2C4tB,GAAvD,IAAAv2B,EAAAnD,UAAuD,IAAA05B,IAAAA,EAAA,IAA+BL,IAGlFK,EAAcl6B,OAAOa,OAAO,IAAIg5B,GAAeK,OAGzCvtB,EAAoB,IAAIorB,GAC9BprB,EAAQ0B,KAAO6rB,EAAY7rB,SAWvB8rB,EAREvuB,EAA0CpL,KAAK+N,wBAAwBlC,uBACrDC,EAAaqtB,GAAgBO,GAIrDA,EAAYtuB,UAAYA,EAAU4C,SAAStG,cAIvCgyB,EAAY7B,cACZ8B,EAAW35B,KAAK+N,wBAAwBlC,uBACnCC,EAAagtB,GAAeY,EAAa,CAACvtB,SAK7C8B,EAAYjO,KAAK+N,wBAAwBlC,uBACvBC,EAAa6rB,GAAgB+B,EAAa,CAACvtB,IAetC,SAAvBytB,IACFz2B,EAAKs2B,sBAAsBxrB,GAC3BC,EAAOG,cAbXrO,KAAK65B,aAAa5rB,EAAWyrB,GAG7B15B,KAAK85B,iBAAiB7rB,EAAWyrB,EAAYK,UAE7C/5B,KAAKw5B,OAAOh4B,KAAK,CACbw2B,SAAU/pB,EACVpF,aAAcuC,EACd4uB,YAAaL,QAQXzrB,EAAS/B,EAAQurB,YAClBvpB,UAAUyrB,EAAyBA,GAGxC,OAAOztB,GAGHmtB,GAAAp5B,UAAAu5B,sBAAR,SAA8BQ,OAEpBC,EAAWl6B,KAAKw5B,OAAO1gB,KAAI,SAAEpW,GAAS,OAAAA,EAAKs1B,WAAaiC,IACxDxrB,EAAUzO,KAAKw5B,OAAO/qB,QAAQyrB,GACpCl6B,KAAK+N,wBAAwBb,iBAAiBgtB,EAASlC,UACvDh4B,KAAK+N,wBAAwBb,iBAAiBgtB,EAASrxB,cACvDqxB,EAASrxB,aAAauE,UACtB8sB,EAASlC,SAAS5qB,UAEd8sB,EAASF,cACTh6B,KAAK+N,wBAAwBb,iBAAiBgtB,EAASF,aACvDE,EAASF,YAAY5sB,WAGzBpN,KAAKw5B,OAAO/qB,GAAW,KACvBzO,KAAKw5B,OAASx5B,KAAKw5B,OAAO9qB,OAAM,SAAChM,GAAQ,OAAS,OAATA,GAAiBA,IAASiM,aAI/D2qB,GAAAp5B,UAAA25B,aAAR,SAAqBjxB,EAA4C6D,GAC7D7D,EAAaoF,SAAStG,cAAcnF,MAAM4I,SAAWsB,EAAUtB,SAC/DvC,EAAaoF,SAAStG,cAAcnF,MAAM43B,UAAY1tB,EAAU0tB,UAChEvxB,EAAaoF,SAAStG,cAAcnF,MAAM63B,SAAW3tB,EAAU2tB,SAC/DxxB,EAAaoF,SAAStG,cAAcnF,MAAMqmB,UAAYnc,EAAUmc,UAChEhgB,EAAaoF,SAAStG,cAAcnF,MAAM2I,MAAQuB,EAAUvB,MAC5DtC,EAAaoF,SAAStG,cAAcnF,MAAM0D,OAASwG,EAAUxG,QAGzDqzB,GAAAp5B,UAAA45B,iBAAR,SAAyBlxB,EAA4CmxB,GAC7DA,IACAnxB,EAAaoF,SAAStG,cAAcnF,MAAM83B,IAAMN,EAASM,IACzDzxB,EAAaoF,SAAStG,cAAcnF,MAAM+3B,OAASP,EAASO,OAC5D1xB,EAAaoF,SAAStG,cAAcnF,MAAM0f,MAAQ8X,EAAS9X,MAC3DrZ,EAAaoF,SAAStG,cAAcnF,MAAMwf,KAAOgY,EAAShY,4BA1HrE1U,EAAAA,uDANQzB,GAAuB3B,WAAA,CAAA,CAAAzB,KAgBvByJ,EAAAA,OAAMrO,KAAA,CAACgI,SAmHhB0tB,IApHI,SAAAA,GAC6CvrB,GAAA/N,KAAA+N,wBAAAA,EARrC/N,KAAAw5B,OAIF,GCdV,IAAAe,yBAAC52B,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,4DAKTkH,EAAAA,YAAWnH,KAAA,CAAC,4BAEjB22B,IAVA,SAAAA,KASIv6B,KAAAw6B,YAAa,EAUjB,IAAAC,yBAAC92B,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,iEAKTkH,EAAAA,YAAWnH,KAAA,CAAC,8CAIZmH,EAAAA,YAAWnH,KAAA,CAAC,4BAEjB62B,IAdA,SAAAA,KASIz6B,KAAA06B,aAAc,EAId16B,KAAA26B,YAAa,ECzCjB,IAAAC,yBAgBC52B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVuzB,GACAa,GACAE,GACAE,GACAE,GACAK,GACAsB,GACAF,IAEJt2B,QAAS,CACLC,EAAAA,aACAH,EACAiB,GAEJb,QAAS,CACLq0B,GACAE,GACAE,GACAE,GACAK,GACAsB,GACAF,IAEJzrB,gBAAiB,CACb6oB,GACAmB,GACAK,IAEJpqB,UAAW,CAACuqB,GAAc1tB,QAEJgvB,IAhC1B,SAAAA,MCSA,IAAAC,IAiHIA,GAAA36B,UAAA2C,SAAA,WACQ7C,KAAKumB,iBACLvmB,KAAKwmB,gBAAkBxmB,KAAKumB,iBAKpCsU,GAAA36B,UAAAsC,YAAA,SAAYge,GACJxgB,KAAKumB,iBAAmB/F,EAAQ+F,gBAAkB/F,EAAQiG,cACtDzmB,KAAKymB,WACLzmB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAKymB,YAE/DzmB,KAAKwmB,gBAAkBxmB,KAAKumB,iBAMxCsU,GAAA36B,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBke,GAAA36B,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBke,GAAA36B,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAIpB6d,GAAA36B,UAAAic,WAAA,SAAWpD,GACHA,IACA/Y,KAAK+Y,SAAWA,IAKxB8hB,GAAA36B,UAAA46B,aAAA,SAAajE,EAAcp1B,OACjBs5B,EAAiB/6B,KAAK+Y,SAASpY,OACjCk2B,EACA72B,KAAK+Y,SAASvX,KAAKC,GAEnBzB,KAAK+Y,SAASP,OAAOxY,KAAK+Y,SAAStK,QAAQhN,GAAQ,IAI/B,IAAnBs5B,GAAiD,IAAzB/6B,KAAK+Y,SAASpY,QACnB,IAAnBo6B,GAAiD,IAAzB/6B,KAAK+Y,SAASpY,SACvCX,KAAKg7B,WAAW3X,gBAGpBrjB,KAAK4c,SAAS5c,KAAK+Y,UACnB/Y,KAAKi7B,eAAerzB,KAAK5H,KAAK+Y,WAIlC8hB,GAAA36B,UAAAynB,uBAAA,WACI3nB,KAAKk7B,iBAAiBtzB,KAAK5H,KAAKymB,YAChCzmB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAKymB,YAC/DzmB,KAAKg7B,WAAW3X,iBAGZwX,GAAA36B,UAAA6nB,cAAR,SAAsBC,EAAqBvB,GAA3C,IAAAtjB,EAAAnD,KACUioB,EAAcxB,EAAWyB,oBAC/B,OAAOF,EAAatZ,OAAM,SAAChM,GACvB,GAAIA,EACA,OAAOS,EAAKiiB,UAAU1iB,GAAMwlB,oBAAoBC,SAASF,MAK7D4S,GAAA36B,UAAA2nB,eAAR,SAAuBC,GACnB,OAAOA,GAKX+S,GAAA36B,UAAAsiB,aADA,SACaja,GACTA,EAAMoN,kBACD3V,KAAKyH,MAAMC,cAAcib,SAASpa,EAAMma,UACzC1iB,KAAK4f,QAAS,yBApMzBnb,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,iBACVa,SAAA,sxFAEAC,KAAM,CACF8Z,SAAU,cACV0c,gCAAiC,QAErCpsB,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAuc,KAC9Btc,OAAO,IAGf1Z,cAAeC,EAAAA,kBAAkBC,kdAtCjCjB,EAAAA,mDA2CCqG,EAAAA,UAASvG,KAAA,CAACwf,6BAIVrY,EAAAA,YAAWnH,KAAA,CAAC,6CAIZd,EAAAA,wBAIAA,EAAAA,uBAIAA,EAAAA,yBAIAA,EAAAA,qBAIAA,EAAAA,8BAIAA,EAAAA,0BAIAA,EAAAA,yBAIAA,EAAAA,wBAIAA,EAAAA,wBAMAA,EAAAA,yBAOAA,EAAAA,mCAIAA,EAAAA,+BASAA,EAAAA,gCAIAwH,EAAAA,+BAIAA,EAAAA,6BAkGAC,EAAAA,aAAY3G,KAAA,CAAC,iBAAkB,CAAC,cAQrCi3B,IA1FI,SAAAA,GAAoBpzB,GAAAzH,KAAAyH,MAAAA,EArFpBzH,KAAAo7B,iBAAkB,EAIlBp7B,KAAA4qB,YAAsB,GAItB5qB,KAAA+V,UAAoB,EAIpB/V,KAAAoD,SAAmB,EAInBpD,KAAA4oB,UAAoB,QAIpB5oB,KAAAqD,MAAgB,wBAIhBrD,KAAAumB,eAAwB,GAQxBvmB,KAAAq7B,WAAqB,EAIrBr7B,KAAA+Y,SAAkB,GAMlB/Y,KAAA2mB,SAAqB3mB,KAAK+nB,cAO1B/nB,KAAAolB,UAAsBplB,KAAK6nB,eAI3B7nB,KAAAs7B,oBAA8B,mBAS9Bt7B,KAAAoiB,gBAAmC,WAI1BpiB,KAAAk7B,iBAAyC,IAAItwB,EAAAA,aAI7C5K,KAAAi7B,eAAsC,IAAIrwB,EAAAA,aAGnD5K,KAAAwmB,gBAAyB,GAGzBxmB,KAAA4f,QAAS,EAGT5f,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aC9Hb,IAAAye,IA+BIA,GAAAr7B,UAAAsiB,aADA,SACaja,GACLvI,KAAKw7B,mBAAqBx7B,KAAK+V,UAC3B/V,KAAKyH,MAAMC,cAAcib,SAASpa,EAAMma,UAAY1iB,KAAKw7B,iBAAiB9zB,cAAcib,SAASpa,EAAMma,SACvG1iB,KAAKy7B,aAAa7zB,6BAlCjCnD,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,WACVa,SAAA,gGAEAC,KAAM,CACFhC,QAAO,WACP+4B,6BAA8B,WAC9B92B,KAAQ,UAEZC,cAAeC,EAAAA,kBAAkBC,oJAfjBjB,EAAAA,yDAoBfqG,EAAAA,UAASvG,KAAA,CAAC,sCAIVd,EAAAA,4BAIAwH,EAAAA,6BAQAC,EAAAA,aAAY3G,KAAA,CAAC,QAAS,CAAC,cAS5B23B,IAbI,SAAAA,GAAoB9zB,GAAAzH,KAAAyH,MAAAA,EAPpBzH,KAAA+V,UAAoB,EAIX/V,KAAAy7B,aAAmC,IAAI7wB,EAAAA,aC7BpD,IAAA+wB,yBAIC33B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACm3B,IACft3B,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACo3B,QAEYI,IAL1B,SAAAA,MCJA,IAAAC,yBASC53B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACy2B,IACf52B,QAAS,CACLC,EAAAA,aACAy3B,GACA5S,EAAAA,YACA9D,GACAlB,GACA+B,IAEJ3hB,QAAS,CAAC02B,QAEiBe,IAZ/B,SAAAA,UCCAC,IAeWA,GAAA37B,UAAA47B,SAAP,SAAgBC,OACNC,EAAQ,GACdh8B,KAAKsc,SAASyf,OACRE,EAAaj8B,KAAKk8B,cAAcH,GAEtC,GAAIE,GA3Bc,EA4Bd,IAAK,IAAIz7B,EAAI,EAAGA,GAAKy7B,EAAYz7B,IAC7Bw7B,EAAMx6B,KAAKhB,QAGf,GAAIu7B,EAAWI,aAhCD,EAgCmC,CAC7C,IAAS37B,EAAI,EAAGA,GAjCN,EAiC8BA,IACpCw7B,EAAMx6B,KAAKhB,GAEI47B,IAAfH,GACAD,EAAMx6B,KAAKxB,KAAKq8B,MAEpBL,EAAMx6B,KAAKy6B,QACR,GAAIF,EAAWI,YAAcF,EAAU,EAK1C,IAJAD,EAAMx6B,KAAK,GACQ46B,IAAfH,GACAD,EAAMx6B,KAAKxB,KAAKq8B,MAEX77B,EAAIy7B,EAAU,EAA4Bz7B,GAAKy7B,EAAYz7B,IAChEw7B,EAAMx6B,KAAKhB,OAEZ,CACHw7B,EAAMx6B,KAAK,GACQ46B,IAAfH,GACAD,EAAMx6B,KAAKxB,KAAKq8B,UAEdC,EAASjkB,KAAKC,MAAM8jB,KAC1B,IAAS57B,EAAIu7B,EAAWI,YAAcG,EAAQ97B,GAAKu7B,EAAWI,YAAcG,EAAQ97B,IAChFw7B,EAAMx6B,KAAKhB,GAEI47B,IAAfH,GACAD,EAAMx6B,KAAKxB,KAAKq8B,MAEpBL,EAAMx6B,KAAKy6B,GAGnB,OAAOD,GAOJH,GAAA37B,UAAAg8B,cAAP,SAAqBH,GAIjB,OAHIA,EAAWQ,cAAgB,IAC3BR,EAAWQ,aAAev8B,KAAKw8B,wBAE5BnkB,KAAKokB,KAAKV,EAAWW,WAAaX,EAAWQ,eAOjDV,GAAA37B,UAAAoc,SAAP,SAAgByf,IACPA,EAAWW,YAAcC,EAAAA,aAC1Bld,QAAQC,KAAK,8FAEZqc,EAAWQ,aAELR,EAAWQ,aAAe,GAAKI,EAAAA,aACtCld,QAAQC,KAAK,0FAFbqc,EAAWQ,aAAev8B,KAAKw8B,uBAI9BT,EAAWI,cACZJ,EAAWI,YAAc,yBApFpC9uB,EAAAA,oDAuFDwuB,IA9EI,SAAAA,KANO77B,KAAAw8B,uBAAyB,GAGzBx8B,KAAAq8B,MAAQ,ECHnB,IAAAO,IAyDIA,GAAA18B,UAAAsC,YAAA,SAAYge,GACJA,GAAWA,EAAQ2b,cACnBn8B,KAAKm8B,YAAc3b,EAAQ2b,YAAYzb,cAE3C1gB,KAAKg8B,MAAQh8B,KAAK68B,kBAAkBf,SAAS97B,KAAK88B,2BAC5Cb,EAAaj8B,KAAK68B,kBAAkBX,cAAcl8B,KAAK88B,wBACxD98B,KAAKm8B,aAAen8B,KAAKm8B,YAAc,EACxCn8B,KAAKm8B,YAAc,EACZn8B,KAAKm8B,YAAcF,IAC1Bj8B,KAAKm8B,YAAcF,IAO3BW,GAAA18B,UAAA68B,WAAA,WACI,OAAO/8B,KAAKm8B,cAAgBn8B,KAAK68B,kBAAkBX,cAAcl8B,KAAK88B,wBAQ1EF,GAAA18B,UAAA88B,kBAAA,SAAkBC,EAAclH,GACR,UAAhBA,EAAO3hB,MAAoC,UAAhB2hB,EAAO3hB,OAClC2hB,EAAO1hB,iBACPrU,KAAKk9B,SAASD,KAStBL,GAAA18B,UAAAg9B,SAAA,SAASD,EAAclH,GACfA,GACAA,EAAO1hB,iBAEP4oB,EAAOj9B,KAAK68B,kBAAkBX,cAAcl8B,KAAK88B,wBAA0BG,EAAO,IAGtFj9B,KAAKg8B,MAAQh8B,KAAK68B,kBAAkBf,SAAS97B,KAAK88B,uBAClD98B,KAAKm9B,gBAAgBv1B,KAAKq1B,KAO9BL,GAAA18B,UAAA48B,oBAAA,WAMI,MALe,CACXJ,WAAY18B,KAAK08B,WACjBP,YAAan8B,KAAKm8B,YAClBI,aAAcv8B,KAAKu8B,oCAjH9B93B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,67CACAqK,UAAW,CAAC8sB,IACZl3B,KAAM,CACFhC,QAAO,iBAOXkC,cAAeC,EAAAA,kBAAkBC,aALxB,6HAnBJ82B,2CA4BJ/4B,EAAAA,2BAIAA,EAAAA,4BAIAA,EAAAA,iCAIAA,EAAAA,2BAOAA,EAAAA,6BAIAA,EAAAA,yBAIAA,EAAAA,+BAIAwH,EAAAA,UAsELsyB,IA/DI,SAAAA,GAAoBC,GAAA78B,KAAA68B,kBAAAA,EAzBpB78B,KAAAo9B,mBAA6B,EAO7Bp9B,KAAAq9B,YAAsB,QAItBr9B,KAAAs9B,cAAwB,WAIxBt9B,KAAAu9B,UAAoB,OAIpBv9B,KAAAm9B,gBAAkB,IAAIvyB,EAAAA,aC7D1B,IAAA4yB,yBAQCx5B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACw4B,IACf34B,QAAS,CAACC,EAAAA,aAAcH,EAAciB,GACtC+J,UAAW,CAAC8sB,IACZ13B,QAAS,CAACy4B,QAEiBY,IAN/B,SAAAA,MCFA,IAAAx6B,GAAAy6B,IAQoCv6B,EAAAA,GARpCF,GAQoCnB,GAehC47B,GAAAv9B,UAAA0C,eAAA,WACQ5C,KAAK09B,YACL19B,KAAK8B,mBAAmB,2BAA6B9B,KAAK09B,YAE1D19B,KAAK29B,iBACL39B,KAAKqC,mBAAmB,mBAAoB,QAAUrC,KAAK29B,gBAAkB,4BA5BxFl5B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,WACVa,SAAA,6OACAC,KAAM,CACFi5B,+BAAgC,QAEpC/4B,cAAeC,EAAAA,kBAAkBC,mDAZjBjB,EAAAA,mDAiBfhB,EAAAA,+BAIAA,EAAAA,4BAIAiI,EAAAA,YAAWnH,KAAA,CAAC,qBAiBjB65B,IAHI,SAAAA,GAAoB16B,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAbpBI,EAAA06B,cAAwB,ICX5B,IAAAC,yBAACr5B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,0GACAG,cAAeC,EAAAA,kBAAkBC,sDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,6BAEjBk6B,IAVA,SAAAA,KASI99B,KAAA+9B,oBAAqB,ECTzB,IAAAC,yBAACv5B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,oDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,2BAEjBo6B,IAVA,SAAAA,KASIh+B,KAAAi+B,kBAAmB,ECdvB,IAAAC,yBAACv6B,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,mEAKTkH,EAAAA,YAAWnH,KAAA,CAAC,4BAEjBs6B,IAVA,SAAAA,KASIl+B,KAAAm+B,mBAA6B,ECJjC,IAAAC,yBAAC35B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,uBACVa,SAAA,yEACAG,cAAeC,EAAAA,kBAAkBC,SAEGq5B,IALxC,SAAAA,MCAA,IAAAC,yBAAC55B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,uDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,8BAEjBy6B,IAVA,SAAAA,KASIr+B,KAAAs+B,qBAA+B,ECXnC,IAAAC,yBAAC95B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVa,SAAA,8BACAC,KAAM,CACFi5B,+BAAgC,QAEpC/4B,cAAeC,EAAAA,kBAAkBC,uDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,8BAEjB26B,IAbA,SAAAA,KAYIv+B,KAAAw+B,qBAA+B,ECZnC,IAAAC,yBAACh6B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,8BACAC,KAAM,CACFi5B,+BAAgC,QAEpC/4B,cAAeC,EAAAA,kBAAkBC,oDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,uCAIZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,kCAGjB66B,IAnBA,SAAAA,KAYIz+B,KAAA0+B,kBAA4B,EAK5B1+B,KAAA2+B,OAAiB,ECjBrB,IAAAC,yBAACn6B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,sDAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,6BAEjBg7B,IAVA,SAAAA,KASI5+B,KAAA6+B,oBAA8B,EChBlC,IAAA77B,GAAA87B,IAKwC57B,EAAAA,GALxCF,GAKwCnB,GAcpCi9B,GAAA5+B,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,iBAEpB9B,KAAK++B,OACL/+B,KAAK8B,mBAAmB,wBAGxB9B,KAAKg/B,KACLh/B,KAAK8B,mBAAmB,kBAAoB9B,KAAKg/B,IAAM,6BA3BlEv6B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,4BACAG,cAAeC,EAAAA,kBAAkBC,mDATjBjB,EAAAA,4CAcfhB,EAAAA,qBAGAA,EAAAA,SAmBLg8B,IAhBI,SAAAA,GAAoB/7B,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAHXI,EAAA47B,OAAiB,ICjB9B,IAAAE,yBAaCj7B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVq5B,GACAK,GACAE,GACAE,GACAE,GACAC,GACAE,GACAE,GACAG,GACAE,IAEJ76B,QAAS,CAACC,EAAAA,cACVC,QAAS,CACLs5B,GACAK,GACAE,GACAE,GACAE,GACAC,GACAE,GACAE,GACAG,GACAE,QAGkBG,IA3B1B,SAAAA,MCRA,IAAAC,IAuCIA,GAAAh/B,UAAAi/B,SADA,SACS52B,GAML,QALI62B,EACEC,EAAWr/B,KAAKyH,MAAMC,cAAc23B,SACpCC,EAAkB/2B,EAAMma,OAAO2S,UAC/BkK,EAAkBh3B,EAAMma,OAAO8c,qBAE5Bh/B,OACC20B,EAAuBkK,EAAS7+B,GAClCi/B,EAAKC,YAAYC,KAAI,SAACC,GAAO,OAAAA,EAAI3lB,sBAAwBkb,EAAQ0K,QAAQ5lB,uBACpEkb,EAAQqK,UAAYD,GAAoBD,EAAkB/2B,EAAMma,OAAO4S,aAAemK,EAAKK,gBAC5FV,EAAWjK,WAJd30B,EAAI,EAAGA,EAAI6+B,EAAS1+B,OAAQH,MAA5BA,IASJ4+B,GAAYp/B,KAAK+/B,YAAcX,IAAap/B,KAAKggC,gBAClDhgC,KAAKggC,cAAgBZ,EACrBp/B,KAAKigC,UAAUr4B,KAAK5H,KAAKggC,sCAxDpCr8B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,8DANMC,EAAAA,oDAYfhB,EAAAA,yBAMAA,EAAAA,6BAQAA,EAAAA,yBAOAwH,EAAAA,yBAUAC,EAAAA,aAAY3G,KAAA,CAAC,SAAU,CAAC,cAsB7Bs7B,IAzBI,SAAAA,GAAoBz3B,GAAAzH,KAAAyH,MAAAA,EA3BbzH,KAAA0/B,YAAwB,GAMxB1/B,KAAA+/B,WAAqB,EAQrB//B,KAAA8/B,cAAwB,EAOf9/B,KAAAigC,UAAuC,IAAIr1B,EAAAA,aClC/D,IAAAs1B,yBAICl8B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC86B,IACf/6B,QAAS,CAAC+6B,QAEgBgB,IAJ9B,SAAAA,MCqBA,IAAAC,IAwGIA,GAAAjgC,UAAA6mB,sBAAA,SAAsBxe,GACC,UAAfA,EAAM6L,MAAoBpU,KAAKgnB,eAC/BhnB,KAAKgnB,iBACiB,cAAfze,EAAM6L,OACb7L,EAAM8L,iBACFrU,KAAKimB,WAAajmB,KAAKimB,UAAUgB,OACjCjnB,KAAKimB,UAAUgB,MAAMvC,OAAOhd,cAAc23B,SAAS,GAAG/nB,UAMlE6oB,GAAAjgC,UAAAgnB,oBAAA,WACQlnB,KAAK0mB,WAAa1mB,KAAK0mB,UAAU/lB,SACjCX,KAAK4f,QAAS,IAKtBugB,GAAAjgC,UAAAknB,qBAAA,SAAqB7e,EAAO6f,GAA5B,IAAAjlB,EAAAnD,KACI,GAAmB,UAAfuI,EAAM6L,MAAoBgU,EAC1BpoB,KAAKunB,mBAAmBa,GACxBpoB,KAAKqmB,YAAYze,KAAK,CAAClF,KAAM0lB,EAAM1V,MAAO1S,KAAKumB,eAAe9X,QAAQ2Z,UACnE,GAAmB,cAAf7f,EAAM6L,KAAsB,CACnC7L,EAAM8L,qBACF+rB,GAAY,EACVC,EAAiBrgC,KAAKimB,UAAUoB,UACtCgZ,EAAe58B,QAAO,SAAEf,EAAMgQ,GACtB1F,SAASszB,gBAAkB59B,EAAKgiB,OAAOhd,cAAc23B,SAAS,IAAOe,IACjEC,EAAe3tB,EAAQ,IACvB2tB,EAAe3tB,EAAQ,GAAGgS,OAAOhd,cAAc23B,SAAS,GAAG/nB,QAE/D8oB,GAAY,UAGjB,GAAmB,YAAf73B,EAAM6L,KAAoB,CACjC7L,EAAM8L,qBACFksB,GAAY,EACVC,EAAiBxgC,KAAKimB,UAAUoB,UACtCmZ,EAAe/8B,QAAO,SAAEf,EAAMgQ,GACrB6tB,IACGvzB,SAASszB,gBAAkB59B,EAAKgiB,OAAOhd,cAAc23B,SAAS,IAAgB,IAAV3sB,GACpEvP,EAAK2jB,mBAAmBpf,cAAc4P,QACtCipB,GAAY,GACLvzB,SAASszB,gBAAkB59B,EAAKgiB,OAAOhd,cAAc23B,SAAS,KACjEmB,EAAe9tB,EAAQ,IACvB8tB,EAAe9tB,EAAQ,GAAGgS,OAAOhd,cAAc23B,SAAS,GAAG/nB,QAE/DipB,GAAY,QAQhCJ,GAAAjgC,UAAA2mB,mBAAA,SAAmBte,EAAO6f,GAClBA,IACApoB,KAAKunB,mBAAmBa,GACxBpoB,KAAKqmB,YAAYze,KAAK,CAAClF,KAAM0lB,EAAM1V,MAAO1S,KAAKumB,eAAe9X,QAAQ2Z,OAK9E+X,GAAAjgC,UAAAugC,2BAAA,SAA2Bl4B,GACvBA,EAAMoN,mBAUVnW,OAAAuT,eAAIotB,GAAAjgC,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwnB,oBAIhB,SAAc/lB,GACVzB,KAAKwnB,eAAiB/lB,EACtBzB,KAAK4c,SAASnb,GACdzB,KAAK8c,6CAITqjB,GAAAjgC,UAAAic,WAAA,SAAW1a,GACPzB,KAAKwnB,eAAiB/lB,GAI1B0+B,GAAAjgC,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBwjB,GAAAjgC,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAGbwjB,GAAAjgC,UAAAqnB,mBAAR,SAA2Ba,GACnBpoB,KAAKqoB,gBACLroB,KAAK4f,QAAS,GAEd5f,KAAKsoB,eACLtoB,KAAK0mB,UAAY1mB,KAAKolB,UAAUgD,GAChCpoB,KAAK2nB,2BAKbwY,GAAAjgC,UAAA2C,SAAA,WACQ7C,KAAKumB,iBACLvmB,KAAKwmB,gBAAkBxmB,KAAKumB,gBAG5BoW,EAAAA,aACAld,QAAQC,KAAK,kHAKrBygB,GAAAjgC,UAAAsC,YAAA,SAAYge,GACJxgB,KAAKumB,iBAAmB/F,EAAQ+F,gBAAkB/F,EAAQiG,cACtDzmB,KAAK0mB,UACL1mB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAK0mB,WAE/D1mB,KAAKwmB,gBAAmBxmB,KAAKumB,iBAMzC4Z,GAAAjgC,UAAAynB,uBAAA,WACI3nB,KAAKwmB,gBAAkBxmB,KAAK2mB,SAAS3mB,KAAKumB,eAAgBvmB,KAAK0mB,YAG3DyZ,GAAAjgC,UAAA2nB,eAAR,SAAuBC,GACnB,OAAOA,GAGHqY,GAAAjgC,UAAA6nB,cAAR,SAAsBC,EAAqBvB,GAA3C,IAAAtjB,EAAAnD,KACUioB,EAAcxB,EAAWyB,oBAC/B,OAAOF,EAAatZ,OAAM,SAAChM,GACvB,GAAIA,EACA,OAAOS,EAAKiiB,UAAU1iB,GAAMwlB,oBAAoBC,SAASF,2BA1PxExjB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,s0FAEAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA6hB,KAC9B5hB,OAAO,IAGf5Z,KAAM,CACFhC,QAAO,0BAEXkC,cAAeC,EAAAA,kBAAkBC,yMAKhCjC,EAAAA,wBAKAA,EAAAA,wBAIAA,EAAAA,2BAIAA,EAAAA,0BAIAA,EAAAA,qBAIAA,EAAAA,yBAIAA,EAAAA,8BAIAA,EAAAA,uBAIAA,EAAAA,4BAIAA,EAAAA,6BAIAA,EAAAA,4BAIAA,EAAAA,yBAOAA,EAAAA,2BAIAwH,EAAAA,0BAIAqe,EAAAA,aAAY/kB,KAAA,CAAC6gB,gCAIbta,EAAAA,UAASvG,KAAA,CAAC,gDAaVmH,EAAAA,YAAWnH,KAAA,CAAC,gDAIZmH,EAAAA,YAAWnH,KAAA,CAAC,oCA2JjBu8B,IA/PA,SAAAA,KAoBIngC,KAAAumB,eAAwB,GAKxBvmB,KAAA2mB,SAAqB3mB,KAAK+nB,cAY1B/nB,KAAA0gC,YAAsB,EAItB1gC,KAAAqD,MAAgB,SAIhBrD,KAAA4oB,UAAoB,QAQpB5oB,KAAAoD,SAAmB,EAInBpD,KAAA6oB,cAAwB,EAIxB7oB,KAAAqoB,eAAyB,EAIzBroB,KAAAsoB,cAAwB,EAOxBtoB,KAAAolB,UAAsBplB,KAAK6nB,eAI3B7nB,KAAAqmB,YAAwD,IAAIzb,EAAAA,aAW5D5K,KAAAwmB,gBAAyB,GAGzBxmB,KAAA4f,QAAkB,EAOlB5f,KAAA2gC,kBAAmB,EAInB3gC,KAAA4gC,cAAgB5gC,KAAK0gC,WAwErB1gC,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aCzMb,IAAA+jB,yBAQC78B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC+7B,IACfl8B,QAAS,CACLC,EAAAA,aACA6f,GACAkB,GACA8D,EAAAA,YACAjD,IAEJ3hB,QAAS,CAACg8B,QAEkBU,IAXhC,SAAAA,MCDA,IAAAC,yBAACr8B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,cACVa,SAAA,4jBAGJo8B,IALA,SAAAA,MCKA,IAAAC,IA+BIA,GAAA7gC,UAAA8gC,SADA,WAEeC,OAAOC,WAAW,sBAC1BC,QAAUnhC,KAAKohC,sBAAuB,EAAOphC,KAAKohC,sBAAuB,GAIhFL,GAAA7gC,UAAA2C,SAAA,WACI7C,KAAKghC,YAMTD,GAAA7gC,UAAAmmB,YAAA,SAAY3jB,EAAW6F,GACfvI,KAAKqhC,sBACLrhC,KAAKshC,iBAAiBxhB,QAE1Bpd,EAAK6+B,SAASh5B,yBAhDrB9D,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,kzBACAG,cAAeC,EAAAA,kBAAkBC,oDAKhCoF,EAAAA,UAASvG,KAAA,CAACwf,qBAOVtgB,EAAAA,qBAIAA,EAAAA,oCAOAA,EAAAA,wBAIAyH,EAAAA,aAAY3G,KAAA,CAAC,gBAAiB,OAqBnCm9B,IAnDA,SAAAA,KAuBI/gC,KAAAohC,sBAAgC,EAIhCphC,KAAAqhC,sBAAgC,EC5BpC,IAAAG,yBAAC/8B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,uBACVa,SAAA,+EACAG,cAAeC,EAAAA,kBAAkBC,SAEGy8B,IALxC,SAAAA,MCGA,IAAAC,yBAACh9B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,obACAG,cAAeC,EAAAA,kBAAkBC,yCAKhCjC,EAAAA,wBAIAA,EAAAA,qBAIAA,EAAAA,iCAIAA,EAAAA,iCAIAA,EAAAA,SAGL2+B,IA3BA,SAAAA,MCqBA,IAAAC,IAmDIA,GAAAxhC,UAAA8gC,SADA,WAEIhhC,KAAK2hC,iBAAmBV,OAAOW,WAAa,MAMhDF,GAAAxhC,UAAAmmB,YAAA,SAAY3jB,EAAW6F,GACfvI,KAAKqhC,sBACLrhC,KAAK6hC,kBAAkBp+B,QAAO,SAACq+B,GAAW,OAAAA,EAAQhiB,UAEtDpd,EAAK6+B,SAASh5B,IAIlBm5B,GAAAxhC,UAAA2C,SAAA,WACI7C,KAAKghC,YAITU,GAAAxhC,UAAA6hC,sBAAA,WAAA,IAAA5+B,EAAAnD,KACIA,KAAKgiC,mBAAqB,EAC1BhiC,KAAKiiC,gBAAgBx+B,QAAO,SAAEy+B,GACtBA,EAAOC,mBAAyD,iBAA7BD,EAAOC,oBAC1Ch/B,EAAK6+B,mBAAqB7+B,EAAK6+B,mBAAqBE,EAAOC,sBAMvET,GAAAxhC,UAAAkiC,wBAAA,SAAwB75B,GACpBA,EAAM8L,iBACN9L,EAAMoN,kBACN3V,KAAKqiC,uBAAyBriC,KAAKqiC,4CApF1C59B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,sBACVa,SAAA,y1MAEAG,cAAeC,EAAAA,kBAAkBC,wJAWhCjC,EAAAA,oBAIAA,EAAAA,wBAIAA,EAAAA,oCAIAA,EAAAA,sCAIAA,EAAAA,+BAIAw/B,EAAAA,gBAAe1+B,KAAA,CAAC69B,+BAIhB9Y,EAAAA,aAAY/kB,KAAA,CAACwf,kCAIbO,EAAAA,aAAY/f,KAAA,CAACu8B,sBAOb51B,EAAAA,aAAY3G,KAAA,CAAC,gBAAiB,OAqCnC89B,IAvFA,SAAAA,KASI1hC,KAAA2hC,kBAA4B,EAG5B3hC,KAAAqiC,uBAAiC,EAgBjCriC,KAAAqhC,sBAAgC,EAIhCrhC,KAAAuiC,uBAAiC,sBCxDrC,IAAAC,yBAAC/9B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVa,SAAA,8BACAG,cAAeC,EAAAA,kBAAkBC,SAEDy9B,IALpC,SAAAA,MCAA,IAAAC,yBAACh+B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,oBACVa,SAAA,8EACAG,cAAeC,EAAAA,kBAAkBC,SAEC09B,IALtC,SAAAA,MCXA,IAAAC,yBAaC1+B,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACV08B,GACAC,GACAS,GACAE,GACAD,GACAe,GACAC,IAEJx+B,QAAS,CAACC,EAAAA,aAAc6f,GAAekB,IACvC9gB,QAAS,CACL28B,GACAC,GACAS,GACAE,GACAD,GACAe,GACAC,QAGqBC,IArB7B,SAAAA,MCPA,IAAAC,yBAACl+B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,cACVa,SAAA,6HACAG,cAAeC,EAAAA,kBAAkBC,6CAKhCjC,EAAAA,SACL6/B,IATA,SAAAA,KAQa3iC,KAAA4iC,WAAqB,ECGlC,IAAAC,yBAACp+B,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,oBACVa,SAAA,mIACAG,cAAeC,EAAAA,kBAAkBC,SAEO89B,IAL5C,SAAAA,MCRA,IAAAC,yBAACn/B,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,wEAITkH,EAAAA,YAAWnH,KAAA,CAAC,+BAEjBk/B,IATA,SAAAA,KAQI9iC,KAAA+iC,qBAA+B,ECAnC,IAAAC,yBAACr/B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,qBACVc,KAAM,CACFhC,QAAO,yBAG2BqgC,IAP1C,SAAAA,MCAA,IAAAhgC,GAAAigC,IAIiD//B,EAAAA,GAJjDF,GAIiDnB,GAkB7CohC,GAAA/iC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,qBACpB9B,KAAKkjC,aACLljC,KAAK8B,mBAAmB,aACxB9B,KAAKqC,mBAAmB,SAAU,WAClCrC,KAAK+C,WAAW2E,cAAcy7B,aAAa,gBAAiBnjC,KAAKojC,gBAEjEpjC,KAAKojC,eAAiBpjC,KAAKkjC,YAC3BljC,KAAK8B,mBAAmB,gBAWhCmhC,GAAA/iC,UAAA88B,kBADA,SACkBz0B,IACVvI,KAAKkjC,YAA8B,UAAf36B,EAAM6L,MAAmC,UAAf7L,EAAM6L,OACpD7L,EAAM8L,iBACNrU,KAAKqjC,wBAKbJ,GAAA/iC,UAAAmjC,oBADA,WAEQrjC,KAAKkjC,aACLljC,KAAKojC,eAAiBpjC,KAAKojC,cAC3BpjC,KAAKsjC,oBAAoB17B,KAAK5H,KAAKojC,eACnCpjC,KAAKwC,qCArDhBmB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,mEAjBVC,EAAAA,WAAUmG,WAAA,CAAA,CAAAzB,KAkDGyJ,EAAAA,OAAMrO,KAAA,CAACE,EAAAA,sDA5BnBhB,EAAAA,mCAIAwH,EAAAA,8BAGAxH,EAAAA,oBAGAiI,EAAAA,YAAWnH,KAAA,CAAC,+BACZmH,EAAAA,YAAWnH,KAAA,CAAC,wCACZmH,EAAAA,YAAWnH,KAAA,CAAC,uCAqBZ2G,EAAAA,aAAY3G,KAAA,CAAC,WAAY,CAAC,wCAQ1B2G,EAAAA,aAAY3G,KAAA,CAAC,QAAS,CAAC,qBAQ5Bq/B,IArBI,SAAAA,GAAwClgC,GAAxC,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADmBmD,EAAAJ,WAAAA,EA3BxCI,EAAA+/B,YAAsB,EAItB//B,EAAAmgC,oBAAsB,IAAI14B,EAAAA,aAG1BzH,EAAAigC,eAAyB,EAECjgC,EAAAyB,KAAOzB,EAAK+/B,WAAa,SAAW,GAC3B//B,EAAAogC,SAAWpgC,EAAK+/B,WAC1B//B,EAAA4c,SAAW5c,EAAK+/B,WAAa,IAAM,KCpBhE,IAAAM,IAUWA,GAAAtjC,UAAAujC,oBAAP,SAA2BL,GACvBpjC,KAAKojC,cAAgBA,EACrBpjC,KAAK+C,WAAW2E,cAAcy7B,aAAa,eAAgBnjC,KAAKojC,qCAZvEz/B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,wBACVc,KAAM,CACFhC,QAAO,sEApBKmB,EAAAA,cAiCpB0/B,IADI,SAAAA,GAAoBzgC,GAAA/C,KAAA+C,WAAAA,EARb/C,KAAAojC,eAAyB,ECJpC,IAAAM,IAYWA,GAAAxjC,UAAAyjC,mBAAP,WAAA,IAAAxgC,EAAAnD,KACQA,KAAK4jC,aAAe5jC,KAAK6jC,iBAEzB7jC,KAAK6jC,eAAeJ,oBAAoBzjC,KAAK4jC,YAAYR,eACzDpjC,KAAK8jC,oBAAsB9jC,KAAK4jC,YAAYN,oBAAoBn1B,UAAS,SAACyR,GACtEzc,EAAK0gC,eAAeJ,oBAAoB7jB,OAKpD8jB,GAAAxjC,UAAAua,YAAA,WACQza,KAAK8jC,qBACL9jC,KAAK8jC,oBAAoBz1B,oCAxBpC5J,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,mBACVa,SAAA,iKACAG,cAAeC,EAAAA,kBAAkBC,+CAGhC4e,EAAAA,aAAY/f,KAAA,CAACq/B,4BACbtf,EAAAA,aAAY/f,KAAA,CAAC4/B,OAqBlBE,IA5BA,SAAAA,MCGA,IAAAK,yBAACpgC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,wBACVc,KAAM,CACFhC,QAAO,4BAG8BohC,IAP7C,SAAAA,MCfA,IAAAC,yBAACrgC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,wBACVc,KAAM,CACFhC,QAAO,4BAG8BqhC,IAR7C,SAAAA,MCRA,IAAAC,yBAaCjgC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CACLw+B,GACAE,GACAC,GACAE,GACAU,GACAT,GACAO,GACAO,GACAC,IAEJ5/B,aAAc,CACVu+B,GACAE,GACAC,GACAE,GACAU,GACAT,GACAO,GACAO,GACAC,QAG2BC,IAzBnC,SAAAA,MCRA,IAAAC,IA4CIA,GAAAhkC,UAAA2C,SAAA,WACQ7C,KAAK+Y,WAAa/Y,KAAK+V,UACvB/V,KAAKsX,SAKb9X,OAAAuT,eAAImxB,GAAAhkC,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKmkC,UAAYnkC,KAAKmkC,WACvBnkC,KAAKyH,MAAmB,cAAiB28B,aAAe,IAAIC,wCAItEH,GAAAhkC,UAAAokC,YAAA,SAAY7iC,EAAgBqf,QAAA,IAAAA,IAAAA,GAAA,GACxB9gB,KAAK+Y,SAAWtX,EAEZqf,GACA9gB,KAAKi7B,eAAerzB,KAAK5H,OAKjCkkC,GAAAhkC,UAAAoX,MAAA,WACKtX,KAAKyH,MAAmB,cAAiB6P,SAI9C4sB,GAAAhkC,UAAAqkC,eAAA,WACI,OAAOvkC,KAAKyH,MAAmB,eAMnCy8B,GAAAhkC,UAAAskC,iBAFA,WAGSxkC,KAAK+Y,UAAa/Y,KAAK+V,WACxB/V,KAAK+Y,UAAW,EAChB/Y,KAAKi7B,eAAerzB,KAAK5H,6BAjFpCyE,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,YACVa,SAAA,8BAEAG,cAAeC,EAAAA,kBAAkBC,KACjCJ,KAAM,CACF8/B,mCAAoC,OACpCC,uBAAwB,WACxBC,aAAc,oBACd//B,KAAQ,0XAdId,EAAAA,wDAoBfiH,EAAAA,YAAWnH,KAAA,CAAC,yCAIZmH,EAAAA,YAAWnH,KAAA,CAAC,oCAIZd,EAAAA,wBAIAA,EAAAA,yBAIAA,EAAAA,8BAIAwH,EAAAA,iCAyCAC,EAAAA,aAAY3G,KAAA,CAAC,kBAAe,CAAA4E,KAC5B+B,EAAAA,aAAY3G,KAAA,CAAC,YAQlBsgC,IA7CI,SAAAA,GAAoBz8B,GAAAzH,KAAAyH,MAAAA,EAxBpBzH,KAAA4kB,iBAA2B,EAI3B5kB,KAAA+Y,UAAoB,EAQpB/Y,KAAA+V,UAAoB,EAQX/V,KAAAi7B,eACH,IAAIrwB,EAAAA,aCtBd,IAAAg6B,IAsHIA,GAAA1kC,UAAAinB,mBAAA,SAAmBvH,GACf5f,KAAK4f,OAASA,EACd5f,KAAKghB,aAAapZ,KAAKgY,GACvB5f,KAAK6kC,uBAITD,GAAA1kC,UAAAsC,YAAA,SAAYge,GAAZ,IAAArd,EAAAnD,KACQwgB,EAAQ/e,OACRwG,WAAU,WACF9E,EAAK1B,OACL0B,EAAK2hC,YAAY3hC,EAAK1B,OAAO,MAO7CmjC,GAAA1kC,UAAAyjC,mBAAA,WAAA,IAAAxgC,EAAAnD,KAGIA,KAAKuD,QAAQid,QAAQnG,KAAK0qB,EAAAA,UAAU,MAAOzqB,EAAAA,UAAUta,KAAKglC,WAAW72B,UAAS,WAC1EhL,EAAK8hC,eACL9hC,EAAK+hC,mBAKbN,GAAA1kC,UAAAua,YAAA,WACIza,KAAKglC,SAAS1jC,OACdtB,KAAKglC,SAAStqB,YAIlBkqB,GAAA1kC,UAAA2gB,OAAA,WACQ7gB,KAAK4f,SAAW5f,KAAK+V,SACrB/V,KAAK8f,QAEL9f,KAAK8G,QAKb89B,GAAA1kC,UAAA4G,KAAA,WACS9G,KAAK4f,QAAW5f,KAAK+V,WACtB/V,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAKpCglB,GAAA1kC,UAAA4f,MAAA,WACQ9f,KAAK4f,SAAW5f,KAAK+V,WACrB/V,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAKpCglB,GAAA1kC,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBioB,GAAA1kC,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBioB,GAAA1kC,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAIpB4nB,GAAA1kC,UAAAic,WAAA,SAAW1a,GAAX,IAAA0B,EAAAnD,KACQA,KAAKuD,QACLvD,KAAK8kC,YAAYrjC,GAAO,GAGxB0jC,QAAQC,UAAUC,KAAI,WACdliC,EAAKI,SACLJ,EAAK2hC,YAAYrjC,GAAO,MAOxCjC,OAAAuT,eAAI6xB,GAAA1kC,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK+Y,SAAW/Y,KAAK+Y,SAASusB,cAAgBtlC,KAAK4qB,6CAK9Dga,GAAA1kC,UAAAqlC,eADA,SACeh9B,GACX,OAAQA,EAAM6L,MACV,IAAA,UACI7L,EAAM8L,iBACNrU,KAAKwlC,mBACL,MAEJ,IAAA,YACIj9B,EAAM8L,iBACNrU,KAAKylC,qBAQjBb,GAAA1kC,UAAA2kC,oBADA,WAEI7kC,KAAK0lC,oBAA2C,IAArBzE,OAAO0E,aAQ9Bf,GAAA1kC,UAAA0lC,aAAR,SAAqBliC,EAAyBmiC,GAC1C,QAD0C,IAAAA,IAAAA,GAAA,IACrC7lC,KAAK8lC,eAAepiC,GAQrB,OAPI1D,KAAK+Y,UACL/Y,KAAK+Y,SAASurB,aAAY,GAAO,GAErC5gC,EAAO4gC,aAAY,GAAM,GACzBtkC,KAAK+Y,SAAWrV,EAChB1D,KAAK+lC,YAAYF,GACjB7lC,KAAK8f,QACEpc,GAWPkhC,GAAA1kC,UAAA4kC,YAAR,SAAoBrjC,EAAYokC,QAAA,IAAAA,IAAAA,GAAA,OACtBG,EAAchmC,KAAKuD,QAAQuV,KAAI,SAAEpV,GACnC,OAAuB,MAAhBA,EAAOjC,OAAiBiC,EAAOjC,QAAUA,IAKpD,GAAKukC,EAiBL,OAXIA,IAAgBhmC,KAAK8lC,eAAeE,KAChChmC,KAAK+Y,UACL/Y,KAAK+Y,SAASurB,aAAY,GAAO,GAErC0B,EAAY1B,aAAY,GAAM,GAC9BtkC,KAAK+Y,SAAWitB,EAEhBhmC,KAAK+lC,YAAYF,GACjB7lC,KAAK8f,SAGFkmB,EAhBHhmC,KAAKimC,mBAuBLrB,GAAA1kC,UAAA6lC,YAAR,SAAoBF,QAAA,IAAAA,IAAAA,GAAA,GAChB7lC,KAAKyB,MAAQzB,KAAK+Y,SAAStX,MACvBokC,IACA7lC,KAAKkmC,YAAYt+B,KAAK5H,KAAKyB,OAC3BzB,KAAK4c,SAAS5c,KAAKyB,OACnBzB,KAAK8c,cAOL8nB,GAAA1kC,UAAA+kC,aAAR,WAAA,IAAA9hC,EAAAnD,KAEUmmC,EAAoBC,EAAAA,MAAMpmC,KAAKuD,QAAQid,QAASxgB,KAAKglC,UAI3DhlC,KAAKqmC,qBAAqBhsB,KAAKC,EAAAA,UAAU6rB,IAAoBh4B,UAAS,SAAEvB,GACpEzJ,EAAKyiC,aAAah5B,MAKlBg4B,GAAA1kC,UAAAglC,cAAR,WACQllC,KAAKyB,QACLzB,KAAK+Y,SAAWpK,UAChB3O,KAAK8kC,YAAY9kC,KAAKyB,OAAO,KAQ7BmjC,GAAA1kC,UAAA4lC,eAAR,SAAuBpiC,GACnB,OAAOA,GAAU1D,KAAK+Y,UAAYrV,IAAW1D,KAAK+Y,UAI9C6rB,GAAA1kC,UAAAulC,iBAAR,eAGUnF,EAAgBtzB,SAASszB,cAGzBgG,EAAsBtmC,KAAKuD,QAAQuV,KAAI,SAACpV,GAC1C,OAAOA,EAAO6gC,mBAAqBjE,IAGvC,GAAIgG,EAAqB,KACfC,EAAevmC,KAAKuD,QAAQ8jB,UAC5B3U,EAAQ6zB,EAAa93B,QAAQ63B,GAI/B5zB,IAAU1S,KAAKuD,QAAQ5C,OAAS,EAChC4lC,EAAa,GAAGjvB,QAEhBivB,EAAa7zB,EAAQ,GAAG4E,aAErBtX,KAAKuD,SACZvD,KAAKuD,QAAQ0jB,MAAM3P,SAKnBstB,GAAA1kC,UAAAslC,iBAAR,eAGUlF,EAAgBtzB,SAASszB,cAGzBgG,EAAsBtmC,KAAKuD,QAAQuV,KAAI,SAACpV,GAC1C,OAAOA,EAAO6gC,mBAAqBjE,IAKvC,GAAIgG,EAAqB,KACfC,EAAevmC,KAAKuD,QAAQ8jB,UAC5B3U,EAAQ6zB,EAAa93B,QAAQ63B,GAErB,IAAV5zB,EACA6zB,EAAavmC,KAAKuD,QAAQ5C,OAAS,GAAG2W,QAEtCivB,EAAa7zB,EAAQ,GAAG4E,aAErBtX,KAAKuD,SACZvD,KAAKuD,QAAQ0jB,MAAM3P,SAQnBstB,GAAA1kC,UAAA+lC,gBAAR,WAAA,IAAA9iC,EAAAnD,KACIiI,WAAU,WACF9E,EAAK4V,UACL5V,EAAK4V,SAASurB,aAAY,GAAO,GAErCnhC,EAAK4V,SAAWpK,UAChBxL,EAAK1B,MAAQkN,UACbxL,EAAK+iC,YAAYt+B,KAAK+G,WACtBxL,EAAKyZ,SAASjO,mCA1YzBlK,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,YACVa,SAAA,upCAEAG,cAAeC,EAAAA,kBAAkBC,KACjCgK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAsmB,KAC9BrmB,OAAO,IAGf5Z,KAAM,CACF6hC,2BAA4B,OAC5B5hC,KAAQ,2mBAMXmG,EAAAA,YAAWnH,KAAA,CAAC,sCAIZ0+B,EAAAA,gBAAe1+B,KAAA,CAACsgC,GAAiB,CAAEuC,aAAa,sBAIhD3jC,EAAAA,2BAIAA,EAAAA,sBAIAA,EAAAA,qBAIAA,EAAAA,uBAIAA,EAAAA,yBAIAA,EAAAA,6BAIAA,EAAAA,+BAkBAA,EAAAA,+BAIAA,EAAAA,wBAIAA,EAAAA,4BAIAwH,EAAAA,4BAKAA,EAAAA,+BA4HAC,EAAAA,aAAY3G,KAAA,CAAC,UAAW,CAAC,wCAiBzB2G,EAAAA,aAAY3G,KAAA,CAAC,oBA0KlBghC,IA9YA,SAAAA,KAAA,IAAAzhC,EAAAnD,KAqBIA,KAAA0mC,iBAA2B,EAQ3B1mC,KAAA+V,UAAoB,EAQpB/V,KAAA4f,QAAkB,EAQlB5f,KAAAoD,SAAmB,EAQnBpD,KAAA2mC,cAA+B,CAC3BhmB,UAAW,eACX0B,UAAW,CACPQ,gBAAiB,CACbP,SAAS,EACTQ,qBAAqB,EACrBC,kBAAmB,kBAY/B/iB,KAAAoiB,gBAAmC,WAY1BpiB,KAAAghB,aACH,IAAIpW,EAAAA,aAID5K,KAAAkmC,YACH,IAAIt7B,EAAAA,aASO5K,KAAAglC,SAA0B,IAAIx+B,EAAAA,QAG9BxG,KAAAqmC,qBAAoDO,EAAAA,MAAK,eAChErjC,EAAUJ,EAAKI,QACrB,GAAIA,EACA,OAAOA,EAAQid,QAAQnG,KACnB0qB,EAAAA,UAAUxhC,GACVsjC,EAAAA,UAAS,WAAO,OAAAT,EAAAA,MAAKvlC,WAAA,EAAAc,EAAI4B,EAAQiP,IAAG,SAAC9O,GAAU,OAAAA,EAAOu3B,wBAMlEj7B,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aCvIb,IAAAgqB,yBAMC9iC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVwgC,GACAV,IAEJ//B,QAAS,CACLygC,GACAV,IAEJjgC,QAAS,CACLC,EAAAA,aACA6f,QAGmB+iB,IAd3B,SAAAA,MCqBA,IAAAC,yBAACpjC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,qCAEuBkjC,IALrC,SAAAA,MA6BA,IAAAC,yBAACrjC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,6BAEyBmjC,IAJvC,SAAAA,MAWA,IAAAC,IAaIA,GAAA/mC,UAAA2C,SAAA,WACI7C,KAAKknC,QAAQ/9B,QACbnJ,KAAKmnC,WAAannC,KAAKknC,QAAQp+B,mBAAmB9I,KAAK2N,+BAf9DhK,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,oFAtEmDwG,EAAAA,sDAyE5DvH,EAAAA,MAAKc,KAAA,CAAC,wCAWXqjC,IANI,SAAAA,GAAoBC,GAAAlnC,KAAAknC,QAAAA,ECpDxB,IAAAE,IA4EWA,GAAAlnC,UAAAmnC,YAAP,SAAmBtR,GACf/1B,KAAKsnC,qBAAqB1/B,OAC1BmuB,EAAOpgB,mBAMJyxB,GAAAlnC,UAAA2gB,OAAP,WACQ7gB,KAAK4f,OACL5f,KAAK8f,QAEL9f,KAAK8G,QAONsgC,GAAAlnC,UAAA4f,MAAP,WACQ9f,KAAK4f,SACL5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAO7BwnB,GAAAlnC,UAAA4G,KAAP,WACS9G,KAAK4f,SACN5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,+BA5GvCnb,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVa,SAAA,mhDAKCif,EAAAA,aAAY/f,KAAA,CAACmjC,GAAwB,CAAC38B,KAAMjD,EAAAA,gCAK5CrE,EAAAA,mCAIAA,EAAAA,gCAIAA,EAAAA,4BAIAA,EAAAA,uBAIAA,EAAAA,qBAIAA,EAAAA,wBAIAA,EAAAA,+BAIAA,EAAAA,sBAKAA,EAAAA,uBAIAA,EAAAA,+BASAA,EAAAA,sBAIAA,EAAAA,4BAIAwH,EAAAA,qCAIAA,EAAAA,UA0CL88B,IAhHA,SAAAA,KAaIpnC,KAAAygB,SAAqB,CAAC,SAItBzgB,KAAAyiB,qBAA+B,EAI/BziB,KAAA6f,kBAA4B,EAI5B7f,KAAAof,cAAwB,EAQxBpf,KAAAqD,MAAgB,kBA0BhBrD,KAAAoiB,gBAAmC,WAInCpiB,KAAA4f,QAAkB,EAIT5f,KAAAghB,aAAsC,IAAIpW,EAAAA,aAI1C5K,KAAAsnC,qBAA8C,IAAI18B,EAAAA,aCjG/D,IAAA28B,yBAQCvjC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,aAAcH,EAAcggB,IACtC3f,aAAc,CAACgjC,GAAsBJ,GAA0BD,GAAwBE,IACvF9iC,QAAS,CAACijC,GAAsBJ,GAA0BD,GAAwBE,QAEtDM,IALhC,SAAAA,MCAA,IAAAC,yBAAC7jC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,wDAKTkH,EAAAA,YAAWnH,KAAA,CAAC,qBAGjB4jC,IAVA,SAAAA,KAQIxnC,KAAAynC,cAAwB,ECV5B,IAAAC,yBAAC/jC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qBACVc,KAAM,CACFhC,QAAO,wBACPglC,qCAAsC,0CACtCC,qCAAsC,2DASzC9kC,EAAAA,SAEL4kC,IAhBA,SAAAA,MCKA,IAAAG,yBAAClkC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,gCACVc,KAAM,CACFpC,MAAO,wBAG+BslC,IAP9C,SAAAA,MCXA,IAAAC,yBAOC9jC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVE,aAAc,CAACojC,GAAgBK,GAAiCH,IAChEvjC,QAAS,CAACqjC,GAAgBK,GAAiCH,QAErCI,IAL1B,SAAAA,MCQA,IAAAC,yBAACpkC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,qBAGdkkC,IANA,SAAAA,MAWA,IAAAC,IAaIA,GAAA9nC,UAAA2C,SAAA,WACI7C,KAAKknC,QAAQ/9B,QACbnJ,KAAKmnC,WAAannC,KAAKknC,QAAQp+B,mBAAmB9I,KAAK2N,+BAf9DhK,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,oEA7BmDwG,EAAAA,sDAgC5DvH,EAAAA,MAAKc,KAAA,CAAC,wBAWXokC,IANI,SAAAA,GAAoBd,GAAAlnC,KAAAknC,QAAAA,MClCpBe,GAA2B,EAK/BC,yBAACzjC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,SACVa,SAAA,kFACAC,KAAM,CACFC,KAAM,WACNjC,QAAO,iBACPgH,YAAa,KACbw+B,uBAAwB,yBACxBC,sBAAuB,YAE3BvjC,cAAeC,EAAAA,kBAAkBC,iDAKhC4e,EAAAA,aAAY/f,KAAA,CAACmkC,GAAmB,CAAC39B,KAAMjD,EAAAA,6BAIvCrE,EAAAA,yBAIAA,EAAAA,8BAIAA,EAAAA,wBAIAA,EAAAA,kBAIAA,EAAAA,SAQLolC,IA3CA,SAAAA,KAoCIloC,KAAAwK,GAAa,eAAiBy9B,KAG9BjoC,KAAAqoC,UAAW,EC1Cf,IAAAC,IAOIA,GAAApoC,UAAAqoC,oBAAA,SAAoB71B,EAAenK,EAAYigC,GAC3C,OAAQjgC,EAAM6L,MACV,IAAA,YACqB,GAAb1B,EAAQ,EACR1S,KAAKyoC,oBAAoB/1B,EAAQ,EAAG81B,GAAUlxB,QAE9CtX,KAAKyoC,oBAAoBD,EAAS7nC,OAAS,EAAG6nC,GAAUlxB,QAE5D,MAEJ,IAAA,aACQ5E,EAAQ,EAAI81B,EAAS7nC,OACrBX,KAAKyoC,oBAAoB/1B,EAAQ,EAAG81B,GAAUlxB,QAE9CtX,KAAKyoC,oBAAoB,EAAGD,GAAUlxB,QAE1C,MAEJ,IAAA,QACI/O,EAAM8L,iBACNrU,KAAK0oC,YAAYpnC,KAAKoR,GACtB,MAEJ,IAAA,QACI1S,KAAK0oC,YAAYpnC,KAAKoR,KAM1B41B,GAAApoC,UAAAuoC,oBAAR,SAA4B/1B,EAAe81B,GACvC,OAAOA,EAAS91B,yBAtCvBrF,EAAAA,aAwCDi7B,IAxCA,SAAAA,KAIWtoC,KAAA0oC,YAAc,IAAIliC,EAAAA,QCa7B,IAAAmiC,IAoCIA,GAAAzoC,UAAAyjC,mBAAA,WAAA,IAAAxgC,EAAAnD,KACIiI,WAAU,WACN9E,EAAKylC,UAAUzlC,EAAK0lC,iBAGxB7oC,KAAK8oC,uBAAyB9oC,KAAK+oC,YAAYL,YAAYv6B,UAAS,SAACuE,GAC7DA,IAAUvP,EAAK0lC,eACf1lC,EAAKylC,UAAUl2B,KAIvB1S,KAAKgpC,kBAAoBhpC,KAAKipC,UAAUzoB,QAAQrS,UAAS,WAChDhL,EAAK+lC,mBAAoB/lC,EAAKgmC,qBAC/BhmC,EAAKimC,kBAMjBT,GAAAzoC,UAAAua,YAAA,WACIza,KAAKgpC,kBAAkB36B,cACvBrO,KAAK8oC,uBAAuBz6B,eAIhCs6B,GAAAzoC,UAAAsC,YAAA,SAAYge,GAAZ,IAAArd,EAAAnD,KACQwgB,EAAQqoB,eACR5gC,WAAU,WACN9E,EAAKylC,UAAUpoB,EAAQqoB,cAAcnoB,iBASjDioB,GAAAzoC,UAAA0oC,UAAA,SAAUS,GACHrpC,KAAKkpC,kBAAoBlpC,KAAKspC,mBAAmBD,KAChDrpC,KAAKipC,UAAUxlC,QAAO,SAAE8lC,EAAK72B,GACzB62B,EAAIlB,SAAW31B,IAAU22B,IAE7BrpC,KAAK6oC,cAAgBQ,EACrBrpC,KAAKwpC,oBAAoB5hC,KAAKyhC,KAKtCV,GAAAzoC,UAAAupC,sBAAA,SAAsBJ,GACdrpC,KAAK6oC,gBAAkBQ,GACvBrpC,KAAK4oC,UAAUS,IAKvBV,GAAAzoC,UAAAqoC,oBAAA,SAAoB71B,EAAenK,GAC/BvI,KAAK+oC,YAAYR,oBAAoB71B,EAAOnK,EAAOvI,KAAK0pC,SAASl3B,IAAG,SAAC+2B,GAAO,OAAAA,EAAI7hC,kBAG5EihC,GAAAzoC,UAAAgpC,eAAR,WACI,OAAOlpC,KAAKipC,WAAqC,EAAxBjpC,KAAKipC,UAAUtoC,QAAcX,KAAK6oC,cAAgB7oC,KAAKipC,UAAUtoC,QAGtFgoC,GAAAzoC,UAAAopC,mBAAR,SAA2B52B,GACvB,OAAQ1S,KAAKipC,UAAU5hB,UAAU3U,GAAOqD,UAGpC4yB,GAAAzoC,UAAAipC,kBAAR,eACQ3R,GAAS,EAMb,OALAx3B,KAAKipC,UAAUxlC,QAAO,SAAC8lC,GACfA,EAAIlB,WACJ7Q,GAAS,KAGVA,GAGHmR,GAAAzoC,UAAAkpC,aAAR,WAAA,IAAAjmC,EAAAnD,KACIA,KAAK6oC,cAAgB,EACrB5gC,WAAU,WACN9E,EAAKylC,UAAUzlC,EAAK0lC,uCApH/BpkC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,cACVa,SAAA,q8BAEAC,KAAM,CACFhC,QAAO,kBAEXkC,cAAeC,EAAAA,kBAAkBC,KACjCgK,UAAW,CAACu5B,4FAbPA,0CAkBJhG,EAAAA,gBAAe1+B,KAAA,CAACskC,sBAIhBvf,EAAAA,aAAY/kB,KAAA,CAAC,kCAIbd,EAAAA,mCAIAwH,EAAAA,UA8FLq+B,IAxFI,SAAAA,GACYI,GAAA/oC,KAAA+oC,YAAAA,EAVZ/oC,KAAA6oC,cAAwB,EAIxB7oC,KAAAwpC,oBAAsB,IAAI5+B,EAAAA,aCnC9B,IAAA5H,GAAA2mC,IAOsCzmC,EAAAA,GAPtCF,GAOsCnB,GAgBlC8nC,GAAAzpC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,iBACpB9B,KAAKwlB,QACLxlB,KAAK8B,mBAAmB,qCA1BnC6B,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,gBACVc,KAAM,CACFC,KAAQ,qDAjBId,EAAAA,+CAuBfhB,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,wCAOZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,yBAgBjB+lC,IAJI,SAAAA,GAAmB5mC,GAAnB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADFmD,EAAAJ,WAAAA,IC/BvB,IAAA6mC,yBAACjmC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,gBACVc,KAAM,CACFhC,QAAS,wDAMZghB,EAAAA,aAAY/f,KAAA,CAAC+lC,OAClBC,IAXA,SAAAA,MC2BA,IAAAC,IA8BIrqC,OAAAuT,eAAW82B,GAAA3pC,UAAA,WAAQ,KAAnB,eACQwpC,EAA+B,GAGnC,OAFI1pC,KAAK8pC,QAASJ,EAAWA,EAAS9nC,OAAO5B,KAAK8pC,MAAMt3B,IAAG,SAACu3B,GAAQ,OAAAA,MAChE/pC,KAAKgqC,QAASN,EAAWA,EAAS9nC,OAAO5B,KAAKgqC,MAAMt7B,OAAM,SAAChM,GAAQ,QAAEA,EAAKunC,WAAUz3B,IAAG,SAAC9P,GAAQ,OAAAA,EAAKunC,aAClGP,mCAIJG,GAAA3pC,UAAAyjC,mBAAP,WAAA,IAAAxgC,EAAAnD,KACIA,KAAK8oC,uBAAyB9oC,KAAK+oC,YAAYL,YAAYv6B,UAAS,SAACuE,GACjEvP,EAAKylC,UAAUl2B,KAGnB1S,KAAK0pC,SAASjmC,QAAO,SAAEmgC,EAAalxB,GAChCvP,EAAKue,SAASC,OAAOiiB,EAAY7gC,WAAW2E,cAAe,UAAS,SAAGa,GACnEpF,EAAK4lC,YAAYR,oBAAoB71B,EAAOnK,EAAOpF,EAAKumC,SAASl3B,IAAG,SAACu3B,GAAQ,OAAAA,EAAKhnC,WAAW2E,sBAMzGmiC,GAAA3pC,UAAAua,YAAA,WACIza,KAAK8oC,uBAAuBz6B,eAOhCw7B,GAAA3pC,UAAA0oC,UAAA,SAAUS,GACNrpC,KAAK0pC,SAASL,GAAUtmC,WAAW2E,cAAcid,8BA5DxDhhB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,eACVc,KAAM,CACFhC,QAAS,UACTiC,KAAQ,WAEZmK,UAAW,CAACu5B,kDAxCZ1lB,EAAAA,iBAIK0lB,sCAyCJhG,EAAAA,gBAAe1+B,KAAA,CAAC+lC,mBAGhBrH,EAAAA,gBAAe1+B,KAAA,CAACgmC,uBAMhBt/B,EAAAA,UAyCLu/B,IAtCI,SAAAA,GACYnoB,EACAqnB,GADA/oC,KAAA0hB,SAAAA,EACA1hB,KAAA+oC,YAAAA,EALF/oC,KAAAgxB,UAAY,IAAIpmB,EAAAA,aC7D9B,IAAAs/B,yBAWClmC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVukC,GACAT,GACAH,GACAC,GACA6B,GACAF,GACAC,IAEJ3lC,QAAS,CACLC,EAAAA,cAEJC,QAAS,CACLwkC,GACAT,GACAH,GACAC,GACA6B,GACAD,GACAD,QAGiBO,IAvBzB,SAAAA,MCGA,IAAAlnC,GAAAmnC,IAQmCjnC,EAAAA,GARnCF,GAQmCnB,GAiB/BsoC,GAAAjqC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,WACpB9B,KAAK+V,UACL/V,KAAK8B,mBAAmB,eAExB9B,KAAKoqC,SACLpqC,KAAK8B,mBAAmB,wBAA0B9B,KAAKoqC,SAEvDpqC,KAAK09B,YACL19B,KAAK8B,mBAAmB,2BAA6B9B,KAAK09B,YAE1D19B,KAAK20B,aACL30B,KAAK8B,mBAAmB,kCAAoC9B,KAAK20B,mCArC5ElwB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,UACVc,KAAM,CACF0lC,cAAe,4CAEnB3lC,SAAA,wIACAG,cAAeC,EAAAA,kBAAkBC,mDApBjBjB,EAAAA,iDAwBfhB,EAAAA,wBAGAA,EAAAA,uBAGAA,EAAAA,0BAGAA,EAAAA,2BAGAA,EAAAA,SAuBLqnC,IAHI,SAAAA,GAAoBpnC,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAhCXI,EAAA4S,UAAoB,EAGpB5S,EAAAmnC,UAAoB,IChBjC,IAAAC,yBAAC5mC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,oBACVc,KAAM,CACFhC,QAAO,wBAGoB4nC,IARnC,SAAAA,MCAA,IAAAC,yBAAC7mC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,iEAITkH,EAAAA,YAAWnH,KAAA,CAAC,2BAEjB4mC,IATA,SAAAA,KAQIxqC,KAAAyqC,kBAA4B,ECNhC,IAAAC,yBAAC/mC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,kBACVc,KAAM,CACFhC,QAAO,sBAGkB+nC,IARjC,SAAAA,MCAA,IAAAC,yBAAChnC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,oBACVc,KAAM,CACFhC,QAAO,wBAGoBgoC,IAPnC,SAAAA,MCEA,IAAA3nC,GAAA4nC,IAc0C1nC,EAAAA,GAd1CF,GAc0CnB,GAQtC+oC,GAAA1qC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,mBACpB9B,KAAK+V,UACL/V,KAAK8B,mBAAmB,qCAzBnC2C,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,kBACVc,KAAM,CACF0lC,cAAe,2CACfQ,iCAAkC,QAEtCnmC,SAAA,wJACAG,cAAeC,EAAAA,kBAAkBC,aACxB,mIAvBOjB,EAAAA,iDA+BfhB,EAAAA,wBAGAA,EAAAA,SAcL8nC,IAHI,SAAAA,GAAoB7nC,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,EAdXI,EAAA4S,UAAoB,EAGpB5S,EAAAmnC,UAAoB,ICxBjC,IAAAtnC,GAAA8nC,IAI+C5nC,EAAAA,GAJ/CF,GAI+CnB,GAU3CipC,GAAA5qC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,0BACpB9B,KAAK+qC,OACL/qC,KAAKqC,mBAAmB,mBAAoB,OAASrC,KAAK+qC,MAAQ,2BAjB7EpnC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,wEAZMC,EAAAA,8CAgBfhB,EAAAA,SAcLgoC,IAXI,SAAAA,GAAoB/nC,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,ICTxB,IAAAioC,yBAACrnC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,4BACVc,KAAM,CACFhC,QAAS,gCAGyBqoC,IAP1C,SAAAA,MCFA,IAAAC,yBAACtnC,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,gFAITkH,EAAAA,YAAWnH,KAAA,CAAC,mCAEjBqnC,IATA,SAAAA,KAQIjrC,KAAAkrC,yBAAmC,ECQvC,IAAAloC,GAAAmoC,IAKuCjoC,EAAAA,GALvCF,GAKuCnB,GAQnCspC,GAAAjrC,UAAA0C,eAAA,WACI5C,KAAK8B,mBAAmB,gBACpB9B,KAAKg/B,KACLh/B,KAAK8B,mBAAmB,iBAAmB9B,KAAKg/B,IAAM,6BAhBjEr7B,EAAAA,UAASC,KAAA,CAAC,CAGPC,SAAU,+DA3BMC,EAAAA,4CAkCfhB,EAAAA,SAcLqoC,IAHI,SAAAA,GAAoBpoC,GAApB,IAAAI,EACIH,GAAApC,KAAAZ,KAAM+C,IAAW/C,YADDmD,EAAAJ,WAAAA,IC7CxB,IAAAqoC,yBAcCpnC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVC,QAAS,CACLgmC,GACAI,GACAC,GACAE,GACAC,GACAC,GACAE,GACAE,GACAC,GACAE,IAEJ/mC,aAAc,CACV+lC,GACAI,GACAC,GACAE,GACAC,GACAC,GACAE,GACAE,GACAC,GACAE,QAGiBC,IA3BzB,SAAAA,MCdA,IAAAC,IAkBIA,GAAAnrC,UAAA2C,SAAA,WACI7C,KAAKsrC,cAAe,GAGxBD,GAAAnrC,UAAAqrC,sBAAA,SAAsBC,GACdA,IAAY78B,UACZ3O,KAAKsrC,aAAeE,EAEpBxrC,KAAKsrC,cAAgBtrC,KAAKsrC,cAIlCD,GAAAnrC,UAAAurC,OAAA,SAAOC,OACCC,EAOJ,MANwB,iBAAbD,EACPC,EAAS,SACkB,iBAAbD,IACdC,EAAS,UAGNA,GAGXN,GAAAnrC,UAAA0rC,aAAA,SAAaC,GACLA,GACA7rC,KAAK8rC,YAAYlkC,KAAKikC,IAI9BR,GAAAnrC,UAAA6rC,eAAA,SAAeF,GACPA,GACA7rC,KAAKgsC,cAAcpkC,KAAKikC,yBA9CnCpnC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,gBACVa,SAAA,07EAGC5B,EAAAA,4BAEAA,EAAAA,kCAEAA,EAAAA,2BAEAwH,EAAAA,8BAEAA,EAAAA,UAoCL+gC,IAjDA,SAAAA,KAWcrrC,KAAA8rC,YAAiC,IAAIlhC,EAAAA,aAErC5K,KAAAgsC,cAAmC,IAAIphC,EAAAA,aChBrD,IAAAqhC,IAiCIA,GAAA/rC,UAAA2C,SAAA,WACI7C,KAAKwrC,SAAU,GAGnBS,GAAA/rC,UAAAyjC,mBAAA,WAAA,IAAAxgC,EAAAnD,KACQA,KAAKksC,UAAYlsC,KAAKksC,SAASvrC,QAC/BX,KAAKksC,SAASzoC,QAAO,SAACooC,GAClB1oC,EAAKgpC,cAAcN,EAAK,GACxB1oC,EAAKipC,yBAAyBP,MAK1CI,GAAA/rC,UAAAmsC,iBAAA,WAAA,IAAAlpC,EAAAnD,KACIA,KAAKwrC,SAAWxrC,KAAKwrC,QACrBxrC,KAAKssC,aAAa7oC,QAAO,SAAC8oC,GACtBA,EAAMhB,sBAAsBpoC,EAAKqoC,YAIzCS,GAAA/rC,UAAAisC,cAAA,SAAcN,EAAKW,GAAnB,IAAArpC,EAAAnD,KACgB,EAARwsC,IACAX,EAAIY,cAAgB,4BAA8BD,GAElDX,EAAIxM,UACJwM,EAAIxM,SAAS57B,QAAO,SAAC8oC,GACjBppC,EAAKgpC,cAAcI,EAAOC,EAAQ,GAClCrpC,EAAKipC,yBAAyBG,MAK1CN,GAAA/rC,UAAAksC,yBAAA,SAAyBP,GACrB,GACIA,GACAA,EAAIa,SACJb,EAAIa,QAAQ/rC,QACc,iBAAnBkrC,EAAIa,QAAQ,IACnB1sC,KAAK2sC,SACL3sC,KAAK2sC,QAAQhsC,OAEb,KAAOkrC,EAAIa,QAAQ/rC,OAASX,KAAK2sC,QAAQhsC,QACrCkrC,EAAIa,QAAQlrC,KAAK,SAElB,GACHqqC,GACAA,EAAIa,SACJb,EAAIa,QAAQ/rC,QACc,iBAAnBkrC,EAAIa,QAAQ,IACnB1sC,KAAK2sC,SACL3sC,KAAK2sC,QAAQhsC,OAEb,KAAOkrC,EAAIa,QAAQ/rC,OAASX,KAAK2sC,QAAQhsC,QACrCkrC,EAAIa,QAAQlrC,KAAK,CACb67B,YAAa,MAM7B4O,GAAA/rC,UAAA4rC,YAAA,SAAYD,GACR7rC,KAAK4sC,eAAehlC,KAAKikC,IAG7BI,GAAA/rC,UAAA8rC,cAAA,SAAcH,GACV7rC,KAAK6sC,iBAAiBjlC,KAAKikC,yBApFlCpnC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,UACVa,SAAA,u7BAGC5B,EAAAA,wBAEAA,EAAAA,uBAEAA,EAAAA,kCAEAA,EAAAA,8BAEAwH,EAAAA,iCAEAA,EAAAA,6BAEAqe,EAAAA,aAAY/kB,KAAA,CAACynC,OAqElBY,IAtFA,SAAAA,KAacjsC,KAAA4sC,eAAoC,IAAIhiC,EAAAA,aAExC5K,KAAA6sC,iBAAsC,IAAIjiC,EAAAA,aC7BxD,IAAAkiC,yBASC9oC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAAC6nC,GAAeZ,IAC9BpnC,QAAS,CAACC,EAAAA,aAAcH,EAAciB,EAAY+e,GAAekB,IACjE9gB,QAAS,CAAC8nC,GAAeZ,QAEJyB,IALzB,SAAAA,MCTA,IAAAC,GAAA,SAAAA,OCGA,SAAgBC,KACZ,OAAO,IAAIC,GAMf,IAAAC,yBAAC7/B,EAAAA,WAAUzJ,KAAA,CAAC,CACRwM,WAAY,OACZW,WAAYi8B,0FAFhB,SAAAE,MAyBA,IAAAlqC,GAAAiqC,IAC6C/pC,EAAAA,GAD7CF,GAC6CkqC,IAQlCD,GAAA/sC,UAAAkpB,MAAP,SAAa3nB,EAAemsB,EAAgCnB,QAAhC,IAAAmB,IAAAA,GAAA,OAClBrB,EAAO,IAAIwgB,GAEjB,IAAKtgB,EAAU,CAMX,IALImB,EACS,mDAEA,uCAEFuf,KAAK1rC,GAAQ,KACd2rC,EAAc3rC,EAAMW,MAAM,KAMhC,OALAmqB,EAAKG,KAAO2gB,SAASD,EAAY,GAAI,IACrC7gB,EAAKa,OAASigB,SAASD,EAAY,GAAI,IACnCxf,IACArB,EAAKc,OAASggB,SAASD,EAAY,GAAI,KAEpC7gB,EAEP,OAAO,KAER,GAAIE,EAAU,CAMjB,IALImB,EACS,8DAEA,kDAEFuf,KAAK1rC,GAAQ,KACdmrB,EAASnrB,EAAMW,MAAM,KAAK,GAahC,OAXMgrC,EAAc3rC,EAAMW,MAAM,KAChCmqB,EAAKG,KAAO2gB,SAASD,EAAY,GAAI,KACpB,OAAXxgB,GAA8B,OAAXA,IAAqBL,EAAKG,KAAO,GACtDH,EAAKG,KAAOH,EAAKG,KAAO,GACJ,OAAXE,GAA8B,OAAXA,GAAkC,KAAdL,EAAKG,OACrDH,EAAKG,KAAO,GAEhBH,EAAKa,OAASigB,SAASD,EAAY,GAAI,IACnCxf,IACArB,EAAKc,OAASggB,SAASD,EAAY,GAAI,KAEpC7gB,EAEP,OAAO,OAUZ0gB,GAAA/sC,UAAAqpB,OAAP,SAAcgD,EAAkBE,OACxB6gB,EAAeC,EAAiBC,EAChCC,EACAC,EAwCJ,OAvCkB,OAAdnhB,EAAKG,OACDD,EAGIihB,EAFc,IAAdnhB,EAAKG,MACL4gB,EAAgB,GACI,MACD,GAAZ/gB,EAAKG,MACZ4gB,EAAgB/gB,EAAKG,KAAO,GACR,MACC,KAAdH,EAAKG,MACZ4gB,EAAgB,GACI,OAEpBA,EAAgB/gB,EAAKG,KACD,MAGxB4gB,EAAgB/gB,EAAKG,MAGT,OAAhBH,EAAKa,SACLmgB,EAAkBhhB,EAAKa,OAAS,GAAK,IAAMb,EAAKa,OAASb,EAAKa,QAG9C,OAAhBb,EAAKc,SACLmgB,EAAkBjhB,EAAKc,OAAS,GAAK,IAAMd,EAAKc,OAASd,EAAKc,SAE9DigB,GAAmC,IAAlBA,IACjBG,EAAgBH,GACZC,GAAuC,OAApBA,IACnBE,EAAgBA,EAAgB,IAAMF,GAClCC,GAAuC,OAApBA,IACnBC,EAAgBA,EAAgB,IAAMD,KAI9CE,GAAqBD,IACrBA,GAAiB,IAAMC,GAGpBD,wBAxGdpgC,EAAAA,aA0GD4/B,IA1GA,SAAAA,sDCnCA,IAAAU,IAuGIA,GAAAztC,UAAA2C,SAAA,WACI7C,KAAK4qB,YAAc5qB,KAAK4tC,kBAM5BD,GAAAztC,UAAAkV,QAAA,WACI,OAAOpV,KAAKusB,MAIhBohB,GAAAztC,UAAA2tC,iBAAA,eACUJ,EAAgBztC,KAAK8tC,YAAYvkB,OAAOvpB,KAAKusB,KAAMvsB,KAAKysB,UAC9D,OAAOghB,IAAkB9+B,UAAY8+B,EAAgB,IAIzDE,GAAAztC,UAAA6tC,iBAAA,SAAiBC,OACPzhB,EAAOvsB,KAAK8tC,YAAY1kB,MAAM4kB,EAAehuC,KAAK4tB,eAAgB5tB,KAAKysB,UACzEF,GACAvsB,KAAKiuC,oBAAqB,EAC1BjuC,KAAKusC,MAAM/f,mBACXxsB,KAAKusB,KAAO/sB,OAAOa,OAAOL,KAAKusB,KAAMA,GACrCvsB,KAAK4c,SAAS2P,IAEVvsB,KAAKyqB,WAA+B,KAAlBujB,GAClBhuC,KAAKiuC,oBAAqB,EAC1BjuC,KAAKusC,MAAM/f,mBACXxsB,KAAK4c,SAAS,CAAC8P,KAAM,KAAMwhB,QAAS,KAAMC,QAAS,QAEnDnuC,KAAKiuC,oBAAqB,GAMtCN,GAAAztC,UAAAkuC,kBAAA,SAAkBrY,GACT/1B,KAAK4f,QAAW5f,KAAK+V,WACtBggB,EAAOpgB,kBACP3V,KAAK4f,QAAS,IAKtB+tB,GAAAztC,UAAAmuC,eAAA,WACSruC,KAAK4f,SACN5f,KAAK4f,QAAS,IAKtB+tB,GAAAztC,UAAA81B,mBAAA,WACSh2B,KAAK+V,WACN/V,KAAK4f,QAAU5f,KAAK4f,SAK5B+tB,GAAAztC,UAAAouC,cAAA,WACItuC,KAAK4f,QAAS,GAIlB+tB,GAAAztC,UAAA0tC,eAAA,WAgBI,OAdI5tC,KAAK4tB,eACD5tB,KAAKysB,SACI,iBAEA,WAGTzsB,KAAKysB,SACI,cAEA,SAQrBkhB,GAAAztC,UAAAquC,6BAAA,WACIvuC,KAAKwuC,GAAGjnC,gBACRvH,KAAK4c,SAAS5c,KAAKusB,OAIvBohB,GAAAztC,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAIpBgxB,GAAAztC,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAIrBgxB,GAAAztC,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,GAIpB2wB,GAAAztC,UAAAic,WAAA,SAAWoQ,GACFA,IAGLvsB,KAAKusB,KAAOA,yBA9MnB9nB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,iBACVa,SAAA,q/EACAC,KAAM,CACF8Z,SAAU,cACV9b,QAAO,wBAEXoM,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAqvB,KAC9BpvB,OAAO,IAIf1Z,cAAeC,EAAAA,kBAAkBC,kMArB5B+E,EAAAA,yBAIAojC,gDAsBJniC,EAAAA,YAAWnH,KAAA,CAAC,sCAWZd,EAAAA,uBAIAA,EAAAA,wBAKAA,EAAAA,wBAIAA,EAAAA,wBAIAA,EAAAA,8BAIAA,EAAAA,8BAIAA,EAAAA,4BAIAA,EAAAA,wBAIAA,EAAAA,oCAIAA,EAAAA,yBAIAA,EAAAA,qBAOAqH,EAAAA,UAASvG,KAAA,CAAC0oB,OAqIfqhB,IAFI,SAAAA,GAAoBa,EACDV,GADC9tC,KAAAwuC,GAAAA,EACDxuC,KAAA8tC,YAAAA,EA9LnB9tC,KAAAyuC,iBAAkB,EAWlBzuC,KAAAusB,KAAmB,CAAEG,KAAM,EAAGU,OAAQ,EAAGC,OAAQ,GAIjDrtB,KAAAoD,SAAmB,EAKnBpD,KAAAysB,UAAoB,EAQpBzsB,KAAAuuB,UAAoB,EAIpBvuB,KAAA4tB,gBAA0B,EAI1B5tB,KAAAwuB,gBAA0B,EAI1BxuB,KAAAyuB,cAAwB,EAIxBzuB,KAAAsc,UAAoB,EAIpBtc,KAAA0uC,qBAA+B,oBAI/B1uC,KAAAyqB,WAAqB,EAGrBzqB,KAAAiuC,oBAA8B,EAgB9BjuC,KAAA4c,SAAQ,aAER5c,KAAA8c,UAAS,aCpGb,IAAA6xB,yBAWC3qC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACupC,IACf1pC,QAAS,CAACC,EAAAA,aAAc6kB,EAAAA,YAAahF,GAAeyS,GAAkBpF,IACtEjtB,QAAS,CAACwpC,QAEiBgB,IAL/B,SAAAA,UCRIC,GAAyB,EAM7BC,IA+DIA,GAAA3uC,UAAA2C,SAAA,WACQ7C,KAAKwE,MAAsB,OAAdxE,KAAKwE,MAA+B,MAAdxE,KAAKwE,MAA8B,MAAdxE,KAAKwE,OAC7DxE,KAAKwE,KAAO,OAKbqqC,GAAA3uC,UAAAoX,MAAP,WACItX,KAAK8uC,aAAapnC,cAAc4P,SAIpC9X,OAAAuT,eAAI87B,GAAA3uC,UAAA,eAAY,KAAhB,WACI,OAAUF,KAAKwK,GAAE,0CAIrBhL,OAAAuT,eAAI87B,GAAA3uC,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK62B,aAIhB,SAAcp1B,GACVzB,KAAK62B,QAAUp1B,EACfzB,KAAK4c,SAASnb,GACdzB,KAAK8c,YACL9c,KAAK+uC,cAAcnnC,KAAKnG,oCAO5BotC,GAAA3uC,UAAAic,WAAA,SAAW1a,GACPzB,KAAK62B,QAAUp1B,GAOnBotC,GAAA3uC,UAAAwc,iBAAA,SAAiBC,GACb3c,KAAK4c,SAAWD,GAOpBkyB,GAAA3uC,UAAA2c,kBAAA,SAAkBF,GACd3c,KAAK8c,UAAYH,GAOrBkyB,GAAA3uC,UAAA6c,iBAAA,SAAiBC,GACbhd,KAAK+V,SAAWiH,wBAzHvBvY,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,YACVa,SAAA,wnBAEAqK,UAAW,CACP,CACIoP,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAuwB,KAC9BtwB,OAAO,IAGf5Z,KAAM,CACFhC,QAAO,sDACPgH,YAAa,MAEjB9E,cAAeC,EAAAA,kBAAkBC,4FAIhCoF,EAAAA,UAASvG,KAAA,CAAC,uBAOVd,EAAAA,wBAIAA,EAAAA,kBAIAA,EAAAA,uBAIAA,EAAAA,yBAIAA,EAAAA,8BAIAA,EAAAA,6BAOAwH,EAAAA,UAuELukC,IA5HA,SAAAA,KA+BI7uC,KAAA+V,UAAoB,EAIpB/V,KAAAwK,GAAa,aAAeokC,KAI5B5uC,KAAA62B,SAAmB,EAInB72B,KAAA0K,UAAoB,KAIpB1K,KAAAgvC,eAAyB,KAOhBhvC,KAAA+uC,cAAuC,IAAInkC,EAAAA,aAGpD5K,KAAA4c,SAAQ,aAGR5c,KAAA8c,UAAS,aCrEb,IAAAmyB,yBAKCjrC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CAACyqC,IACf5qC,QAAS,CAACC,EAAAA,aAAc6kB,EAAAA,aACxB5kB,QAAS,CAAC0qC,QAEaI,IAL3B,SAAAA,MCKA,IAAAC,yBAACvrC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,uEAQTkH,EAAAA,YAAWnH,KAAA,CAAC,8BAEjBsrC,IAZA,SAAAA,MAsBA,IAAAC,yBAACxrC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,0EAQTkH,EAAAA,YAAWnH,KAAA,CAAC,sEAMZmH,EAAAA,YAAWnH,KAAA,CAAC,4CAEjBurC,IAlBA,SAAAA,KAiBWnvC,KAAAovC,mCAA6C,EAcxD,IAAAC,yBAAC1rC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,qCAEwBwrC,IAJtC,SAAAA,MAgBA,IAAAC,yBAAC3rC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,uCAE0ByrC,IAJxC,SAAAA,MASA,IAAAC,IAgBIA,GAAArvC,UAAA2C,SAAA,WACI7C,KAAKknC,QAAQ/9B,QACbnJ,KAAKmnC,WAAannC,KAAKknC,QAAQp+B,mBAAmB9I,KAAK2N,+BAlB9DhK,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,oFA1FgEwG,EAAAA,sDA8FzEvH,EAAAA,MAAKc,KAAA,CAAC,wCAcX2rC,IAPI,SAAAA,GAAoBrI,GAAAlnC,KAAAknC,QAAAA,EC7ExB,IAAAsI,IA+BIA,GAAAtvC,UAAA2C,SAAA,WACI7C,KAAKyvC,qBAGTD,GAAAtvC,UAAAsC,YAAA,WACIxC,KAAKyvC,qBAGTD,GAAAtvC,UAAAyjC,mBAAA,WACQ3jC,KAAK0vC,WACL1vC,KAAKwI,KAAO,aAIZgnC,GAAAtvC,UAAAuvC,kBAAR,WACQzvC,KAAK2vC,QACL3vC,KAAK2vC,MAAMvsC,QAAUpD,KAAKoD,SAE1BpD,KAAK0vC,WACL1vC,KAAK0vC,SAAStsC,QAAUpD,KAAKoD,+BAlDxCqB,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,8BACVa,SAAA,wsBACAG,cAAeC,EAAAA,kBAAkBC,yCAQhCjC,EAAAA,uBAIAA,EAAAA,qBAIA6gB,EAAAA,aAAY/f,KAAA,CAACsrC,sBAIbvrB,EAAAA,aAAY/f,KAAA,CAACurC,2BAIbxrB,EAAAA,aAAY/f,KAAA,CAACyrC,GAAyB,CAAEjlC,KAAMjD,EAAAA,iBA0BnDqoC,IArDA,SAAAA,MCbA,IAAAxsC,GAAA4sC,IAKqD1sC,EAAAA,GALrDF,GAKqDwsC,yBALpD/qC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,8BACVa,SAAA,m6BACAG,cAAeC,EAAAA,kBAAkBC,SASrC6qC,IAZA,SAAAA,sDCMA,IAAAC,IAqDWA,GAAA3vC,UAAA2gB,OAAP,WACQ7gB,KAAK4f,OACL5f,KAAK8f,QAEL9f,KAAK8G,QAON+oC,GAAA3vC,UAAA4f,MAAP,WACQ9f,KAAK4f,SACL5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAO7BiwB,GAAA3vC,UAAA4G,KAAP,WACS9G,KAAK4f,SACN5f,KAAK4f,QAAS,EACd5f,KAAKghB,aAAapZ,KAAK5H,KAAK4f,UAQ7BiwB,GAAA3vC,UAAA4vC,iBAAP,SAAwBC,GAChB/vC,KAAKgwC,cACLhwC,KAAKgwC,YAAY3H,SAAW0H,yBAvFvCtrC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,yBACVa,SAAA,ysBAEAG,cAAeC,EAAAA,kBAAkBC,8JAKhCgG,EAAAA,YAAWnH,KAAA,CAAC,qDAIZ+f,EAAAA,aAAY/f,KAAA,CAACgsC,sBAKb9sC,EAAAA,yBAKAA,EAAAA,sBAIAA,EAAAA,mCAIAA,EAAAA,gCAIAA,EAAAA,4BAIAwH,EAAAA,yBAIAxH,EAAAA,uBAIAA,EAAAA,SA2CL+sC,IA1FA,SAAAA,KAUI7vC,KAAAiwC,2BAAqC,EASrCjwC,KAAAygB,SAAqB,CAAC,SAStBzgB,KAAA4f,QAAkB,EAIlB5f,KAAAyiB,qBAA+B,EAI/BziB,KAAA6f,kBAA4B,EAInB7f,KAAAghB,aAAsC,IAAIpW,EAAAA,aAQnD5K,KAAAoD,SAAmB,ECjEvB,IAAA8sC,yBAiBClsC,EAAAA,SAAQJ,KAAA,CAAC,CACNQ,aAAc,CACVyrC,GACAD,GACAJ,GACAN,GACAG,GACAE,GACAJ,GACAG,IAEJnrC,QAAS,CACL0rC,GACAL,GACAI,GACAV,GACAG,GACAE,GACAJ,GACAG,IAEJrrC,QAAS,CAACC,EAAAA,aAAc6f,GAAewQ,GAAYiC,GAAkBvR,QAElCirB,IAvBvC,SAAAA,MCKA,IAAAC,yBAAC1rC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,eACVa,SAAA,sEAEAG,cAAeC,EAAAA,kBAAkBC,qBAELorC,IANhC,SAAAA,MCdA,IAAAC,IAeWA,GAAAlwC,UAAAoX,MAAP,WACItX,KAAK0kB,OAAOhd,cAAc4P,SAGvB84B,GAAAlwC,UAAAykB,MAAP,WACI3kB,KAAK0kB,OAAOhd,cAAcid,8BApBjChhB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,yBACVc,KAAM,CACFob,SAAY,mDAZAjc,EAAAA,wDAiBfiH,EAAAA,YAAWnH,KAAA,CAAC,kCAajBwsC,IATI,SAAAA,GAAoB1rB,GAAA1kB,KAAA0kB,OAAAA,EAHpB1kB,KAAAqwC,iBAA2B,ECN/B,IAAAC,IAmBIA,GAAApwC,UAAAqwC,oBADA,SACoBhoC,GAChBvI,KAAKwwC,QAAQ5oC,KAAKW,IAIf+nC,GAAApwC,UAAAoX,MAAP,WACItX,KAAK+pC,KAAKzyB,SAIPg5B,GAAApwC,UAAAykB,MAAP,WACI3kB,KAAK+pC,KAAKplB,8BA9BjBhhB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,uEAITkH,EAAAA,YAAWnH,KAAA,CAAC,6CAIZ+f,EAAAA,aAAY/f,KAAA,CAACwsC,qBAIb9lC,EAAAA,oCAIAC,EAAAA,aAAY3G,KAAA,CAAC,UAAW,CAAC,cAc9B0sC,IAhCA,SAAAA,KAOItwC,KAAAqwC,iBAA2B,EAQlBrwC,KAAAwwC,QAAuC,IAAI5lC,EAAAA,aCnBxD,IAAA6lC,IA0BWA,GAAAvwC,UAAAoX,MAAP,WACItX,KAAK0kB,OAAOhd,cAAc4P,SAGvBm5B,GAAAvwC,UAAAykB,MAAP,WACI3kB,KAAK0kB,OAAOhd,cAAcid,8BA/BjChhB,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,sBACVc,KAAM,CACFob,SAAY,mDAZAjc,EAAAA,wDAiBfiH,EAAAA,YAAWnH,KAAA,CAAC,8CAIZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,oBAAiB,CAAA4E,KAC7BuC,EAAAA,YAAWnH,KAAA,CAAC,0CAIZd,EAAAA,OAAK,CAAA0F,KACLuC,EAAAA,YAAWnH,KAAA,CAAC,yBAajB6sC,IATI,SAAAA,GAAoB/rB,GAAA1kB,KAAA0kB,OAAAA,EAdpB1kB,KAAAqwC,iBAA2B,EAM3BrwC,KAAA0wC,UAAoB,EAKpB1wC,KAAA2wC,YAAsB,ECa1B,IAAAC,IAoDIA,GAAA1wC,UAAAqwC,oBADA,SACoBhoC,GAChB,OAAQA,EAAM6L,MACV,IAAA,YACIpU,KAAK6wC,eACL7wC,KAAK+pC,KAAKzyB,QACV,MAEJ,IAAA,aACA,IAAA,QACA,IAAA,QACItX,KAAK8wC,cACL9wC,KAAK+wC,mBAAmBxpC,gBACpBvH,KAAKgxC,SAAS/pB,OACdjnB,KAAKgxC,SAAS/pB,MAAM3P,QAExB/O,EAAM8L,iBACN,MAEJ,QACIrU,KAAKwwC,QAAQ5oC,KAAKW,KAO9BqoC,GAAA1wC,UAAAsiB,aADA,SACaja,GAEJvI,KAAKyH,MAAMC,cAAcib,SAASpa,EAAMma,SACzC1iB,KAAK6wC,gBAMbD,GAAA1wC,UAAA8gC,SADA,WAEI,GAAIhhC,KAAK8G,MAAQ9G,KAAKixC,yBAA0B,CAC5CjxC,KAAK+wC,mBAAmBxpC,gBAOxB,QANI2pC,EAAqBlxC,KAAKmxC,QAAQzpC,cAAc0pC,wBAAwBnvB,MAMrEivB,EAAqBjQ,OAAOW,YAAkD,EAApC5hC,KAAKqxC,8BAClDrxC,KAAKmxC,QAAQzpC,cAAcnF,MAAMwf,KAAQ/hB,KAAKqxC,6BAA+B,EAAK,IAClFrxC,KAAK+wC,mBAAmBxpC,gBACxB2pC,EAAqBlxC,KAAKmxC,QAAQzpC,cAAc0pC,wBAAwBnvB,MAO5E,KAAOivB,EAAqBjQ,OAAOW,YAAc5hC,KAAKqxC,6BAA+B,KACjFrxC,KAAKmxC,QAAQzpC,cAAcnF,MAAMwf,KAAQ/hB,KAAKqxC,6BAA+B,EAAK,IAClFrxC,KAAK+wC,mBAAmBxpC,gBACxB2pC,EAAqBlxC,KAAKmxC,QAAQzpC,cAAc0pC,wBAAwBnvB,QAMpF2uB,GAAA1wC,UAAAyjC,mBAAA,WAAA,IAAAxgC,EAAAnD,KACIA,KAAK+pC,KAAK2G,SAAkC,EAAvB1wC,KAAKgxC,SAASrwC,OACnCX,KAAKgxC,SAASvtC,QAAO,SAAEf,EAAgCgQ,GAAkB,OAAAhQ,EAAK8tC,QACzEn2B,KAAKC,EAAAA,UAAUnX,EAAKoX,aACpBpM,UAAS,SAAEmjC,GAAiC,OAAAnuC,EAAKouC,qBAAqBD,EAAe5+B,QAK9Fk+B,GAAA1wC,UAAAua,YAAA,WACIza,KAAKua,WAAWjZ,OAChBtB,KAAKua,WAAWG,YAOpBk2B,GAAA1wC,UAAAqxC,qBAAA,SAAqBhpC,EAAsBmK,GACvC1S,KAAK4mB,oBAAoBZ,eAAezd,EAAOmK,EAAO1S,KAAKgxC,SAAS3pB,WACjD,cAAf9e,EAAM6L,MAAuC,YAAf7L,EAAM6L,MACpC7L,EAAMoN,mBAKdi7B,GAAA1wC,UAAAykB,MAAA,WACI3kB,KAAK+pC,KAAKplB,SAIdisB,GAAA1wC,UAAAoX,MAAA,WACItX,KAAK+pC,KAAKzyB,SAIPs5B,GAAA1wC,UAAA+wC,uBAAP,WACI,MAAgC,UAAzBjxC,KAAKwxC,iBAITZ,GAAA1wC,UAAAuxC,WAAP,WACQzxC,KAAK8G,KACL9G,KAAK6wC,eAEL7wC,KAAK8wC,eAKNF,GAAA1wC,UAAA2wC,aAAP,WACI7wC,KAAK8G,MAAO,EACZ9G,KAAK+pC,KAAK4G,WAAa3wC,KAAK0xC,SAC5B1xC,KAAK2xC,WAAW/pC,KAAK5H,KAAK8G,OAIvB8pC,GAAA1wC,UAAA4wC,YAAP,WACI9wC,KAAK8G,MAAO,EACZ9G,KAAK+pC,KAAK4G,WAAa3wC,KAAK0xC,SAC5B1xC,KAAK2xC,WAAW/pC,KAAK5H,KAAK8G,MAC1B9G,KAAKghC,YAIF4P,GAAA1wC,UAAAwxC,OAAP,WACI,OAAO1xC,KAAK8G,MAA+B,EAAvB9G,KAAKgxC,SAASrwC,QAI9BiwC,GAAA1wC,UAAAmxC,2BAAR,eACUnvB,EAAS0vB,iBAAiB5xC,KAAKmxC,QAAQzpC,eAC7C,OAAIwa,EAAOH,KACHG,EAAOH,KAAKoG,SAAS,MACdmB,OAAOpH,EAAOH,KAAK3f,MAAM,MAAM,IAAMpC,KAAK6xC,cAAcnqC,cAAcoqC,YAAc,IACpF5vB,EAAOH,KAAKoG,SAAS,KACrBmB,OAAOpH,EAAOH,KAAK3f,MAAM,KAAK,SADlC,EAIA,0BAlMlBqC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,oBACVa,SAAA,0dAEAG,cAAeC,EAAAA,kBAAkBC,2XAxCjCjB,EAAAA,kBAYKiiB,UAhBLjc,EAAAA,wDAiDCw4B,EAAAA,gBAAe1+B,KAAA,CAAC0sC,kBAIhB3sB,EAAAA,aAAY/f,KAAA,CAAC6sC,qBAIbtmC,EAAAA,UAASvG,KAAA,CAAC,kCAIVuG,EAAAA,UAASvG,KAAA,CAAC,kCAIV0G,EAAAA,qBAOAxH,EAAAA,+BAIAA,EAAAA,0BAIAwH,EAAAA,oCAWAC,EAAAA,aAAY3G,KAAA,CAAC,UAAW,CAAC,iCA0BzB2G,EAAAA,aAAY3G,KAAA,CAAC,iBAAkB,CAAC,6BAShC2G,EAAAA,aAAY3G,KAAA,CAAC,oBA+GlBgtC,IAzJI,SAAAA,GACYnpC,EACAmf,EACAmqB,GAFA/wC,KAAAyH,MAAAA,EACAzH,KAAA4mB,oBAAAA,EACA5mB,KAAA+wC,mBAAAA,EArBH/wC,KAAAwwC,QAAuC,IAAI5lC,EAAAA,aAGnC5K,KAAAua,WAA4B,IAAI/T,EAAAA,QAIjDxG,KAAA8G,MAAgB,EAIhB9G,KAAAwxC,gBAAuC,QAI9BxxC,KAAA2xC,WAAoC,IAAI/mC,EAAAA,aCnDrD,IAAAmnC,IAuBIA,GAAA7xC,UAAAyjC,mBAAA,WAAA,IAAAxgC,EAAAnD,KACIA,KAAKgqC,MAAMvmC,QAAO,SAAEf,EAA6BgQ,GAAkB,OAAAhQ,EAAK8tC,QACnEn2B,KAAKC,EAAAA,UAAUnX,EAAKoX,aACpBpM,UAAS,SAAEmjC,GAAiC,OAAAnuC,EAAK6uC,kBAAkBV,EAAe5+B,QAK3Fq/B,GAAA7xC,UAAA8xC,kBAAA,SAAkBzpC,EAAsBmK,GACpC1S,KAAK4mB,oBAAoBZ,eAAezd,EAAOmK,EAAO1S,KAAKgqC,MAAM3iB,YAIrE0qB,GAAA7xC,UAAAua,YAAA,WACIza,KAAKua,WAAWjZ,OAChBtB,KAAKua,WAAWG,iCAtCvB/W,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,oEAvBLkiB,gDA4BJhb,EAAAA,YAAWnH,KAAA,CAAC,2CAIZ0+B,EAAAA,gBAAe1+B,KAAA,CAACgtC,OA6BrBmB,IAtBI,SAAAA,GACYnrB,GAAA5mB,KAAA4mB,oBAAAA,EAXZ5mB,KAAAqwC,iBAA2B,EAOVrwC,KAAAua,WAA4B,IAAI/T,EAAAA,QCvBrD,IAAAyrC,yBAACxtC,EAAAA,UAASb,KAAA,CAAC,CACPC,SAAU,qBACVa,SAAA,kMACAG,cAAeC,EAAAA,kBAAkBC,SAGAktC,IANrC,SAAAA,MCxBA,IAAAC,yBAECvuC,EAAAA,UAASC,KAAA,CAAC,CAEPC,SAAU,0EAITkH,EAAAA,YAAWnH,KAAA,CAAC,gCAEjBsuC,IARA,SAAAA,KAOIlyC,KAAAmyC,sBAAgC,ECTpC,IAAAC,yBAYCpuC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,QAAS,CAACC,EAAAA,cACVE,aAAc,CAAC+rC,GAAmB4B,GAAuBnB,GAAuBN,GAC5EF,GAA0BK,GAAuBwB,GAAwBC,IAC7E/tC,QAAS,CACLgsC,GACAM,GACAG,GACAN,GACAyB,GACA3B,GACA6B,GACAC,IAEJnjC,UAAW,CAACgX,QAEaqsB,IAhB7B,SAAAA,MCZA,IAAAC,yBAiDCruC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CAACC,EAAAA,aAAc6kB,EAAAA,aACxB5kB,QAAS,CACPqB,EACAqJ,GACAW,GACAI,GACA7L,EACAmM,GACA4O,GACAgK,GACAkC,GACAqG,GACAoC,GACAc,GACAvvB,EACA4vB,GACAG,GACAa,GACAhB,GACAc,GACAc,GACAS,GACAI,GACA6Y,GACAjrB,GACAmtB,GACAxX,GACAgB,GACA4B,GACAyB,GACAlb,GACAmc,GACAW,GACAiG,GACApE,GACAuB,GACAsD,GACAO,GACAoC,GACAkB,GACAha,GACAud,GACAM,GACAtT,GACAmR,IAEF/9B,UAAW,CAACvB,GAAc8rB,QAI5B+Y,IAnDA,SAAAA,MCjDA,eCGA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ElementRef, OnChanges, OnInit, Input } from '@angular/core';\n\n/*\n This abstract class allows the user to set their own custom styles on a Fundamental NGX directive, in addition to the\n styles the library needs to add itself.\n When library styles were added through the directive's host: {'[class]'} property, any styles the user added would be\n overwritten.  By extending this class, we instead add library styles to the user's classList rather than replace them.\n */\n\n/** @hidden */\nexport abstract class AbstractFdNgxClass implements OnInit, OnChanges {\n    private _elementRef: ElementRef;\n\n    /** @hidden */\n    @Input() class; // user's custom classes\n\n    /*\n     each directive that extends this class will implement this function and populate it with one or more calls to\n     the '_addClassToElement' function, passing the style names to be added with each call\n     */\n    /** @hidden */\n    abstract _setProperties(): void;\n\n    /** @hidden */\n    _addClassToElement(className: string) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(...className.split(' '));\n    }\n\n    /** @hidden */\n    _addStyleToElement(attribute, value) {\n        (this._elementRef.nativeElement as HTMLElement).style[attribute] = value;\n    }\n\n    /** @hidden */\n    protected constructor(elementRef: ElementRef) {\n        this._elementRef = elementRef;\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngOnChanges() {\n        const classList = (this._elementRef.nativeElement as HTMLElement).classList;\n        while (classList.length > 0) {\n            classList.remove(classList.item(0));\n        }\n        if (this.class) {\n            this._addClassToElement(this.class);\n        }\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this._setProperties();\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Button directive, used to enhance standard HTML buttons.\n *\n * ```html\n * <button fd-button>Button Text</button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-button]'\n})\nexport class ButtonDirective extends AbstractFdNgxClass {\n\n    /** Whether to apply compact mode to the button. */\n    @Input() compact: boolean;\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input() glyph: string;\n\n    /** The type of the button. Types include 'standard', 'positive', 'medium', and 'negative'.\n     * Leave empty for default (Action button).'*/\n    @Input() fdType: string;\n\n    /** @hidden */\n    @Input() semantic: string; // TODO: deprecated, leaving for backwards compatibility\n\n    /** Button options.  Options include 'emphasized' and 'light'. Leave empty for default.' */\n    @Input() options: string | string[];\n\n    /** @hidden */\n    @Input() size: string; // TODO: deprecated, leaving for backwards compatibility\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-button');\n        if (this.compact) {\n            this._addClassToElement('fd-button--compact');\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n        if (this.fdType) {\n            this._addClassToElement('fd-button--' + this.fdType);\n        }\n        if (this.options) {\n            if (typeof this.options === 'string') {\n                this._addClassToElement('fd-button--' + this.options);\n            } else if (Array.isArray(this.options)) {\n                this.options.forEach(option => {\n                    if (typeof option === 'string') {\n                        this._addClassToElement('fd-button--' + option);\n                    }\n                });\n            }\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonDirective } from './button.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ButtonDirective],\n    declarations: [ButtonDirective]\n})\nexport class ButtonModule {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/** \n * @hidden\n * The base class for the icon component \n */\nconst BASE_ICON_CLASS = 'sap-icon';\n\n/** \n * @hidden\n * Prefix for icon prop classes \n */\nconst PREFIX_ICON_CLASS = BASE_ICON_CLASS + '--';\n\n/**\n * The component that represents an icon.\n *\n * ```html\n * <fd-icon [glyph]=\"cart-approval\" [size]=\"'l'\"></fd-icon>\n * ```\n */\n@Component({\n    selector: 'fd-icon',\n    template: ``,\n    host: {\n        role: 'presentation'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class IconComponent extends AbstractFdNgxClass {\n\n    /** The icon name to display. See the icon page for the list of icons\n     * here: https://sap.github.io/fundamental-ngx/icon\n     * */\n    @Input() glyph;\n\n    /** \n     * The size of the icon\n     * The predefined values for the input size are *xs*, *s*, *l*, and *xl*.\n     * *size* can accept any other string, for example *xxs*, which will be translated into class *sap-icon--xxs*.\n     */\n    @Input() size: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        if (this.glyph) {\n            this._addClassToElement(PREFIX_ICON_CLASS + this.glyph);\n        }\n\n        if (this.size) {\n            this._addClassToElement(PREFIX_ICON_CLASS + this.size);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [IconComponent],\n    declarations: [IconComponent]\n})\nexport class IconModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * The parent action bar directive.\n *\n * Children usage:\n * ```html\n * <div fd-action-bar-actions>\n * <div fd-action-bar-back>\n * <div fd-action-bar-description>\n * <div fd-action-bar-header>\n * <div fd-action-bar-mobile>\n * <h1 fd-action-bar-title>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar]',\n    host: {\n        class: 'fd-action-bar'\n    }\n})\nexport class ActionBarDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar title component.\n *\n * ```html\n * <fd-action-bar>\n *     <div fd-action-bar-header>\n *         <h1 fd-action-bar-title>Page Title</h1>\n *     </div>\n * <fd-action-bar>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-title]',\n    host: {\n        class: 'fd-action-bar__title'\n    }\n})\nexport class ActionBarTitleDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar description.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-header>\n *         <div fd-action-bar-description>Page Description</div>\n *     </div>\n * <div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-description]',\n    host: {\n        class: 'fd-action-bar__description'\n    }\n})\nexport class ActionBarDescriptionDirective { }\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar header, which contains the action bar's title and description components.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-header>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-header]',\n    host: {\n        class: 'fd-action-bar__header'\n    }\n})\nexport class ActionBarHeaderDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * This component holds the right-aligned action buttons for the action bar.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-actions>\n *         <button fd-button [fdType]=\"'primary'\">Cancel</button>\n *         <button fd-button [fdType]=\"'main'\">Save</button>\n *     </div>\n * </div>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-actions]',\n    host: {\n        class: 'fd-action-bar__actions'\n    }\n})\nexport class ActionBarActionsDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The left-aligned back button for the action bar.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-back>\n *         <button aria-label=\"back\" fd-button [fdType]=\"'light'\" [compact]=\"true\" [glyph]=\"'nav-back'\"></button>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-back]',\n    host: {\n        class: 'fd-action-bar__back'\n    }\n})\nexport class ActionBarBackDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar mobile component. This component should wrap all other action bar components, including the <fd-action-bar>.\n *\n * ```html\n * <div fd-action-bar-mobile>\n *     <div fd-action-bar>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-mobile]'\n})\nexport class ActionBarMobileDirective { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\nimport { ActionBarDirective } from './action-bar.directive';\nimport { ActionBarTitleDirective } from './action-bar-title/action-bar-title.directive';\nimport { ActionBarDescriptionDirective } from './action-bar-description/action-bar-description.directive';\nimport { ActionBarHeaderDirective } from './action-bar-header/action-bar-header.directive';\nimport { ActionBarActionsDirective } from './action-bar-actions/action-bar-actions.directive';\nimport { ActionBarBackDirective } from './action-bar-back/action-bar-back.directive';\nimport { ActionBarMobileDirective } from './action-bar-mobile/action-bar-mobile.directive';\n\n@NgModule({\n    declarations: [\n        ActionBarDirective,\n        ActionBarTitleDirective,\n        ActionBarDescriptionDirective,\n        ActionBarHeaderDirective,\n        ActionBarActionsDirective,\n        ActionBarBackDirective,\n        ActionBarMobileDirective\n    ],\n    imports: [CommonModule, ButtonModule, IconModule],\n    exports: [\n        ActionBarDirective,\n        ActionBarTitleDirective,\n        ActionBarDescriptionDirective,\n        ActionBarHeaderDirective,\n        ActionBarActionsDirective,\n        ActionBarBackDirective,\n        ActionBarMobileDirective\n    ]\n})\nexport class ActionBarModule {}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger } from '@angular/animations';\n\nexport const alertFadeNgIf: AnimationTriggerMetadata = trigger(\n    'fadeAlertNgIf',\n    [\n        transition(\n            ':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate('250ms ease-in-out', style({\n                    opacity: 1\n                }))\n            ]\n        ),\n        transition(\n            ':leave', [\n                style({\n                    opacity: 1,\n                    marginTop: '*',\n                    paddingTop: '*',\n                    paddingBottom: '*',\n                    height: '*',\n                    overflow: 'hidden'\n                }),\n                animate('400ms ease-in-out', style({\n                    opacity: 0,\n                    marginTop: 0,\n                    paddingTop: 0,\n                    paddingBottom: 0,\n                    height: 0,\n                    overflow: 'hidden'\n                }))\n            ]\n        )\n    ]\n);\n\nexport const alertContainerNgIf: AnimationTriggerMetadata = trigger(\n    'alertContainerNgIf',\n    [\n        transition(\n            ':leave', [\n                style({opacity: 1}),\n                animate('400ms ease-in-out', style({opacity: 0}))\n            ]\n        )\n    ]\n);\n","import { Observable, Subject } from 'rxjs';\n\n/**\n * Reference to an alert component generated via the AlertService.\n * It can be injected into the content component in the same way a service would be injected.\n * For a template, add let-alert to your ng-template tag. Now using *alert* in the template refers to this class.\n */\nexport class AlertRef {\n    \n    private readonly _afterDismissed: Subject<any> = new Subject<any>();\n\n    /** Observable that is triggered when the alert is dismissed. */\n    public afterDismissed: Observable<any> = this._afterDismissed.asObservable();\n\n    /** Data passed from the service open method. */\n    public data: any;\n\n    /**\n     * Dismisses the alert.\n     *\n     * @param reason Data passed back to the calling component through the AfterDismissed observable.\n     */\n    dismiss(reason?: any): void {\n        this._afterDismissed.next(reason);\n    }\n}\n","import {\n    Component,\n    Input,\n    OnInit,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChild,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Type,\n    AfterViewInit,\n    ViewContainerRef,\n    TemplateRef,\n    Optional,\n    EmbeddedViewRef,\n    Output,\n    EventEmitter, ViewEncapsulation, HostListener, NgZone\n} from '@angular/core';\nimport { alertFadeNgIf } from './alert-utils/alert-animations';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\nimport { AlertRef } from './alert-utils/alert-ref';\n\nlet alertUniqueId: number = 0;\n\n/**\n * The component that represents an alert. It can be only be used inline.\n * If the AlertService is used, this component is auto-generated.\n */\n@Component({\n    selector: 'fd-alert',\n    templateUrl: './alert.component.html',\n    styleUrls: ['./alert.component.scss'],\n    host: {\n        '[attr.aria-labelledby]': 'ariaLabelledBy',\n        '[attr.aria-label]': 'ariaLabel',\n        '[style.width]': 'width',\n        '[style.min-width]': 'minWidth',\n        'role': 'alert',\n        '[attr.id]': 'id',\n        '[@fadeAlertNgIf]': ''\n    },\n    animations: [\n        alertFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AlertComponent extends AbstractFdNgxClass implements OnInit, AfterViewInit {\n\n    /** @hidden */\n    @ViewChild('container', {read: ViewContainerRef})\n    containerRef: ViewContainerRef;\n\n    /** Whether the alert is dismissible. */\n    @Input()\n    dismissible: boolean = true;\n\n    /** The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null. */\n    @Input()\n    type: string;\n\n    /** Id for the alert component. If omitted, a unique one is generated. */\n    @Input()\n    id: string = 'fd-alert-' + alertUniqueId++;\n\n    /** Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite. */\n    @Input()\n    duration: number = 10000;\n\n    /** Whether the alert should stay open if the mouse is hovering over it. */\n    @Input()\n    mousePersist: boolean = false;\n\n    /** Id of the element that labels the alert. */\n    @Input()\n    ariaLabelledBy: string = null;\n\n    /** Aria label for the alert component element. */\n    @Input()\n    ariaLabel: string = null;\n\n    /** Aria label for the dismiss button. */\n    @Input()\n    dismissLabel: string = 'Dismiss';\n\n    /** Width of the alert. */\n    @Input()\n    width: string;\n\n    /** Minimum width of the alert. */\n    @Input()\n    minWidth: string;\n\n    /** Alternative way of passing in a message to the alert. */\n    @Input()\n    message: string;\n\n    /** Event fired when the alert is dismissed. */\n    @Output()\n    onDismiss: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n    /** @hidden */\n    mouseInAlert: boolean = false;\n\n    /** @hidden */\n    componentRef: ComponentRef<any> | EmbeddedViewRef<any>;\n\n    /** @hidden */\n    childComponentType: Type<any> | TemplateRef<any> | string;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private ngZone: NgZone,\n                @Optional() private alertRef: AlertRef) {\n        super(elRef);\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.alertRef) {\n            this.open();\n        }\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngAfterViewInit(): void {\n        if (this.childComponentType) {\n            if (this.childComponentType instanceof Type) {\n                this.loadFromComponent(this.childComponentType);\n            } else if (this.childComponentType instanceof TemplateRef) {\n                this.loadFromTemplate(this.childComponentType);\n            } else {\n                this.loadFromString(this.childComponentType);\n            }\n            this.cdRef.detectChanges();\n        }\n    }\n\n    /**\n     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.\n     * Otherwise, it sets the display value to none. Fires the onDismiss event.\n     *\n     * @param manualDismiss Set to true to skip the dismiss animation.\n     * @param reason Data to pass back to the calling component. Only usable if alert is opened using the Service.\n     *\n     */\n    dismiss(reason?: any, manualDismiss: boolean = false): void {\n        if (manualDismiss) {\n            this.elRef.nativeElement.classList.add('fd-has-display-none');\n            this.elRef.nativeElement.classList.remove('fd-has-display-block');\n        }\n        if (this.alertRef) {\n            this.alertRef.dismiss(reason);\n        } else {\n            this.elRef.nativeElement.classList.add('fd-has-display-none');\n            this.elRef.nativeElement.classList.remove('fd-has-display-block');\n        }\n        this.onDismiss.emit();\n    }\n\n    /**\n     * Opens the alert.\n     */\n    open(): void {\n        if (!this.alertRef) {\n            if (this.elRef.nativeElement.style.display === 'block') {\n                return;\n            }\n            this.elRef.nativeElement.classList.remove('fd-has-display-none');\n            this.elRef.nativeElement.classList.add('fd-has-display-block');\n        }\n\n        if (this.duration >= 0) {\n            this.ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    if (this.mousePersist) {\n                        const wait = () => {\n                            if (this.mouseInAlert === true) {\n                                setTimeout(wait, 500);\n                            } else {\n                                this.ngZone.run(() => this.dismiss());\n                            }\n                        };\n                        wait();\n                    } else {\n                        this.ngZone.run(() => this.dismiss());\n                    }\n                }, this.duration);\n            });\n        }\n    }\n\n    /** @hidden */\n    @HostListener('mouseenter', ['$event'])\n    @HostListener('mouseleave', ['$event'])\n    handleAlertMouseEvent(event): void {\n        if (event.type === 'mouseenter') {\n            this.mouseInAlert = true;\n        } else if (event.type === 'mouseleave') {\n            this.mouseInAlert = false;\n        }\n    }\n\n    /** @hidden */\n    _setProperties(): void {\n        this._addClassToElement('fd-alert');\n        if (this.type) {\n            this._addClassToElement('fd-alert--' + this.type);\n        }\n        if (this.dismissible) {\n            this._addClassToElement('fd-alert--dismissible');\n        }\n    }\n\n    private loadFromTemplate(template: TemplateRef<any>): void {\n        const context = {\n            $implicit: this.alertRef\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(template, context);\n    }\n\n    private loadFromComponent(componentType: Type<any>): void {\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n        this.containerRef.clear();\n        this.componentRef = this.containerRef.createComponent(componentFactory);\n    }\n\n    private loadFromString(contentString: string): void {\n        this.containerRef.clear();\n        this.message = contentString;\n    }\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { alertContainerNgIf } from './alert-animations';\n\n@Component({\n    selector: 'fd-alert-container',\n    template: ``,\n    styles: [`\n        .fd-alert-container {\n            position: fixed;\n            display: flex;\n            flex-direction: column;\n            z-index: 5000;\n            align-items: center;\n            top: 0;\n            right: 50%;\n            left: 50%;\n        }\n    `],\n    host: {\n        '[@alertContainerNgIf]': ''\n    },\n    animations: [\n        alertContainerNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AlertContainerComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-alert-container')\n    fdAlertContainerClass: boolean = true;\n}\n","/**\n * Configuration for opening an alert with the AlertService.\n */\nimport { DynamicComponentConfig } from '../../utils/dynamic-component/dynamic-component-config';\n\nexport class AlertConfig implements DynamicComponentConfig {\n\n    /** Whether the alert is dismissible. */\n    dismissible?: boolean = true;\n\n    /** The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null. */\n    type?: string;\n\n    /** Id for the alert component. If omitted, a unique one is generated. */\n    id?: string;\n\n    /** Width of the alert. */\n    width?: string = '33vw';\n\n    /** Minimum width of the alert. */\n    minWidth?: string = '300px';\n\n    /** Data being injected into the child component or template. */\n    data?: any;\n\n    /** Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite. */\n    duration?: number = 10000;\n\n    /** Whether the alert should stay open if the mouse is hovering over it. */\n    mousePersist?: boolean = false;\n\n    /** Id of the element that labels the alert. */\n    ariaLabelledBy?: string = null;\n\n    /** Aria label for the alert component element. */\n    ariaLabel?: string = null;\n\n    /** The container that the Alert is appended to. By default, it is appended to the body. */\n    container?: HTMLElement | 'body' = 'body';\n}\n","\nimport { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\n\nexport class DynamicComponentInjector implements Injector {\n    constructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) {}\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n\n    get(token: any, notFoundValue?: any);\n\n    get(token: any, notFoundValue?: any, flags?: any) {\n        const value = this._additionalTokens.get(token);\n\n        if (value) {\n            return value;\n        }\n\n        return this._parentInjector.get<any>(token, notFoundValue);\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    Injectable,\n    ApplicationRef,\n    Injector,\n    EmbeddedViewRef,\n    ComponentRef,\n    Type, TemplateRef\n} from '@angular/core';\nimport { DynamicComponentInjector } from './dynamic-component-injector';\nimport { DynamicComponentConfig } from './dynamic-component-config';\n\n/**\n * Service used to dynamically generate components like modals/alerts/notifications\n */\n@Injectable()\nexport class DynamicComponentService {\n\n    /** @hidden */\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector\n    ) {}\n\n    /**\n     * Function that creates dynamic component and injects services to allow communication between component and outside\n     * @param contentType Type of the component content\n     * @param componentType Type of component that should be rendered.\n     * @param config Configuration that will be passed to the component.\n     * @param services Services that will be injected to the component.\n     */\n    public createDynamicComponent<T>(\n        contentType: TemplateRef<any> | Type<any> | string,\n        componentType: Type<any>,\n        config: DynamicComponentConfig,\n        services?: any[]\n    ): ComponentRef<T> {\n\n        // Dynamically inject services to component\n        const configMap = new WeakMap();\n        if (services) {\n            services.forEach(service => configMap.set(service.constructor, service))\n        }\n\n        // Prepare component\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n        const componentRef = componentFactory.create(new DynamicComponentInjector(this.injector, configMap));\n        this.appRef.attachView(componentRef.hostView);\n\n        // Assign component attributes\n        const configObj = Object.assign({}, config);\n        Object.keys(configObj).forEach(key => {\n            if (key !== 'data') {\n                componentRef.instance[key] = configObj[key];\n            }\n        });\n        componentRef.instance.childComponentType = contentType;\n\n        // Render component\n        const componentEl = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        if (configObj.container !== 'body') {\n            configObj.container.appendChild(componentEl);\n        } else {\n            document.body.appendChild(componentEl);\n        }\n\n        return componentRef;\n    }\n\n    /** Function that destroys dynamic component */\n    public destroyComponent(componentRef: ComponentRef<any>): void {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n    }\n\n}\n","import {\n    Injectable,\n    ComponentRef,\n    TemplateRef,\n    Type\n} from '@angular/core';\nimport { AlertComponent } from '../alert.component';\nimport { AlertContainerComponent } from '../alert-utils/alert-container.component';\nimport { AlertConfig } from '../alert-utils/alert-config';\nimport { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';\nimport { AlertRef } from '../alert-utils/alert-ref';\n\n/**\n * Service used to dynamically generate an alert as an overlay.\n */\n@Injectable()\nexport class AlertService {\n    private alerts: ComponentRef<AlertComponent>[] = [];\n    private alertContainerRef: ComponentRef<AlertContainerComponent>;\n\n    /** @hidden */\n    constructor(\n        private dynamicComponentService: DynamicComponentService\n    ) {}\n\n    /**\n     * Returns true if there are some alerts currently open. False otherwise.\n     */\n    public hasOpenAlerts(): boolean {\n        return this.alerts && this.alerts.length > 0;\n    }\n\n    /**\n     * Opens an alert component with a content of type TemplateRef, Component Type or String.\n     * @param content Content of the alert component.\n     * @param alertConfig Configuration of the alert component.\n     */\n    public open(content: TemplateRef<any> | Type<any> | string, alertConfig: AlertConfig = new AlertConfig()): AlertRef {\n\n        // Get default values from alert model\n        alertConfig = Object.assign(new AlertConfig(), alertConfig);\n\n        // Instantiate alert ref service\n        const service: AlertRef = new AlertRef();\n        service.data = alertConfig.data;\n\n        // If empty or undefined alert array, create container\n        if (!this.alerts || this.alerts.length === 0 || !this.alertContainerRef) {\n            this.alertContainerRef = this.dynamicComponentService.createDynamicComponent\n                < AlertContainerComponent > (content, AlertContainerComponent, alertConfig)\n            ;\n        }\n\n        // Define Container to put backdrop and component to container\n        alertConfig.container = this.alertContainerRef.location.nativeElement;\n\n        const component = this.dynamicComponentService.createDynamicComponent\n            <AlertComponent>(content, AlertComponent, alertConfig, [service]);\n\n        component.location.nativeElement.style.marginTop = '10px';\n\n        // Subscription to close alert from ref\n        const refSub = service.afterDismissed.subscribe(() => {\n            this.destroyAlertComponent(component);\n            refSub.unsubscribe();\n        });\n\n        // Log new component\n        this.alerts.push(component);\n        return service;\n    }\n\n    /**\n     * Dismisses all service-opened alerts.\n     */\n    public dismissAll(): void {\n        this.alerts.forEach(ref => {\n            this.destroyAlertComponent(ref);\n        });\n    }\n\n    private destroyAlertComponent(alert: ComponentRef<AlertComponent>): void {\n        this.alerts[this.alerts.indexOf(alert)] = null;\n        this.alerts = this.alerts.filter(item => item !== null && item !== undefined);\n        this.dynamicComponentService.destroyComponent(alert);\n\n        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {\n            this.destroyAlertContainer();\n        }\n    }\n\n    private destroyAlertContainer(): void {\n        this.dynamicComponentService.destroyComponent(this.alertContainerRef);\n        this.alertContainerRef = undefined;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\n\nimport { AlertComponent } from './alert.component';\nimport { AlertService } from './alert-service/alert.service';\nimport { AlertContainerComponent } from './alert-utils/alert-container.component';\n\n@NgModule({\n    declarations: [AlertComponent, AlertContainerComponent],\n    imports: [CommonModule, IconModule],\n    exports: [AlertComponent, AlertContainerComponent],\n    entryComponents: [AlertContainerComponent, AlertComponent],\n    providers: [AlertService]\n})\nexport class AlertModule {}\n","import { Input, Directive, ElementRef, HostBinding } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Badge directive, used to indicate status.\n * Colors, generally in combination with text, are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-badge]'\n})\nexport class BadgeDirective extends AbstractFdNgxClass {\n    /** Color coded status for the badge. Options are 'success', 'warning', and 'error'. Leave empty for default badge. */\n    @Input() status;\n\n    /** Modifier for the badge. Options are 'pill' and 'filled'. Leave empty for normal. */\n    @Input() modifier;\n\n    /** @hidden */\n    @HostBinding('class.fd-badge')\n    fdBadgeClass: boolean = true;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.status) {\n            this._addClassToElement('fd-badge--' + this.status);\n        }\n        if (this.modifier) {\n            this._addClassToElement('fd-badge--' + this.modifier);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Label directive, used to indicate status, without any background or border\n * Colors, generally in combination with text, are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-label]'\n})\nexport class LabelDirective extends AbstractFdNgxClass {\n    /** Color coded status for the label. Options are 'success', 'warning', and 'error'. Leave empty for default label. */\n    @Input() status: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-label');\n        if (this.status) {\n            this._addClassToElement('fd-label--' + this.status);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input} from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Status Label directive with some default icons based on status input used to indicate status.\n * Icons are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-status-label]'\n})\nexport class StatusLabelDirective extends AbstractFdNgxClass {\n    /** Color coded status for the label. Options are 'success', 'warning', and 'error'. Leave empty for default label. */\n    @Input() status: string = '';\n\n    /** Built-in status icon. Options include 'available', 'away', 'busy', and 'offline'. */\n    @Input() statusIcon: string = '';\n\n    /** The icon used with the status indicator. See the icon page for the list of icons. */\n    @Input() icon: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-status-label');\n        if (this.status) {\n            this._addClassToElement('fd-status-label--' + this.status);\n        }\n        if (this.statusIcon) {\n            this._addClassToElement('fd-status-label--' + this.statusIcon);\n        }\n        if (this.icon) {\n            this._addClassToElement('sap-icon--' + this.icon);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BadgeDirective } from './badge.directive';\nimport { LabelDirective } from './label.directive';\nimport { StatusLabelDirective } from './status-label.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BadgeDirective, LabelDirective, StatusLabelDirective],\n    declarations: [BadgeDirective, LabelDirective, StatusLabelDirective]\n})\nexport class BadgeLabelModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb parent wrapper directive. Must have breadcrumb item child directives.\n *\n * ```html\n * <fd-breadcrumb>\n *     <fd-breadcrumb-item>\n *         <a fd-breadcrumb-link [routerLink]=\"'#'\">Breadcrumb Link</a>\n *     </fd-breadcrumb-item>\n * </fd-breadcrumb>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-breadcrumb',\n    host: {\n        class: 'fd-breadcrumb'\n    }\n})\nexport class BreadcrumbDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb item directive. Must have child breadcrumb link directives.\n *\n * ```html\n * <fd-breadcrumb-item>\n *     <a fd-breadcrumb-link [routerLink]=\"'#'\">Breadcrumb Link</a>\n * </fd-breadcrumb-item>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-breadcrumb-item',\n    host: {\n        class: 'fd-breadcrumb__item'\n    }\n})\nexport class BreadcrumbItemDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb link directive. Use Angular router options (such as 'routerLink' and 'queryParams') with this directive.\n *\n * ```html\n * <a fd-breadcrumb-link [routerLink]=\"'some-url'\" [queryParams]=\"'params'\">Breadcrumb Link</a>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-breadcrumb-link]',\n    host: {\n        class: 'fd-breadcrumb__link'\n    }\n})\nexport class BreadcrumbLinkDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BreadcrumbDirective } from './breadcrumb.directive';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbLinkDirective } from './breadcrumb-link.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BreadcrumbDirective, BreadcrumbItemDirective, BreadcrumbLinkDirective],\n    declarations: [BreadcrumbDirective, BreadcrumbItemDirective, BreadcrumbLinkDirective]\n})\nexport class BreadcrumbModule {}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Container for grouped buttons.\n *\n * ```html\n * <fd-button-group>\n *     <button fd-button-grouped>Button</button>\n * </fd-button-group>\n * ```\n */\n@Component({\n    selector: 'fd-button-group',\n    templateUrl: './button-group.component.html',\n    host: {\n        'role': 'group'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ButtonGroupComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-button-group')\n    fdButtonGroupClass: boolean = true;\n}\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Directive to be applied to buttons that are members of a button group.\n *\n * ```html\n * <button fd-button-grouped>Button</button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-button-grouped]'\n})\nexport class ButtonGroupedDirective extends AbstractFdNgxClass {\n\n    /** Size of the button. Can be `xs`, `s`, or left blank for large size. */\n    @Input()\n    size: string;\n\n    /** Glyph (icon) of the button. */\n    @Input()\n    glyph: string;\n\n    /** State of the button. Can be `selected` or `disabled`. */\n    @Input()\n    state: string;\n\n    /** Whether the button should be in compact form. */\n    @Input()\n    @HostBinding('class.fd-button--compact')\n    compact: boolean = false;\n\n    /** @hidden */\n    @HostBinding('class.fd-button--grouped')\n    fdButtonGroupedClass: boolean = true;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties() {\n        if (this.size) {\n            this._addClassToElement('fd-button--' + this.size);\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n        if (this.state) {\n            this._addClassToElement('is-' + this.state);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonGroupComponent } from './button-group.component';\nimport { ButtonGroupedDirective } from './button-grouped.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ButtonGroupComponent, ButtonGroupedDirective],\n    declarations: [ButtonGroupComponent, ButtonGroupedDirective]\n})\nexport class ButtonGroupModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for labels inside the calendar component.\n */\n@Injectable({providedIn: 'root'})\nexport class CalendarI18nLabels {\n\n    // This will be needed when we use OnPush change detection.\n    // readonly labelsChange: Subject<void> = new Subject<void>();\n\n    /** Year selection aria label. Used on the button to navigate to the years view. */\n    yearSelectionLabel: string = 'Year selection';\n\n    /** Previous year aria label. Used on the button to switch to a previous year in the years view. */\n    previousYearLabel: string = 'Previous year';\n\n    /** Next year aria label. Used on the button to switch to a next year in the years view. */\n    nextYearLabel: string = 'Next year';\n\n    /** Month selection aria label. Used on the button to navigate to the months view. */\n    monthSelectionLabel: string = 'Month selection';\n\n    /** Previous month aria label. Used on the button to switch to a previous month in the months view. */\n    previousMonthLabel: string = 'Previous month';\n\n    /** Next month aria label. Used on the button to switch to a next month in the months view. */\n    nextMonthLabel: string = 'Next month';\n\n}\n","import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';\nimport { FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth } from '@angular/common';\nimport { Subject } from 'rxjs';\n\nexport function CALENDAR_I18N_FACTORY(locale) {\n    return new CalendarI18nDefault(locale);\n}\n\n/**\n * Abstract class which defines the behaviour calendar internationalization. See calendar examples for usage details.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: CALENDAR_I18N_FACTORY,\n    deps: [LOCALE_ID]\n})\nexport abstract class CalendarI18n {\n\n    /**\n     * Aria label for a specific date.\n     * @param date Native date object to use for the label.\n     */\n    abstract getDayAriaLabel(date: Date): string;\n\n    /** Get all short week day names, such as Mo for Monday. */\n    abstract getAllShortWeekdays(): string[];\n\n    /** Get all short month names, such as Nov for November. */\n    abstract getAllShortMonthNames(): string[];\n\n    /** Get all full month names. */\n    abstract getAllFullMonthNames(): string[];\n}\n\n/**\n * Default implementation of the CalendarI18n service. It will get dates from the application locale if it is present.\n */\n@Injectable()\nexport class CalendarI18nDefault extends CalendarI18n {\n\n    private weekdaysShort: string[];\n    private monthsShort: string[];\n    private monthsFull: string[];\n\n    private weekdaysFallback: string[] = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    private monthsFullFallback: string[] = [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July',\n        'August', 'September', 'October', 'November', 'December'\n    ];\n\n    private monthsShortFallback: string[] = [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n        'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ];\n\n    /** Constructor takes in a locale_id and gets the appropriate data from Angular. */\n    constructor(@Optional() @Inject(LOCALE_ID) private locale: string) {\n        super();\n        if (locale) {\n            const sundayStartWeekdays = getLocaleDayNames(locale, FormStyle.Standalone, TranslationWidth.Short);\n            this.weekdaysShort = sundayStartWeekdays.map((day, index) => sundayStartWeekdays[index % 7]);\n            this.monthsShort = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\n            this.monthsFull = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Wide);\n        }\n\n        this.checkForFallback();\n    }\n\n    /**\n     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.\n     *\n     * @param date Native date object to use for the label.\n     */\n    getDayAriaLabel(date: Date): string {\n        return date.getDate() + ' ' + this.monthsFull[date.getMonth()] + ' ' + date.getFullYear();\n    }\n\n    /** Get all full month names. */\n    getAllFullMonthNames(): string[] {\n        return this.monthsFull;\n    }\n\n    /** Get all short month names, such as Nov for November. */\n    getAllShortMonthNames(): string[] {\n        return this.monthsShort;\n    }\n\n    /** Get all short week day names, such as Mo for Monday. */\n    getAllShortWeekdays(): string[] {\n        return this.weekdaysShort;\n    }\n\n    /** Checks if a fallback is needed. Older versions of Angular may need this. */\n    private checkForFallback(): void {\n        if (!this.weekdaysShort || this.weekdaysShort.length === 0) {\n            this.weekdaysShort = this.weekdaysFallback;\n        }\n\n        if (!this.monthsShort || this.monthsShort.length === 0) {\n            this.monthsShort = this.monthsShortFallback;\n        }\n\n        if (!this.monthsFull || this.monthsFull.length === 0) {\n            this.monthsFull = this.monthsFullFallback;\n        }\n    }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { CalendarI18nLabels } from '../i18n/calendar-i18n-labels';\nimport { CalendarI18n } from '../i18n/calendar-i18n';\nimport { FdCalendarView } from '../calendar.component';\nimport { CalendarCurrent } from '../models/calendar-current';\n\n/**\n * Internal use only.\n * Header of the calendar component.\n */\n@Component({\n    selector: 'fd-calendar-header',\n    templateUrl: './calendar-header.component.html',\n    styleUrls: ['./calendar-header.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-header\"'\n    }\n})\nexport class CalendarHeaderComponent {\n\n    /** Currently active view. Needed for a11y labels. */\n    @Input()\n    activeView: FdCalendarView;\n\n    /** Currently displayed date on the calendar. */\n    @Input()\n    currentlyDisplayed: CalendarCurrent;\n\n    /** Id */\n    @Input()\n    id: string;\n\n    /** Event emitted when the active view should change. */\n    @Output()\n    readonly activeViewChange: EventEmitter<FdCalendarView>\n        = new EventEmitter<FdCalendarView>();\n\n    /** Event emitted when the previous button is clicked. */\n    @Output()\n    readonly previousClicked: EventEmitter<void>\n        = new EventEmitter<void>();\n\n    /** Event emitted when the next button is clicked. */\n    @Output()\n    readonly nextClicked: EventEmitter<void>\n        = new EventEmitter<void>();\n\n    constructor(\n        public calendarI18nLabels: CalendarI18nLabels,\n        public calendarI18n: CalendarI18n\n    ) {}\n\n    /** Get the aria label for the previous button. Depends on the active view. */\n    get previousLabel(): string {\n        return this.activeView !== 'year' ? this.calendarI18nLabels.previousMonthLabel\n            : this.calendarI18nLabels.previousYearLabel;\n    }\n\n    /** Get the aria label for the next button. Depends on the active view. */\n    get nextLabel(): string {\n        return this.activeView !== 'year' ? this.calendarI18nLabels.nextMonthLabel\n            : this.calendarI18nLabels.nextMonthLabel;\n    }\n\n    /** Get aria label for the month shown. */\n    get monthLabel(): string {\n        return this.calendarI18n.getAllFullMonthNames()[this.currentlyDisplayed.month - 1];\n    }\n\n    isOnMonthView(): boolean {\n        return this.activeView === 'month';\n    }\n\n    isOnYearView(): boolean {\n        return this.activeView === 'year';\n    }\n\n    processViewChange(type: FdCalendarView): void {\n        if (type === this.activeView) {\n            this.activeView = 'day';\n        } else {\n            this.activeView = type;\n        }\n        this.activeViewChange.emit(this.activeView);\n    }\n\n}\n","import { FdDate } from './models/fd-date';\nimport { Subject } from 'rxjs';\n\nexport class CalendarService {\n\n    /** Event thrown, when the element is selected by space or enter keys */\n    public onKeySelect: Subject<number> = new Subject<number>();\n\n    /** Event thrown, when the focus goes after list of elements */\n    public onListEndApproach: Subject<void> = new Subject<void>();\n\n    /** Event thrown, when the focus goes before list of elements */\n    public onListStartApproach: Subject<void> = new Subject<void>();\n\n    /** Event thrown, when the focus is changed. */\n    public onFocusIdChange: Subject<number> = new Subject<number>();\n\n    /** Function that is called when the focus would escape the element. */\n    focusEscapeFunction: Function;\n\n    /**\n     * Method that provides, amount of day depending on month and year passed\n     * @param month which is number 1-12\n     * @param year which is number\n     */\n    static getDaysInMonth(month: number, year: number): number {\n\n        const isLeapYear = (_year: number): boolean => {\n            if (_year % 4 !== 0) {\n                return false;\n            } else if (_year % 400 === 0) {\n                return true;\n            } else {\n                return _year % 100 !== 0;\n            }\n        };\n\n        if (month === 2) {\n            return isLeapYear(year) ? 29 : 28;\n        } else if ((month % 2 === 0 && month < 8) || (month % 2 === 1 && month > 8)) {\n            return 30;\n        } else {\n            return 31;\n        }\n    }\n\n    /**\n     * Method that check equality of 2 dates.\n     */\n    static datesEqual(date1: FdDate, date2: FdDate): boolean {\n        if (!date1 || !date2) {\n            return false;\n        } else {\n            return date1.toDateString() === date2.toDateString();\n        }\n    }\n\n    /**\n     * Method that handles keydown events, dedicated for Month and Year views, which have a list with 12 elements.\n     * Triggers the events, when the focus approaches start and end of list. Or when there is basic change of focus.\n     * Triggers also event, when the element is selected by enter key, or space bar.\n     * @param event KeyboardEvent\n     * @param index which is number (0 - 11)\n     */\n    public onKeydownHandler(event: KeyboardEvent, index: number): void {\n        switch (event.code) {\n            case 'Enter':\n            case 'Space': {\n                event.preventDefault();\n                this.onKeySelect.next(index);\n                break;\n            }\n            case 'ArrowLeft': {\n                event.preventDefault();\n                if (index === 0) {\n                    this.onListStartApproach.next();\n                    this.onFocusIdChange.next(11)\n                } else {\n                    this.onFocusIdChange.next(index - 1)\n                }\n                break;\n            }\n            case 'ArrowRight': {\n                event.preventDefault();\n                if (index === 11) {\n                    this.onListEndApproach.next();\n                    this.onFocusIdChange.next(0)\n                } else {\n                    this.onFocusIdChange.next(index + 1)\n                }\n                break;\n            }\n            case 'ArrowUp': {\n                event.preventDefault();\n                if (index <= 3) {\n                    this.onListStartApproach.next();\n                    this.onFocusIdChange.next(index + 8);\n                } else {\n                    this.onFocusIdChange.next(index - 4);\n                }\n                break;\n            }\n            case 'ArrowDown': {\n                event.preventDefault();\n                if (index >= 8) {\n                    this.onListEndApproach.next();\n                    this.onFocusIdChange.next(index - 8);\n                } else {\n                    this.onFocusIdChange.next(index + 4);\n                }\n                break;\n            }\n            case 'Tab': {\n                if (this.focusEscapeFunction && !event.shiftKey) {\n                    event.preventDefault();\n                    this.focusEscapeFunction();\n                }\n                break;\n            }\n        }\n    }\n\n}\n","/**\n * Default date model used by the fundamental components.\n */\nimport { CalendarService } from '../calendar.service';\n\nexport class FdDate {\n\n    /**\n     * The year of the date.\n     */\n    public year: number;\n\n    /**\n     * The month of the date. 1 = January, 12 = December.\n     */\n    public month: number;\n\n    /**\n     * Day of the date. Starts at 1.\n     */\n    public day: number;\n\n    /**\n     * Static function to get the current date in FdDate form.\n     */\n    static getToday(): FdDate {\n        const tempDate: Date = new Date();\n        return new FdDate(tempDate.getFullYear(), tempDate.getMonth() + 1, tempDate.getDate());\n    }\n\n    /**\n     *  Static function allowing convert js date object to FdDate model\n     */\n    static getModelFromDate(date: Date): FdDate {\n        if (date) {\n            return new FdDate(date.getFullYear(), date.getMonth() + 1, date.getDate());\n        }\n    }\n\n    /**\n     * Constructor to build a FdDate object from a year, month and day.\n     * @param year The year of the date.\n     * @param month The month of the date (1-12).\n     * @param day The day of the date (1-31, generally).\n     */\n    constructor(year: number, month: number, day: number) {\n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n    /**\n     * Get Luxon date object converted to string from FdDate.\n     */\n    public toDateString(): string {\n        if (this.year && this.month && this.day && this.isDateValid()) {\n            return this.toDate().toDateString();\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Get amount of milliseconds from 01.01.1970\n     * -1 is thrown when some some of properties (day,month,year) are not defined\n     */\n    public getTimeStamp(): number {\n        if (this.year && this.month && this.day) {\n            return this.toDate().getTime();\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Get number of weekday ex. Sunday = 1, Monday = 2, Tuesday = 3 etc.\n     * -1 is thrown when some some of properties (day,month,year) are not defined\n     * Native javascript date getDay() function returns Sunday as 0, Monday as 1, etc, to it's needed to increment value\n     *\n     */\n    public getDay(): number {\n        if (this.year && this.month && this.day) {\n            return this.toDate().getDay() + 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /** Get next day */\n    public nextDay(): FdDate {\n        const maxDays = CalendarService.getDaysInMonth(this.month, this.year);\n        const day = this.day >= maxDays ? 1 : this.day + 1;\n        const month = day !== 1 ? this.month : (this.month > 11 ? 1 : this.month + 1);\n        const year = month !== 1 ? this.year : this.year + 1;\n        return new FdDate(year, month, day);\n    }\n\n    /** Get previous day  */\n    public previousDay(): FdDate {\n        const maxDays = CalendarService.getDaysInMonth(this.month, this.year);\n        const day = this.day === 1 ? maxDays : this.day - 1;\n        const month = day !== maxDays ? this.month : (this.month === 1 ? 12 : this.month - 1);\n        const year = month !== 12 ? this.year : this.year - 1;\n        return new FdDate(year, month, day);\n    }\n\n    /**\n     * Get native date object from FdDate.\n     */\n    public toDate(): Date {\n        return new Date(this.year, this.month - 1, this.day);\n    }\n\n    /**\n     * Method that checks validity of current FdDate object.\n     */\n    public isDateValid(): boolean {\n        if (!this) {\n            return false;\n        }\n\n        if (!this.year || !this.month || !this.day) {\n            return false;\n        }\n\n        if (this.year <= 0 || this.month < 1 || this.month > 12) {\n            return false;\n        }\n\n        if (this.day < 1 || this.day > CalendarService.getDaysInMonth(this.month, this.year)) {\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import {\n    AfterViewChecked,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input, OnChanges,\n    OnInit,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarI18n } from '../../i18n/calendar-i18n';\nimport { FdDate } from '../../models/fd-date';\nimport { CalendarCurrent } from '../../models/calendar-current';\nimport { CalendarType, DaysOfWeek } from '../../calendar.component';\nimport { CalendarDay } from '../../models/calendar-day';\nimport { CalendarService } from '../../calendar.service';\nimport { FdRangeDate } from '../../models/fd-range-date';\n\n/** Component representing the day view of the calendar. */\n@Component({\n    selector: 'fd-calendar-day-view',\n    templateUrl: './calendar-day-view.component.html',\n    styleUrls: ['./calendar-day-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-day-view\"'\n    }\n})\nexport class CalendarDayViewComponent implements OnInit, AfterViewChecked, OnChanges {\n\n    /** @hidden */\n    newFocusedDayId: string = '';\n\n    /** Actual day grid with previous/current/next month days */\n    public dayViewGrid: CalendarDay[][];\n\n    /** @hidden */\n    @HostBinding('class.fd-calendar__dates')\n    public fdCalendarDateViewClass: boolean = true;\n\n    /** Currently displayed month and year for days */\n    @Input()\n    public currentlyDisplayed: CalendarCurrent;\n\n    /** The currently selected FdDate model in single mode. */\n    @Input()\n    public selectedDate: FdDate;\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate;\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    public startingDayOfWeek: DaysOfWeek;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    calType: CalendarType = 'single';\n\n    /** Id of the calendar. If none is provided, one will be generated. */\n    @Input() id: string;\n\n    /** Function that allows to specify which function would be called, when focus wants to escape */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** Event emitted always, when model is changed in range mode */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event emitted always, when next month is selected, by focus */\n    @Output()\n    public readonly nextMonthSelect: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted always, when previous month is selected, by focus */\n    @Output()\n    public readonly previousMonthSelect: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted always, when model is changed in single mode */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /** @hidden */\n    constructor(\n        private calendarI18n: CalendarI18n,\n        private eRef: ElementRef\n    ) {\n    }\n\n    /**\n     * Function for selecting a date on the calendar. Typically called when a date is clicked, but can also be called programmatically.\n     * @param day CalendarDay object to be selected.\n     */\n    selectDate(day: CalendarDay, event?: MouseEvent): void {\n        if (event) {\n            /**\n             * There are some problems with popup integration. After clicking inside day component, the popover closes.\n             */\n            event.stopPropagation();\n            event.preventDefault();\n            this.newFocusedDayId = day.id;\n            this.focusElement(this.newFocusedDayId);\n        }\n        if (!day.blocked && !day.disabled) {\n            if (this.calType === 'single') {\n                this.selectedDate = day.date;\n                this.selectedDateChange.emit(day.date);\n                this.buildDayViewGrid();\n            } else {\n                if (this.selectCounter === 0 || this.selectCounter === 2) {\n                    this.selectedRangeDate = { start: day.date, end: null };\n                    this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                    this.buildDayViewGrid();\n                } else if (this.selectCounter === 1) {\n                    // Check if date picked is higher than already chosen, otherwise just first one\n                    if (this.selectedRangeDate.start.getTimeStamp() < day.date.getTimeStamp()) {\n                        this.selectedRangeDate = { start: this.selectedRangeDate.start, end: day.date };\n                    } else {\n                        this.selectedRangeDate = { start: day.date, end: null };\n                    }\n                    this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                    this.buildDayViewGrid();\n                }\n\n            }\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.buildDayViewGrid();\n    }\n\n    /** @hidden\n     *  Amount of selected days\n     *  0, when none,\n     *  1, when only startDate, or endDate same as startDate,\n     *  2, when both\n     */\n    get selectCounter(): number {\n        if (!this.selectedRangeDate || !this.selectedRangeDate.start) {\n            return 0;\n        } else if (this.selectedRangeDate.start &&\n            (!this.selectedRangeDate.end ||\n                CalendarService.datesEqual(this.selectedRangeDate.start, this.selectedRangeDate.end)\n            )\n        ) {\n            return 1;\n        } else if (this.selectedRangeDate.start && this.selectedRangeDate.end) {\n            return 2;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that handles day cells keydown events,\n     * @param event KeyboardEvent\n     * @param cell CalendarDay\n     * @param grid with specified column and row as a x and y\n     */\n    onKeydownDayHandler(event, cell: CalendarDay, grid: { x: number, y: number }): void {\n        if (event.code === 'Tab' && !event.shiftKey) {\n            if (this.focusEscapeFunction) {\n                event.preventDefault();\n                this.focusEscapeFunction();\n            }\n        } else {\n            switch (event.code) {\n                case ('Space'):\n                case ('Enter'): {\n                    event.preventDefault();\n                    this.selectDate(cell);\n                    this.newFocusedDayId = cell.id;\n                    break;\n                }\n                case ('ArrowUp'): {\n                    event.preventDefault();\n                    if (grid.y > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y - 1][grid.x].id;\n                    } else {\n                        this.selectPreviousMonth();\n                        this.newFocusedDayId = this.dayViewGrid[this.dayViewGrid.length - 1][grid.x].id;\n                    }\n                    break;\n                }\n                case ('ArrowDown'): {\n                    event.preventDefault();\n                    if (grid.y < this.dayViewGrid.length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y + 1][grid.x].id;\n                    } else {\n                        this.selectNextMonth();\n                        this.newFocusedDayId = this.dayViewGrid[0][grid.x].id;\n                    }\n                    break;\n                }\n                case ('ArrowLeft'): {\n                    event.preventDefault();\n                    if (grid.x > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y][grid.x - 1].id;\n                    } else if (grid.y > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y - 1][this.dayViewGrid[0].length - 1].id;\n                    } else {\n                        this.selectPreviousMonth();\n                        this.newFocusedDayId =\n                            this.dayViewGrid[this.dayViewGrid.length - 1][this.dayViewGrid[0].length - 1].id\n                            ;\n                    }\n                    break;\n                }\n                case ('ArrowRight'): {\n                    event.preventDefault();\n                    if (grid.x < this.dayViewGrid[0].length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y][grid.x + 1].id;\n                    } else if (grid.y < this.dayViewGrid.length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y + 1][0].id;\n                    } else {\n                        this.selectNextMonth();\n                        this.newFocusedDayId = this.dayViewGrid[0][0].id;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (this.newFocusedDayId) {\n            this.focusElement(this.newFocusedDayId);\n        }\n    }\n\n    /** @hidden */\n    public ngOnChanges(): void {\n        this.buildDayViewGrid();\n    }\n\n    /** @hidden */\n    ngAfterViewChecked(): void {\n        if (this.newFocusedDayId) {\n            this.focusElement(this.newFocusedDayId);\n            this.newFocusedDayId = null;\n        }\n    }\n\n    /** @hidden\n     *  Method that allow to focus elements inside this component\n     */\n    public focusElement(elementSelector): void {\n        const elementToFocus = this.eRef.nativeElement.querySelector('#' + elementSelector);\n        if (elementToFocus) {\n            elementToFocus.focus();\n        }\n    }\n\n    /** Active day means that with tabindex = 0, it's selected day or today or first day */\n    public focusActiveDay(): void {\n        this.newFocusedDayId = this.getActiveCell(\n            this.calendarDayList.filter(cell => cell.monthStatus === 'current')\n        ).id;\n    }\n\n    /** Function that gives array of all displayed CalendarDays */\n    public get calendarDayList(): CalendarDay[] {\n        return this.dayViewGrid.reduce((totalCalendarRows: CalendarDay[], calendarRow: CalendarDay[]) => {\n            if (!calendarRow) {\n                calendarRow = [];\n            }\n            return totalCalendarRows.concat(calendarRow);\n        });\n    }\n\n    /**\n     * Method that selects previous month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    private selectPreviousMonth(): void {\n        if (this.currentlyDisplayed.month > 1) {\n            this.currentlyDisplayed = { ...this.currentlyDisplayed, month: this.currentlyDisplayed.month - 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year - 1, month: 12 };\n        }\n        this.buildDayViewGrid();\n        this.previousMonthSelect.emit();\n    }\n\n    /**\n     * Method that selects next month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    private selectNextMonth(): void {\n        if (this.currentlyDisplayed.month > 1) {\n            this.currentlyDisplayed = { ...this.currentlyDisplayed, month: this.currentlyDisplayed.month + 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year + 1, month: 1 };\n        }\n        this.buildDayViewGrid();\n        this.nextMonthSelect.emit();\n    }\n\n    /**\n     * Method that creates array of CalendarDay models which will be shown on day grid,\n     * depending on current month and year.\n     */\n    private populateCalendar(): CalendarDay[] {\n        let calendar: CalendarDay[] = [];\n\n        calendar = this.getPreviousMonthDays(calendar);\n        calendar = calendar.concat(this.getCurrentMonthDays());\n        calendar = this.getNextMonthDays(calendar);\n\n        calendar.forEach((call, index: number) => call.id = this.id + '-fd-day-' + (Math.floor(index / 7) + 1) + '' + (index % 7));\n\n        return calendar;\n    }\n\n    /**\n     * Method that builds 2 dimensions day view grid, also sets up currently displayed month, or year,\n     * when there is not any.\n     */\n    private buildDayViewGrid(): void {\n        if (!this.currentlyDisplayed) {\n            if (this.selectedDate) {\n                this.currentlyDisplayed = { month: this.selectedDate.month, year: this.selectedDate.year };\n            } else {\n                this.currentlyDisplayed = { month: FdDate.getToday().month, year: FdDate.getToday().year };\n            }\n        }\n\n        const calendarDays = this.populateCalendar();\n        const dayViewGrid: CalendarDay[][] = [];\n\n        while (calendarDays.length > 0) {\n            dayViewGrid.push(calendarDays.splice(0, 7));\n        }\n        this.dayViewGrid = dayViewGrid;\n        return;\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains every single day of currently shown month/year.\n     */\n    private getCurrentMonthDays(): CalendarDay[] {\n        const month = this.currentlyDisplayed.month;\n        const year = this.currentlyDisplayed.year;\n        const calendarDays: CalendarDay[] = [];\n        const amountOfDaysInCurrentMonth: number = CalendarService.getDaysInMonth(month, year);\n        for (let dayNumber = 1; dayNumber <= amountOfDaysInCurrentMonth; dayNumber++) {\n            const fdDate: FdDate = new FdDate(year, month, dayNumber);\n            calendarDays.push({\n                ...this.getDay(fdDate),\n                monthStatus: 'current',\n                today: CalendarService.datesEqual(FdDate.getToday(), fdDate)\n            });\n        }\n        this.getActiveCell(calendarDays).isTabIndexed = true;\n        return calendarDays;\n    }\n\n    /**\n     * Method that returns active cell, which means:\n     * if there is any selected day, return selected day\n     * if there is no selected day, but there is today day, return today day\n     * if there is no today, or selected, return first one\n     */\n    private getActiveCell(calendarDays: CalendarDay[]): CalendarDay {\n        if (calendarDays.find(cell => cell.selected)) {\n            return calendarDays.find(cell => cell.selected);\n        } else if (calendarDays.find(cell => cell.today)) {\n            return calendarDays.find(cell => cell.today);\n        } else {\n            return calendarDays[0];\n        }\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains last 0-6 days of previous month/year. Theses days\n     * fills the gap between starting startingDayOfWeek and first day of current month\n     */\n    private getPreviousMonthDays(calendarDays: CalendarDay[]): CalendarDay[] {\n        const month = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.month - 1 : 12;\n        const year = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year - 1;\n        const amountOfDaysInCurrentMonth: number = CalendarService.getDaysInMonth(month, year);\n        const prevMonthLastDate = new FdDate(year, month, amountOfDaysInCurrentMonth);\n        const prevMonthLastDay = amountOfDaysInCurrentMonth;\n        let prevMonthLastWeekDay = prevMonthLastDate.getDay() - this.startingDayOfWeek;\n\n        /** Checking if there are some days cut by startingDayOfWeek option\n         *  If yes, there is whole week added, to avoid hiding\n         */\n        if (prevMonthLastWeekDay < 0) {\n            prevMonthLastWeekDay = prevMonthLastWeekDay + 7;\n        }\n\n        if (prevMonthLastWeekDay < 6) {\n            while (prevMonthLastWeekDay >= 0) {\n                const prevMonthDay = prevMonthLastDay - prevMonthLastWeekDay;\n                const fdDate = new FdDate(year, month, prevMonthDay);\n                calendarDays.push({ ...this.getDay(fdDate), monthStatus: 'previous' });\n                prevMonthLastWeekDay--;\n            }\n        }\n        return calendarDays;\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains first days of next month/year. Theses days\n     * fills the gap between last day of current day and end of 6-weeks calendar grid.\n     */\n    private getNextMonthDays(calendarDays: CalendarDay[]): CalendarDay[] {\n        const month = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.month + 1 : 1;\n        const year = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year + 1;\n\n        // The calendar grid can have 6 (42 days) weeks\n        const nextMonthDisplayedDays = 42 - calendarDays.length;\n\n        for (let nextD = 1; nextD <= nextMonthDisplayedDays; nextD++) {\n            const fdDate = new FdDate(year, month, nextD);\n            calendarDays.push({ ...this.getDay(fdDate), monthStatus: 'next' });\n        }\n        return calendarDays;\n    }\n\n    /**\n     * Method that generates whole day model basing on fdDate, disabling functions, block functions, and actually\n     * chosen range / single date.\n     */\n    private getDay(fdDate: FdDate): CalendarDay {\n        const day: CalendarDay = {\n            date: fdDate,\n            weekDay: fdDate.getDay(),\n            disabled: this.disableFunction(fdDate),\n            blocked: this.blockFunction(fdDate),\n            selected: (\n                (this.calType === 'single' && CalendarService.datesEqual(fdDate, this.selectedDate)) ||\n                (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.start)) ||\n                (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.end))\n            ),\n            selectedFirst: (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.start)),\n            selectedLast: (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.end)),\n            selectedRange: (this.selectedRangeDate && (\n                (this.selectedRangeDate.start && (this.selectedRangeDate.start.getTimeStamp() < fdDate.getTimeStamp())) &&\n                (this.selectedRangeDate.end && (this.selectedRangeDate.end.getTimeStamp() > fdDate.getTimeStamp()))\n            )),\n            ariaLabel: this.calendarI18n.getDayAriaLabel(fdDate.toDate())\n        };\n\n        if (this.calType === 'range' && (this.selectCounter === 0 || this.selectCounter === 2)) {\n            if (this.disableRangeStartFunction && !day.disabled) {\n                day.disabled = this.disableRangeStartFunction(day.date);\n            }\n            if (this.blockRangeStartFunction && !day.blocked) {\n                day.blocked = this.blockRangeStartFunction(day.date);\n            }\n        } else if (this.selectCounter === 1) {\n            if (this.disableRangeEndFunction && !day.disabled) {\n                day.disabled = this.disableRangeEndFunction(day.date);\n            }\n\n            if (this.blockRangeEndFunction && !day.blocked) {\n                day.blocked = this.blockRangeEndFunction(day.date);\n            }\n        }\n\n        return day;\n    }\n\n    /**\n     * Method that returns first letter of every weekday, basing on CalendarI18nDefault. Can be changed by user by\n     * providing other class which implements CalendarI18n\n     */\n    get shortWeekDays(): string[] {\n        return this.calendarI18n.getAllShortWeekdays()\n            .slice(this.startingDayOfWeek - 1)\n            .concat(this.calendarI18n.getAllShortWeekdays().slice(0, this.startingDayOfWeek - 1))\n            .map(weekday => weekday[0].toLocaleUpperCase());\n    }\n}\n","import { Component, Input, Output, ViewEncapsulation, EventEmitter, ElementRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FdDate } from '../../models/fd-date';\nimport { CalendarI18n } from '../../i18n/calendar-i18n';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CalendarService } from '../../calendar.service';\n\n/** Component representing the month view of the calendar. */\n@Component({\n    selector: 'fd-calendar-month-view',\n    templateUrl: './calendar-month-view.component.html',\n    styleUrls: ['./calendar-month-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-month-view\"'\n    }\n})\nexport class CalendarMonthViewComponent implements OnInit, OnDestroy {\n\n    /** A number offset used to achieve the 1-12 representation of the calendar */\n    private readonly _monthOffset: number = 1;\n\n    /** An RxJS Subject that will kill the data stream upon componentâs destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** The id of the calendar passed from the parent component */\n    @Input()\n    id: string;\n\n    /** A number (1-12) representing the selected month */\n    @Input()\n    monthSelected: number;\n\n    /** A function that handles escape focus */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** An event fired when a new month is selected */\n    @Output()\n    readonly monthClicked: EventEmitter<number> = new EventEmitter<number>();\n\n    constructor(\n        private eRef: ElementRef,\n        private cdRef: ChangeDetectorRef,\n        private calendarI18n: CalendarI18n,\n        private calendarService: CalendarService\n    ) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;\n\n        this.calendarService.onFocusIdChange\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.focusElement('#' + this.id + '-fd-month-' + index))\n        ;\n\n        this.calendarService.onKeySelect\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.selectMonth(index))\n        ;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /** Get a number (1-12) representing the current month  */\n    get currentMonth(): number {\n        return FdDate.getToday().month;\n    }\n\n    /**  Getter for the private class member _monthOffset */\n    get monthOffset(): number {\n        return this._monthOffset;\n    }\n\n    /** Method for handling the mouse click event when a month is selected  */\n    selectMonth(selectedMonth: number, event?: MouseEvent): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.monthSelected = selectedMonth + this.monthOffset;\n        this.monthClicked.emit(this.monthSelected);\n    }\n\n    /** Method for handling the keyboard events (a11y) */\n    onKeydownMonthHandler(event, index: number): void {\n       this.calendarService.onKeydownHandler(event, index)\n    }\n\n    /** Method that allows to focus elements inside this component */\n    focusElement(elementSelector: string): void {\n        const elementToFocus: HTMLElement = this.eRef.nativeElement.querySelector(elementSelector);\n        if (elementToFocus) {\n            elementToFocus.focus();\n        }\n    }\n\n    /** Method that returns list of short month names from currently provided calendarI18n service */\n    get shortMonthNames(): string[] {\n        return this.calendarI18n.getAllShortMonthNames();\n    }\n}\n","import { Component, OnInit, ViewEncapsulation, Output, Input, EventEmitter, ElementRef, AfterViewChecked, OnDestroy } from '@angular/core';\nimport { FdDate } from '../../models/fd-date';\nimport { takeUntil } from 'rxjs/operators';\nimport { CalendarService } from '../../calendar.service';\nimport { Subject } from 'rxjs';\n\n/** Component representing the YearView of the Calendar Component. */\n@Component({\n    selector: 'fd-calendar-year-view',\n    templateUrl: './calendar-year-view.component.html',\n    styleUrls: ['./calendar-year-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-year-view\"'\n    }\n})\nexport class CalendarYearViewComponent implements AfterViewChecked, OnInit, OnDestroy {\n\n    /** @hidden\n     *  This variable is used to define which year from calendarYearList should be focusable by tab key\n     */\n    activeYear: number;\n\n    /** Parameter that stores the dozen of years that are currently being displayed. */\n    calendarYearList: number[];\n\n    /** Parameter storing the year of the present day. */\n    currentYear: number = FdDate.getToday().year;\n\n    /** Parameter storing first shown year on list */\n    firstYearInList: number = this.currentYear;\n\n    /** An RxJS Subject that will kill the data stream upon componentâs destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** @hidden */\n    private newFocusedYearId: string;\n\n    /** Parameter used in id of years used for help with focusing on the correct element during keyboard navigation. */\n    @Input()\n    id: string;\n\n    /** Function that is called when the focus would escape the element. */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** Parameter holding the year that is currently selected. */\n    @Input()\n    yearSelected: number;\n\n    /** Event fired when a year is selected. */\n    @Output()\n    readonly yearClicked: EventEmitter<number> = new EventEmitter<number>();\n\n    /** @hidden */\n    constructor(private eRef: ElementRef, private calendarService: CalendarService) {\n    }\n\n    /** @hidden */\n    ngAfterViewChecked(): void {\n        if (this.newFocusedYearId) {\n            this.focusElement(this.newFocusedYearId);\n            this.newFocusedYearId = null;\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.firstYearInList = this.yearSelected;\n        this.constructYearList();\n\n        this.calendarService.onFocusIdChange\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => {\n                this.newFocusedYearId = this.id + '-fd-year-' + index;\n                this.focusElement(this.newFocusedYearId);\n            })\n        ;\n        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;\n\n        this.calendarService.onKeySelect\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.selectYear(this.calendarYearList[index]))\n        ;\n\n        this.calendarService.onListStartApproach\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.loadPreviousYearList())\n        ;\n\n        this.calendarService.onListEndApproach\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.loadNextYearList())\n        ;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /**\n     * Method that returns active cell, which means:\n     * if there is any selected year, return selected year\n     * if there is no selected year, but there is current year, return current year\n     * if there is no current year, or selected, return first one\n     */\n    private getActiveYear(): number {\n        const selectedYear: number = this.calendarYearList.find(year => year === this.yearSelected);\n        if (selectedYear) {\n            return selectedYear;\n        }\n\n        const currentYear: number = this.calendarYearList.find(year => year === this.currentYear);\n        if (currentYear) {\n            return currentYear;\n        }\n\n        return this.calendarYearList[0];\n    }\n\n    /** Method for handling the keyboard navigation. */\n    onKeydownYearHandler(event, index: number): void {\n        this.calendarService.onKeydownHandler(event, index);\n    }\n\n    /** Method used to load the previous 12 years to be displayed. */\n    loadNextYearList(): void {\n        this.firstYearInList += 12;\n        this.constructYearList();\n    }\n\n    /** Method used to load the next 12 years to be displayed. */\n    loadPreviousYearList(): void {\n        this.firstYearInList -= 12;\n        this.constructYearList();\n    }\n\n    /** Method allowing focusing on elements within this component. */\n    focusElement(elementSelector: string): void {\n        const elementToFocus: HTMLElement = this.eRef.nativeElement.querySelector('#' + elementSelector);\n        if (elementToFocus) {\n            this.eRef.nativeElement.querySelector('#' + elementSelector).focus();\n        }\n    }\n\n    /** Method that sends the year to the parent component when it is clicked. */\n    selectYear(selectedYear: number, event?: MouseEvent) {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.yearSelected = selectedYear;\n        this.yearClicked.emit(this.yearSelected);\n    }\n\n    /** @hidden */\n    private constructYearList(): void {\n        const displayedYearsAmount: number = 12;\n        this.calendarYearList = [];\n        for (let x = 0; x < displayedYearsAmount; ++x) {\n            this.calendarYearList.push(this.firstYearInList + x);\n        }\n        this.activeYear = this.getActiveYear();\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarI18n } from './i18n/calendar-i18n';\nimport { FdDate } from './models/fd-date';\nimport { CalendarCurrent } from './models/calendar-current';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { CalendarDayViewComponent } from './calendar-views/calendar-day-view/calendar-day-view.component';\nimport { FdRangeDate } from './models/fd-range-date';\nimport { CalendarYearViewComponent } from './calendar-views/calendar-year-view/calendar-year-view.component';\n\nlet calendarUniqueId: number = 0;\n\n/** Type of calendar */\nexport type CalendarType = 'single' | 'range';\n\n/** Type for the calendar view */\nexport type FdCalendarView = 'day' | 'month' | 'year';\n\n/** Type for the days of the week. */\nexport type DaysOfWeek = 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\n/**\n * Months: 1 = January, 12 = december.\n * Days: 1 = Sunday, 7 = Saturday\n *\n * Calendar component used for selecting dates, typically used by the DatePicker and DateTimePicker components.\n * Supports the Angular forms module, enabling form validity, ngModel, etc.\n * ```html\n * <fd-calendar></fd-calendar>\n * ```\n */\n@Component({\n    selector: 'fd-calendar',\n    templateUrl: './calendar.component.html',\n    styleUrls: ['./calendar.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CalendarComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => CalendarComponent),\n            multi: true\n        }\n    ],\n    host: {\n        '(blur)': 'onTouched()',\n        '[attr.id]': 'id'\n    }\n})\nexport class CalendarComponent implements OnInit, ControlValueAccessor, Validator {\n\n    /** @hidden */\n    @ViewChild(CalendarDayViewComponent) dayViewComponent: CalendarDayViewComponent;\n\n    /** @hidden */\n    @ViewChild(CalendarYearViewComponent) yearViewComponent: CalendarYearViewComponent;\n\n    /** @hidden */\n    @HostBinding('class.fd-calendar')\n    fdCalendarClass: boolean = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-has-display-block')\n    fdHasDisplayBlockClass: boolean = true;\n\n    /** Currently displayed days depending on month and year */\n    currentlyDisplayed: CalendarCurrent;\n\n    /** The currently selected FdDate model in single mode. */\n    @Input()\n    public selectedDate: FdDate = FdDate.getToday();\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' */\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    public startingDayOfWeek: DaysOfWeek = 1;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    public calType: CalendarType = 'single';\n\n    /** Id of the calendar. If none is provided, one will be generated. */\n    @Input()\n    id = 'fd-calendar-' + calendarUniqueId++;\n\n    /** Event thrown every time active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** Event thrown every time selected date in single mode is changed */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /** Event thrown every time selected first or last date in range mode is changed */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event thrown every time when value is overwritten from outside and throw back isValid */\n    @Output()\n    public readonly isValidDateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event thrown every time when calendar should be closed */\n    @Output()\n    public readonly closeCalendar: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: Function = () => {\n    };\n\n    /** @hidden */\n    onTouched: Function = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /** That allows to define function that should happen, when focus should normally escape of component */\n    @Input()\n    escapeFocusFunction: Function = (): void => {\n        if (document.getElementById(this.id + '-left-arrow')) {\n            document.getElementById(this.id + '-left-arrow').focus();\n        }\n    };\n\n    /** @hidden */\n    constructor(\n        public calendarI18n: CalendarI18n,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.prepareDisplayedView();\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.\n     */\n    writeValue(selected: FdRangeDate | FdDate): void {\n        let valid: boolean = true;\n        if (selected) {\n            if (this.calType === 'single') {\n                selected = <FdDate>selected;\n\n                valid = selected.isDateValid();\n                this.selectedDate = selected;\n\n                if (selected.isDateValid()) {\n                    this.prepareDisplayedView();\n                }\n            } else if (this.calType === 'range') {\n                selected = <FdRangeDate>selected;\n\n                if (!selected.start || !selected.end) {\n                    valid = false;\n                }\n                if (selected.start && !selected.start.isDateValid()) {\n                    valid = false;\n                }\n                if (selected.end && !selected.end.isDateValid()) {\n                    valid = false;\n                }\n                this.selectedRangeDate = { start: selected.start, end: selected.end };\n                if (valid) {\n                    this.prepareDisplayedView();\n                }\n            }\n        }\n        this.isValidDateChange.emit(valid);\n    }\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        };\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState?(isDisabled: boolean): void {\n        // Not needed\n    }\n\n    /**\n     * Method that handle active view change and throws event.\n     */\n    public handleActiveViewChange(activeView: FdCalendarView): void {\n        this.activeView = activeView;\n        this.activeViewChange.emit(activeView);\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected single date changed\n     */\n    selectedDateChanged(date: FdDate): void {\n        this.selectedDate = date;\n        this.onChange(date);\n        this.onTouched();\n        this.selectedDateChange.emit(date);\n        this.closeCalendar.emit();\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected range date changed\n     */\n    public selectedRangeDateChanged(dates: FdRangeDate): void {\n        if (dates) {\n            this.selectedRangeDate = { start: dates.start, end: dates.end ? dates.end : dates.start };\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n            this.onChange(this.selectedRangeDate);\n            this.onTouched();\n            this.closeCalendar.emit();\n        }\n    }\n\n    /** Function that handles next arrow icon click, depending on current view it changes month, year or list of years */\n    public handleNextArrowClick(): void {\n        switch (this.activeView) {\n            case 'day':\n                this.displayNextMonth();\n                break;\n            case 'month':\n                this.displayNextYear();\n                break;\n            case 'year':\n                this.displayNextYearList();\n                break;\n        }\n        this.onTouched();\n    }\n\n    /** Function that handles previous arrow icon click, depending on current view it changes month, year or list of years */\n    public handlePreviousArrowClick(): void {\n        switch (this.activeView) {\n            case 'day':\n                this.displayPreviousMonth();\n                break;\n            case 'month':\n                this.displayPreviousYear();\n                break;\n            case 'year':\n                this.displayPreviousYearList();\n                break;\n        }\n        this.onTouched();\n    }\n\n    /** Function that allows to switch actual view to next month */\n    public displayNextMonth(): void {\n        if (this.currentlyDisplayed.month === 12) {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year + 1, month: 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month + 1 };\n        }\n    }\n\n    /** Function that allows to switch actual view to previous month */\n    public displayPreviousMonth(): void {\n        if (this.currentlyDisplayed.month <= 1) {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year - 1, month: 12 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month - 1 };\n        }\n    }\n\n    /** Function that allows to switch actual view to next year */\n    public displayNextYear(): void {\n        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year + 1 };\n    }\n\n    /** Function that allows to switch actual view to previous year */\n    public displayPreviousYear(): void {\n        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year - 1 };\n    }\n\n    /** Function that allows to switch actually displayed list of year to next year list*/\n    public displayNextYearList(): void {\n        this.yearViewComponent.loadNextYearList();\n    }\n\n    /** Function that allows to switch actually displayed list of year to previous year list*/\n    public displayPreviousYearList(): void {\n        this.yearViewComponent.loadPreviousYearList();\n    }\n\n    /** Function that allows to change currently displayed month/year configuration,\n     * which are connected to days displayed\n     */\n    public setCurrentlyDisplayed(fdDate: FdDate): void {\n        this.currentlyDisplayed = { month: fdDate.month, year: fdDate.year };\n    }\n\n    /**\n     * @hidden\n     * Function that handles changes from month view child component, changes actual view and changes currently displayed month\n     */\n    public handleMonthViewChange(month: number): void {\n        this.currentlyDisplayed = { month: month, year: this.currentlyDisplayed.year };\n        this.activeView = 'day';\n        this.activeViewChange.emit(this.activeView);\n        this.changeDetectorRef.detectChanges();\n        this.dayViewComponent.focusActiveDay();\n    }\n\n    public selectedYear(yearSelected: number) {\n        this.activeView = 'day';\n        this.currentlyDisplayed.year = yearSelected;\n        this.changeDetectorRef.detectChanges();\n        this.dayViewComponent.focusActiveDay();\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        if (this.calType === 'single') {\n            return this.selectedDate &&\n                this.selectedDate instanceof FdDate &&\n                this.selectedDate.isDateValid();\n        } else {\n            return this.selectedRangeDate &&\n                (\n                    this.selectedRangeDate.start &&\n                    this.selectedRangeDate.start instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                ) && (\n                    this.selectedRangeDate.end &&\n                    this.selectedRangeDate.end instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                );\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that sets up the currently displayed variables, like shown month and year.\n     * Day grid is based on currently displayed month and year\n     */\n    private prepareDisplayedView(): void {\n        if (this.calType === 'single' && this.selectedDate && this.selectedDate.month && this.selectedDate.year) {\n            this.currentlyDisplayed = { month: this.selectedDate.month, year: this.selectedDate.year };\n        } else if (this.selectedRangeDate && this.selectedRangeDate.start) {\n            this.currentlyDisplayed = {\n                month: this.selectedRangeDate.start.month,\n                year: this.selectedRangeDate.start.year\n            };\n        } else if (this.selectedRangeDate && this.selectedRangeDate.end) {\n            this.currentlyDisplayed = {\n                month: this.selectedRangeDate.end.month,\n                year: this.selectedRangeDate.end.year\n            };\n        } else {\n            const tempDate = FdDate.getToday();\n            this.currentlyDisplayed = { month: tempDate.month, year: tempDate.year };\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\n\nimport { CalendarHeaderComponent } from './calendar-header/calendar-header.component';\nimport { CalendarDayViewComponent } from './calendar-views/calendar-day-view/calendar-day-view.component';\nimport { CalendarMonthViewComponent } from './calendar-views/calendar-month-view/calendar-month-view.component';\nimport { CalendarYearViewComponent } from './calendar-views/calendar-year-view/calendar-year-view.component';\nimport { CalendarService } from './calendar.service';\nimport { CalendarComponent } from './calendar.component';\n\n@NgModule({\n    declarations: [CalendarComponent, CalendarHeaderComponent,\n        CalendarDayViewComponent, CalendarMonthViewComponent, CalendarYearViewComponent],\n    imports: [CommonModule, IconModule],\n    exports: [CalendarComponent, CalendarDayViewComponent,\n        CalendarHeaderComponent, CalendarYearViewComponent, CalendarMonthViewComponent],\n    providers: [CalendarService]\n})\nexport class CalendarModule {}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component, ElementRef, EmbeddedViewRef,\n    EventEmitter, HostBinding,\n    HostListener, OnDestroy,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport focusTrap from 'focus-trap';\n\n/**\n * Not intended for external use.\n */\n@Component({\n    selector: 'fd-popover-container',\n    template: `\n        <span class=\"fd-popover__arrow\" x-arrow></span>\n        <ng-container #vc>\n            {{contentString}}\n        </ng-container>\n    `,\n    styleUrls: ['./popover-container.scss'],\n    host: {\n        class: 'fd-popover__popper fd-popover-container-custom',\n        'tabindex': '-1'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverContainer implements AfterViewInit, OnDestroy {\n\n    @ViewChild('vc', { read: ViewContainerRef })\n    containerRef: ViewContainerRef;\n\n    @HostBinding('class.fd-popover__popper--no-arrow')\n    noArrow: boolean = true;\n\n    @Output()\n    isSetup = new EventEmitter<undefined>();\n\n    content: TemplateRef<any> | string;\n\n    contentString: string;\n\n    context: any;\n\n    placement: string;\n\n    focusTrapped: boolean;\n\n    closeOnEscapeKey: boolean;\n\n    private componentRef: EmbeddedViewRef<any>;\n    private focusTrap: any;\n\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef) {\n    }\n\n    ngAfterViewInit(): void {\n        if (this.content instanceof TemplateRef) {\n            this.loadFromTemplate(this.content);\n        } else {\n            this.contentString = this.content;\n        }\n        this.setupFocusTrap();\n        this.isSetup.emit();\n        this.cdRef.detectChanges();\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusTrap) {\n            this.focusTrap.deactivate();\n        }\n    }\n\n    private loadFromTemplate(content: TemplateRef<any>): void {\n        this.containerRef.clear();\n        const context = {\n            $implicit: this.context\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(content, context);\n    }\n\n    private setupFocusTrap(): void {\n        if (this.focusTrapped) {\n            try {\n                this.focusTrap = focusTrap(this.elRef.nativeElement, {\n                    clickOutsideDeactivates: true,\n                    escapeDeactivates: false,\n                    initialFocus: this.elRef.nativeElement\n                });\n                this.focusTrap.activate();\n            } catch (e) {\n                console.warn('Attempted to focus trap the popover, but no tabbable elements were found.');\n            }\n        }\n    }\n\n    @HostListener('keydown.escape')\n    escapeHandler(): void {\n        if (this.containerRef && this.context.isOpen && this.closeOnEscapeKey) {\n            this.context.close();\n        }\n    }\n}\n","import {\n    ApplicationRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    ElementRef, EmbeddedViewRef, EventEmitter, HostListener,\n    Injector, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { PopoverContainer } from './popover-container';\nimport Popper, { Placement, PopperOptions } from 'popper.js';\n\nexport type PopoverFillMode = 'at-least' | 'equal';\n\n/**\n * Directive which manages the popper and popover components of the library.\n * It can be attached to any element. To bind it to a body, use the following syntax.\n * ```html\n * <div [fdPopover]=\"template\">Control Element</div>\n * <ng-template #template>\n *     Popover Body\n * </ng-template>\n * ```\n */\n@Directive({\n    selector: '[fdPopover]'\n})\nexport class PopoverDirective implements OnInit, OnDestroy, OnChanges {\n\n    /** Content of the popover. Used through the actual directive tag. Accepts strings or TemplateRefs. */\n    @Input('fdPopover')\n    content: TemplateRef<any> | string;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** Whether the popover should display the default arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body' = 'body';\n\n    /** The Popper.js options to attach to this popover.\n     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details. */\n    @Input()\n    options: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private containerRef: ComponentRef<PopoverContainer>;\n    private popper: Popper;\n    private eventRef: Function[] = [];\n    private isSetup: boolean = false;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef,\n                private resolver: ComponentFactoryResolver,\n                private injector: Injector,\n                private appRef: ApplicationRef,\n                private renderer: Renderer2) {\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.isOpen) {\n            this.open();\n        }\n\n        this.setupFillBehaviour();\n        this.initPlacement();\n\n        this.addTriggerListeners();\n        this.isSetup = true;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        if (this.popper) {\n            this.popper.destroy();\n        }\n\n        if (this.containerRef) {\n            this.destroyContainer();\n        }\n\n        this.destroyTriggerListeners();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isSetup) {\n            return;\n        }\n\n        if (changes.triggers) {\n            setTimeout(() => {\n                this.destroyTriggerListeners();\n                this.addTriggerListeners();\n            });\n        }\n\n        if (changes.isOpen) {\n            if (changes.isOpen.currentValue) {\n                setTimeout(() => {\n                    this.isOpen = false;\n                    this.open(false);\n                });\n            } else {\n                setTimeout(() => {\n                    this.isOpen = true;\n                    this.close(false);\n                });\n            }\n        }\n\n        if (changes.placement) {\n            setTimeout(() => {\n                this.initPlacement();\n            });\n        }\n\n        if (changes.fillControl) {\n            setTimeout(() => {\n                this.setupFillBehaviour();\n            });\n        }\n    }\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(fireEvent: boolean = true): void {\n        if (this.isOpen) {\n            this.close(fireEvent);\n        } else {\n            this.open(fireEvent);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(fireEvent: boolean = true): void {\n        if (!this.isOpen && !this.disabled) {\n            this.createContainer();\n            this.isOpen = true;\n\n            if (fireEvent) {\n                this.isOpenChange.emit(this.isOpen);\n            }\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(fireEvent: boolean = true): void {\n        if (this.isOpen) {\n            this.destroyContainer();\n            this.isOpen = false;\n\n            if (fireEvent) {\n                this.isOpenChange.emit(this.isOpen);\n            }\n        }\n    }\n\n    /**\n     * Forces an update of the popover's positioning calculation.\n     */\n    public updatePopper(): void {\n        if (this.popper) {\n            this.popper.scheduleUpdate();\n        }\n    }\n\n    private createContainer(): void {\n        if (this.containerRef) {\n            return;\n        }\n        \n        const factory = this.resolver.resolveComponentFactory(PopoverContainer);\n        this.containerRef = factory.create(this.injector);\n\n        // Set instance properties\n        this.containerRef.instance.context = this;\n        this.containerRef.instance.content = this.content;\n        this.containerRef.instance.focusTrapped = this.focusTrapped;\n        this.containerRef.instance.noArrow = this.noArrow;\n        this.containerRef.instance.closeOnEscapeKey = this.closeOnEscapeKey;\n\n        this.appRef.attachView(this.containerRef.hostView);\n        const setupRef = this.containerRef.instance.isSetup.subscribe(() => {\n            this.createPopper();\n            setupRef.unsubscribe();\n        });\n\n        const containerEl = (this.containerRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        if (this.appendTo === 'body') {\n            document.body.appendChild(containerEl);\n        } else {\n            this.appendTo.appendChild(containerEl);\n        }\n\n    }\n\n    private destroyTriggerListeners(): void {\n        if (this.eventRef && this.eventRef.length > 0) {\n            this.eventRef.forEach(event => {\n                event();\n            });\n            this.eventRef = [];\n        }\n    }\n\n    private addTriggerListeners(): void {\n        if (this.triggers && this.triggers.length > 0) {\n            this.triggers.forEach(trigger => {\n                this.eventRef.push(this.renderer.listen(this.elRef.nativeElement, trigger, () => {\n                    this.toggle();\n                }));\n            });\n        }\n    }\n\n    private destroyContainer(): void {\n        if (this.containerRef) {\n            this.appRef.detachView(this.containerRef.hostView);\n            this.containerRef.destroy();\n            this.containerRef = null;\n        }\n\n        if (this.popper) {\n            this.popper.destroy();\n            this.popper = null;\n        }\n    }\n\n    private createPopper(): void {\n        this.popper = new Popper(\n            this.elRef.nativeElement as HTMLElement,\n            this.containerRef.location.nativeElement as HTMLElement,\n            this.options\n        );\n    }\n\n    private fillReference(data): any {\n        data.offsets.popper.left = data.offsets.reference.left;\n        data.offsets.popper.right = data.offsets.reference.right;\n        data.offsets.popper.width = data.styles.width = data.offsets.reference.width;\n        return data;\n    }\n\n    private atLeastReference(data): any {\n        data.offsets.popper.left = data.offsets.reference.left;\n        data.offsets.popper.right = data.offsets.reference.right;\n        data.styles.minWidth = data.offsets.reference.width + 'px';\n        return data;\n    }\n\n    private initPlacement(): void {\n        if (this.placement) {\n            if (this.options) {\n                this.options.placement = this.placement;\n            } else {\n                this.options = {placement: this.placement}\n            }\n        }\n    }\n\n    private setupFillBehaviour(): void {\n        if (this.fillControlMode) {\n            if (this.options && this.options.modifiers) {\n                this.options.modifiers.fillReference = {\n                    enabled: true,\n                    fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,\n                    order: 840\n                }\n            } else {\n                this.options = {\n                    modifiers: {\n                        fillReference: {\n                            enabled: true,\n                            fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,\n                            order: 840\n                        }\n                    }\n                };\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent): void {\n        if (this.containerRef &&\n            this.isOpen &&\n            this.closeOnOutsideClick &&\n            event.target !== this.elRef.nativeElement &&\n            !this.elRef.nativeElement.contains(event.target) &&\n            !this.containerRef.location.nativeElement.contains(event.target)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n}\n","import { Component, Host, Inject, Input, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PopoverComponent } from '../popover.component';\n/**\n * A component used to enforce a certain layout for the popover. With additional styling\n * ```html\n * <fd-popover>\n *     <fd-dropdown>Dropdown</fd-dropdown>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-dropdown-control',\n    host: {\n        class: 'fd-dropdown',\n    },\n    templateUrl: 'popover-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n})\nexport class PopoverDropdownComponent {\n    /** Whether the popover should have an arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** The glyph to display. */\n    @Input()\n    glyph: string;\n\n    /** The btnType to display. */\n    @Input()\n    btnType: string = '';\n\n    /** Whether the dropdown is in compact format. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the dropdown is in a toolbar. */\n    @Input()\n    toolbar: boolean = false;\n\n    /** Whether the dropdown is opened. */\n    @Input()\n    isOpen: boolean = false;\n\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild, ViewEncapsulation, ContentChild\n} from '@angular/core';\nimport { Placement, PopperOptions } from 'popper.js';\nimport { PopoverDirective, PopoverFillMode } from './popover-directive/popover.directive';\nimport { PopoverDropdownComponent } from './popover-dropdown/popover-dropdown.component';\n\nlet popoverUniqueId: number = 0;\n\n/**\n * The popover is a wrapping component that accepts a *control* as well as a *body*.\n * The control is what will trigger the opening of the actual popover, which is called the body.\n * By default, popovers are triggered by click. This can be customized through the *triggers* input.\n * PopoverComponent is an abstraction of PopoverDirective.\n */\n@Component({\n    selector: 'fd-popover',\n    templateUrl: './popover.component.html',\n    styleUrls: ['./popover.component.scss'],\n    host: {\n        '[class.fd-popover-custom]': 'true',\n        '[attr.id]': 'id'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverComponent {\n\n    /** @hidden */\n    @ViewChild(PopoverDirective)\n    directiveRef: PopoverDirective;\n    /** @hidden */\n    @ContentChild(PopoverDropdownComponent) dropdownComponent: PopoverDropdownComponent;\n\n    /** Whether the popover should have an arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the popover should be treated as a dropdown. */\n    @Input()\n    isDropdown: boolean = false;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body';\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The Popper.js options to attach to this popover.\n     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details. */\n    @Input()\n    options: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Id of the popover. If none is provided, one will be generated. */\n    @Input()\n    id: string = 'fd-popover-' + popoverUniqueId++;\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Forces an update of the popover's positioning calculation.\n     */\n    public updatePopover(): void {\n        this.directiveRef.updatePopper();\n    }\n\n    /**\n     * Function is called every time popover changes open attribute\n     */\n    public openChanged(isOpen: boolean) {\n        this.isOpenChange.emit(isOpen);\n        this.updateDropdownIsOpen(isOpen);\n    }\n\n\n    /** @hidden\n     *  Function that allows us to control aria-expanded on dropdown child\n     * */\n    private updateDropdownIsOpen(isOpen: boolean) {\n        if (this.dropdownComponent) {\n            this.dropdownComponent.isOpen = isOpen;\n        }\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * A component used to enforce a certain layout for the popover.\n * ```html\n * <fd-popover>\n *     <fd-popover-control>Control Element</fd-popover-control>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-popover-control',\n    templateUrl: './popover-control.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverControlComponent {}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * A component used to enforce a certain layout for the popover.\n * ```html\n * <fd-popover>\n *     <fd-popover-control>Control Element</fd-popover-control>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-popover-body',\n    templateUrl: './popover-body.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverBodyComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PopoverComponent } from './popover.component';\nimport { PopoverControlComponent } from './popover-control/popover-control.component';\nimport { PopoverBodyComponent } from './popover-body/popover-body.component';\nimport { PopoverDirective } from './popover-directive/popover.directive';\nimport { PopoverContainer } from './popover-directive/popover-container';\nimport { PopoverDropdownComponent } from './popover-dropdown/popover-dropdown.component';\n\n@NgModule({\n    declarations: [\n        PopoverComponent,\n        PopoverControlComponent,\n        PopoverBodyComponent,\n        PopoverDirective,\n        PopoverContainer,\n        PopoverDropdownComponent,\n    ],\n    imports: [CommonModule],\n    exports: [PopoverComponent, PopoverControlComponent, PopoverBodyComponent, PopoverDirective, PopoverDropdownComponent],\n    entryComponents: [PopoverContainer]\n})\nexport class PopoverModule {}\n","import {\n    Component, HostBinding,\n    ViewEncapsulation,\n    Input\n} from '@angular/core';\n\n/**\n * The component that represents a menu.\n */\n@Component({\n    selector: 'fd-menu',\n    templateUrl: './menu.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['menu.component.scss']\n})\nexport class MenuComponent {\n    /** @hidden */\n    @HostBinding('class.fd-menu')\n    fdMenuClass: boolean = true;\n\n    /** The separator line for each menu item. When set to true, it adds a separator below each menu item in the list. \n     * False by default. Leave empty for default. */\n    @Input()\n    @HostBinding('class.fd-menu__list--separated')\n    separator: boolean = false;\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a menu group.\n */\n@Component({\n    selector: 'fd-menu-group',\n    templateUrl: './menu-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class MenuGroupComponent {\n    /** @hidden*/\n    @HostBinding('class.fd-has-display-block')\n    fdHasDisplayBlockClass: boolean = true;\n\n    /** @hidden*/\n    @HostBinding('class.fd-menu__group')\n    fdMenuGroupClass: boolean = true;\n\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive that represents the menu title.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-title]'\n})\nexport class MenuTitleDirective {\n    /** @hidden */\n    @HostBinding('class')\n    elementClass = 'fd-menu__title';\n\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive that represents a listing structure of the menu.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-list]'\n})\nexport class MenuListDirective {\n    /** @hidden */\n    @HostBinding('class.fd-menu__list')\n    fdMenuListClass: boolean = true;\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\nimport { DefaultMenuItem } from './default-menu-item';\n\n/**\n * The directive that represents a menu item.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-item]',\n})\nexport class MenuItemDirective implements DefaultMenuItem {\n\n    /** @hidden*/\n    @HostBinding('class.fd-menu__item')\n    fdMenuItemClass: boolean = true;\n\n    /** @hidden */\n    constructor (public itemEl: ElementRef) {}\n\n    public focus(): void {\n        this.itemEl.nativeElement.focus();\n    }\n\n    public click(): void {\n        this.itemEl.nativeElement.click();\n    }\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive for menu addon(for icons).\n */\n@Directive({\n    selector: '[fd-menu-addon], [fdMenuAddon]'\n})\nexport class MenuAddonDirective {\n    /** @hidden */\n    @HostBinding('class.fd-menu--addon-before')\n    fdMenuAddonClass: boolean = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive for menu item addon(for icons).\n */\n@Directive({\n    selector: '[fd-menu-item-addon], [fdMenuItemAddon]'\n})\nexport class MenuItemAddonDirective {\n    /** @hidden */\n    @HostBinding('class.fd-menu__addon-before')\n    fdMenuItemAddonClass: boolean = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MenuComponent } from './menu.component';\nimport { MenuGroupComponent } from './menu-group.component';\nimport { MenuTitleDirective } from './menu-title.directive';\nimport { MenuListDirective } from './menu-list.directive';\nimport { MenuItemDirective } from './menu-item.directive';\nimport { MenuAddonDirective } from './menu-addon.directive';\nimport { MenuItemAddonDirective } from './menu-item-addon.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        MenuComponent,\n        MenuGroupComponent,\n        MenuTitleDirective,\n        MenuListDirective,\n        MenuItemDirective,\n        MenuAddonDirective,\n        MenuItemAddonDirective\n    ],\n    declarations: [\n        MenuComponent,\n        MenuGroupComponent,\n        MenuTitleDirective,\n        MenuListDirective,\n        MenuItemDirective,\n        MenuAddonDirective,\n        MenuItemAddonDirective\n    ]\n})\nexport class MenuModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'displayFnPipe'\n})\n\nexport class DisplayFnPipe implements PipeTransform {\n\n    transform(value: any, displayFn: Function): string {\n        return displayFn(value);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'highlight'\n})\n\nexport class SearchHighlightPipe implements PipeTransform {\n\n    transform(value: string, args: string, active: boolean = true): string {\n        if (args && value && active) {\n            const startIndex = value.toLowerCase().indexOf(args.toLowerCase());\n            if (startIndex !== -1) {\n                const matchingString = value.substr(startIndex, args.length);\n                return value.replace(matchingString, '<strong>' + matchingString + '</strong>');\n            }\n\n        }\n        return value;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { DisplayFnPipe } from './displayFn.pipe';\nimport { SearchHighlightPipe } from './search-highlight.pipe';\n\n@NgModule({\n    declarations: [\n        DisplayFnPipe,\n        SearchHighlightPipe\n    ],\n    exports: [\n        DisplayFnPipe,\n        SearchHighlightPipe\n    ]\n})\nexport class PipeModule {}\n","import { Subject } from 'rxjs';\nimport { Output } from '@angular/core';\nimport { DefaultMenuItem } from './default-menu-item';\n\nexport class MenuKeyboardService {\n\n    /** Event emitted when an item link is clicked.*/\n    @Output()\n    public readonly itemClicked: Subject<number> = new Subject<number>();\n\n    /** Whether user wants to remove keyboard handling */\n    disableKeydownHandling: boolean = false;\n\n    /** Function that is supposed to be called, when focus escape before list */\n    focusEscapeBeforeList: Function;\n\n    /** Function that is supposed to be called, when focus escape after list */\n    focusEscapeAfterList: Function;\n\n    /** Function that should be called every time, keydown event is used on some menu item,\n     * it provides whole functionality for handling\n     * ArrowDown - focus, ArrowUp - focus, Space bar - simulate click, Enter key - simulate click.\n     * @param event KeyboardEvent\n     * @param index index of items starts from 0\n     * @param menuItems array of menu item directives\n     * */\n    keyDownHandler(event: KeyboardEvent, index: number, menuItems: DefaultMenuItem[]): void {\n\n        if (this.disableKeydownHandling) {\n            return;\n        }\n\n        switch (event.code) {\n            case ('ArrowDown'): {\n                if (menuItems.length > index + 1) {\n                    menuItems[index + 1].focus();\n                } else {\n                    if (this.focusEscapeAfterList) {\n                        this.focusEscapeAfterList();\n                    } else {\n                        menuItems[0].focus();\n                    }\n                }\n                event.preventDefault();\n                break;\n            }\n            case ('ArrowUp'): {\n                if (index > 0) {\n                    menuItems[index - 1].focus();\n                } else {\n                    if (this.focusEscapeBeforeList) {\n                        this.focusEscapeBeforeList();\n                    } else {\n                        menuItems[menuItems.length - 1].focus();\n                    }\n                }\n                event.preventDefault();\n                break;\n            }\n            case ('Space'): {\n                if (menuItems[index]) {\n                    menuItems[index].click();\n                    event.preventDefault();\n                }\n                break;\n            }\n            case ('Enter'): {\n                if (menuItems[index]) {\n                    menuItems[index].click();\n                    event.preventDefault();\n                }\n                break;\n            }\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    SimpleChanges, TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MenuItemDirective } from '../menu/menu-item.directive';\nimport { ComboboxItem } from './combobox-item';\nimport { MenuKeyboardService } from '../menu/menu-keyboard.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport focusTrap, { FocusTrap } from 'focus-trap';\n\n/**\n * Allows users to filter through results and select a value.\n *\n * Supports Angular Forms.\n * ```html\n * <fd-combobox\n *      [(ngModel)]=\"searchTerm\"\n *      [dropdownValues]=\"dropdownValues\"\n *      [placeholder]=\"'Type some text...'\">\n * </fd-combobox>\n * ```\n */\n@Component({\n    selector: 'fd-combobox',\n    templateUrl: './combobox.component.html',\n    styleUrls: ['./combobox.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ComboboxComponent),\n            multi: true\n        },\n        MenuKeyboardService\n    ],\n    host: {\n        '[class.fd-combobox-custom-class]': 'true',\n        '[class.fd-combobox-input]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ComboboxComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    /** Values to be filtered in the search input. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Filter function. Accepts an array of objects and a search term as arguments\n     * and returns a string. See search input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Whether the search input is disabled. **/\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder of the search input. **/\n    @Input()\n    placeholder: string;\n\n    /** Icon to display in the right-side button. */\n    @Input()\n    glyph: string = 'navigation-down-arrow';\n\n    /**\n     *  The trigger events that will open/close the options popover, by default it is click, so if user click on\n     *  input field, the popover with options will open or close\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).\n     */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /**\n     * The template with which to display the individual listed items.\n     * Use it by passing an ng-template with implicit content. See examples for more info.\n     */\n    @Input()\n    itemTemplate: TemplateRef<any>;\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '200px';\n\n    /** Search function to execute when the Enter key is pressed on the main input. */\n    @Input()\n    searchFunction: Function;\n\n    /** Whether the search input should be displayed in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the matching string should be highlighted during filtration. */\n    @Input()\n    highlighting: boolean = true;\n\n    /** Whether the popover should close when a user selects a result. */\n    @Input()\n    closeOnSelect: boolean = true;\n\n    /** Whether the input field should be populated with the result picked by the user. */\n    @Input()\n    fillOnSelect: boolean = true;\n\n    /** Defines if combobox should behave same as dropdown. When it's enabled writing inside text input won't\n     * trigger onChange function, until it matches one of displayed dropdown values. Also communicating with combobox\n     * can be achieved only by objects with same type as dropdownValue */\n    @Input()\n    communicateByObject: boolean = false;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See search input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Event emitted when an item is clicked. Use *$event* to retrieve it. */\n    @Output()\n    readonly itemClicked: EventEmitter<ComboboxItem> = new EventEmitter<ComboboxItem>();\n\n    /** @hidden */\n    @ViewChildren(MenuItemDirective)\n    menuItems: QueryList<MenuItemDirective>;\n\n    /** @hidden */\n    @ViewChild('searchInputElement')\n    searchInputElement: ElementRef;\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    public focusTrap: FocusTrap;\n\n    /** @hidden */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** @hidden */\n    onChange: any = () => { };\n\n    /** @hidden */\n    onTouched: any = () => { };\n\n    constructor(\n        private elRef: ElementRef,\n        private menuKeyboardService: MenuKeyboardService\n    ) { }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n        this.setupFocusTrap();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.inputText) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n            } else {\n                this.displayedValues = this.dropdownValues;\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /** @hidden */\n    ngAfterViewInit(): void {\n        this.menuKeyboardService.itemClicked\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.onMenuClickHandler(index));\n        this.menuKeyboardService.focusEscapeBeforeList = () => this.searchInputElement.nativeElement.focus();\n        this.menuKeyboardService.focusEscapeAfterList = () => { };\n    }\n\n    /** @hidden */\n    onInputKeydownHandler(event) {\n        if (event.code === 'Enter' && this.searchFunction) {\n            this.searchFunction();\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            if (this.menuItems && this.menuItems.first) {\n                this.menuItems.first.focus();\n            }\n        }\n    }\n\n    /** @hidden */\n    onInputKeyupHandler(event: KeyboardEvent) {\n        if (this.inputText &&\n            this.inputText.length &&\n            event.code !== 'Escape' &&\n            event.code !== 'Space' &&\n            event.code !== 'Enter') {\n            this.isOpen = true;\n            this.isOpenChangeHandle(this.isOpen);\n        }\n    }\n\n    /** @hidden */\n    onMenuKeydownHandler(event: KeyboardEvent, index: number) {\n        this.menuKeyboardService.keyDownHandler(event, index, this.menuItems.toArray());\n    }\n\n    /** @hidden */\n    onMenuClickHandler(index: number) {\n        const selectedItem = this.displayedValues[index];\n        if (selectedItem) {\n            this.handleClickActions(selectedItem);\n            this.itemClicked.emit({ item: selectedItem, index: index });\n        }\n    }\n\n    /** Get the input text of the input. */\n    get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /** Set the input text of the input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        if (this.communicateByObject) {\n            this.onChange(this.getOptionObjectByDisplayedValue(value));\n        } else {\n            this.onChange(value);\n        }\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any): void {\n        if (this.communicateByObject) {\n            this.inputTextValue = this.displayFn(value);\n        } else {\n            this.inputTextValue = value;\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n    }\n\n    /** @hidden */\n    onPrimaryButtonClick(): void {\n        if (this.searchFunction) {\n            this.searchFunction();\n        }\n    }\n\n    /** @hidden */\n    isOpenChangeHandle(isOpen: boolean): void {\n        this.isOpen = isOpen;\n        this.onTouched();\n        if (isOpen) {\n            this.focusTrap.activate();\n        } else {\n            this.focusTrap.deactivate();\n        }\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private defaultDisplay(str: any): string {\n        return str;\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n    private handleClickActions(term): void {\n        if (this.closeOnSelect) {\n            this.isOpen = false;\n            this.isOpenChangeHandle(this.isOpen);\n        }\n        if (this.fillOnSelect) {\n            this.inputText = this.displayFn(term);\n            this.handleSearchTermChange();\n        }\n    }\n\n    private getOptionObjectByDisplayedValue(displayValue: string): any {\n        return this.dropdownValues.find(value => this.displayFn(value) === displayValue);\n    }\n\n    private setupFocusTrap(): void {\n        try {\n            this.focusTrap = focusTrap(this.elRef.nativeElement, {\n                clickOutsideDeactivates: true,\n                returnFocusOnDeactivate: true,\n                escapeDeactivates: false\n            });\n        } catch (e) {\n            console.warn('Unsuccessful attempting to focus trap the Combobox.');\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { FormsModule } from '@angular/forms';\nimport { MenuModule } from '../menu/menu.module';\nimport { PipeModule } from '../utils/pipes/pipe.module';\nimport { ComboboxComponent } from './combobox.component';\nimport { ButtonModule } from '../button/button.module';\n\n@NgModule({\n    declarations: [ComboboxComponent],\n    imports: [CommonModule, PopoverModule, FormsModule, MenuModule, PipeModule, ButtonModule],\n    exports: [ComboboxComponent]\n})\nexport class ComboboxModule {}\n","import { Injectable } from '@angular/core';\nimport { FdDate } from '../../calendar/models/fd-date';\n\nexport function DATE_FORMAT_FACTORY() {\n    return new DateFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the date format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: DATE_FORMAT_FACTORY\n})\nexport abstract class DateFormatParser {\n\n    /**\n     * Delimiter for the range. This should not show up in the string representation of the dates.\n     */\n    rangeDelimiter: string = ' - ';\n\n    /**\n     * Should take in a string value and return a FdDate model object.\n     * @param value String to concert to a FdDate model object.\n     */\n    abstract parse(value: string): FdDate;\n\n    /**\n     * Should take in a FdDate model object and return a string representation.\n     * @param date FdDate to format to string value.\n     */\n    abstract format(date: FdDate): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class DateFormatParserDefault extends DateFormatParser {\n\n    /**\n     * Takes in a string value and return a FdDate model object.\n     * @param value String to concert to a FdDate model object.\n     */\n    public parse(value: string): FdDate {\n        if (value) {\n            const str = value.toString().split('/').map(Number);\n            return new FdDate(str[2], str[0], str[1]);\n        } else {\n            return new FdDate(null, null, null);\n        }\n    }\n\n    /**\n     * Takes in a FdDate model object and return a string representation.\n     * @param date FdDate to format to string value.\n     */\n    public format(date: FdDate): string {\n        return date.month + '/' + date.day + '/' + date.year;\n    }\n}\n","import {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarType, DaysOfWeek, FdCalendarView } from '../calendar/calendar.component';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { Placement } from 'popper.js';\nimport { FdDate } from '../calendar/models/fd-date';\nimport { CalendarService } from '../calendar/calendar.service';\nimport { CalendarComponent } from '../calendar/calendar.component';\nimport { FdRangeDate } from '../calendar/models/fd-range-date';\nimport { DateFormatParser } from './format/date-parser';\n\n/**\n * The datetime picker component is an opinionated composition of the fd-popover and\n * fd-calendar components to accomplish the UI pattern for picking a date.\n *\n * Supports Angular Forms.\n * ```html\n * <fd-date-picker [(ngModel)]=\"date\"></fd-date-picker>\n * ```\n */\n@Component({\n    selector: 'fd-date-picker',\n    templateUrl: './date-picker.component.html',\n    styleUrls: ['./date-picker.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-date-picker]': 'true',\n        '[class.fd-date-picker-custom]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DatePickerComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DatePickerComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DatePickerComponent implements ControlValueAccessor, Validator {\n\n    /** @hidden The value of the input */\n    inputFieldDate = null;\n\n    /** @hidden Whether the date input is invalid */\n    isInvalidDateInput: boolean = false;\n\n    /** @hidden Whether the date picker is open */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    @ViewChild(CalendarComponent) calendarComponent: CalendarComponent;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    type: CalendarType = 'single';\n\n    /** Date picker input placeholder string */\n    @Input()\n    placeholder: string = 'mm/dd/yyyy';\n\n    /** Whether this is the compact input date picker */\n    @Input()\n    compact: boolean = false;\n\n    /** The currently selected CalendarDay model */\n    @Input()\n    selectedDate: FdDate;\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate = { start: null, end: null };\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    startingDayOfWeek: DaysOfWeek = 1;\n\n    /** Whether to validate the date picker input. */\n    @Input()\n    useValidation: boolean = true;\n\n    /** Aria label for the datepicker input. */\n    @Input()\n    dateInputLabel: string = 'Date input';\n\n    /** Aria label for the button to show/hide the calendar. */\n    @Input()\n    displayCalendarToggleLabel: string = 'Display calendar toggle';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /**\n     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** Whether the date picker is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Fired when a new date is selected. */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /** Event thrown every time selected first or last date in range mode is changed */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event thrown every time calendar active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** @hidden */\n    onChange: any = (selected: any) => {\n    };\n\n    /** @hidden */\n    onTouched: any = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Method that handle calendar active view change and throws event.\n     */\n    public handleCalendarActiveViewChange(activeView: FdCalendarView): void {\n        this.activeViewChange.emit(activeView);\n    }\n\n    /** @hidden */\n    public closeFromCalendar(): void {\n        if (this.type === 'single') {\n            this.closeCalendar();\n        }\n    }\n\n    /** Opens the calendar */\n    openCalendar(): void {\n        if (!this.disabled) {\n            this.onTouched();\n            this.isOpen = true;\n        }\n    }\n\n    /** Toggles the calendar open or closed */\n    public toggleCalendar(): void {\n        this.onTouched();\n        this.isOpen = !this.isOpen;\n    }\n\n    /** Closes the calendar if it is open */\n    public closeCalendar(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected single date changed\n     */\n    public handleSingleDateChange(date: FdDate): void {\n        if (date) {\n            this.inputFieldDate = this.dateAdapter.format(date);\n            this.selectedDate = date;\n            this.selectedDateChange.emit(date);\n            this.onChange(date);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected range date changed\n     */\n    public handleRangeDateChange(dates: FdRangeDate): void {\n        if (dates &&\n            (!CalendarService.datesEqual(this.selectedRangeDate.start, dates.start) ||\n                !CalendarService.datesEqual(this.selectedRangeDate.end, dates.end))\n        ) {\n            this.inputFieldDate = this.dateAdapter.format(dates.start) + this.dateAdapter.rangeDelimiter\n                + this.dateAdapter.format(dates.end)\n            ;\n            this.selectedRangeDate = { start: dates.start, end: dates.end };\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n            this.onChange(this.selectedRangeDate);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur\n     */\n    public handleInputChange(strDate: string): void {\n        this.dateStringUpdate(strDate);\n    }\n\n    /** @hidden */\n    constructor(\n        public dateAdapter: DateFormatParser\n    ) {\n    }\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (selected: any) => { void }): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected: FdRangeDate | FdDate): void {\n        /** If written value is not defined, null, empty string */\n        if (!selected) {\n            this.inputFieldDate = '';\n            return;\n        }\n        if (this.type === 'single') {\n            /**\n             * For single mode, if the date is invalid, model is changed, it refresh currently\n             * input field text, but it does not refresh currently displayed day\n             */\n            selected = <FdDate>selected;\n            this.selectedDate = selected;\n            if (this.isModelValid()) {\n                this.inputFieldDate = this.dateAdapter.format(selected);\n                this.calendarComponent.setCurrentlyDisplayed(this.selectedDate);\n            } else {\n                this.inputFieldDate = '';\n            }\n\n        } else {\n            /**\n             * For range mode, if the date is invalid, model is changed, but it does not refresh currently\n             * displayed day view, or input field text\n             */\n            selected = <FdRangeDate>selected;\n\n            if (selected.start) {\n                this.selectedRangeDate = { start: selected.start, end: selected.end };\n\n                if (this.isModelValid()) {\n                    this.calendarComponent.setCurrentlyDisplayed(this.selectedRangeDate.start);\n                    this.inputFieldDate = this.dateAdapter.format(selected.start) +\n                        this.dateAdapter.rangeDelimiter + this.dateAdapter.format(selected.end);\n                } else {\n                    this.inputFieldDate = '';\n                }\n            } else {\n                this.inputFieldDate = '';\n            }\n        }\n        this.isInvalidDateInput = !this.isModelValid();\n    }\n\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to date, depending on type or\n     * validation the results are different. It also changes to state of isInvalidDateInput\n     */\n    dateStringUpdate(date: string): void {\n        /** Case when there is single mode */\n        if (this.type === 'single') {\n\n            const fdDate = this.dateAdapter.parse(date);\n\n            /**\n             * Check if dates are equal, if dates are the same there is no need to make any changes\n             * Date in model is changed no matter if the parsed date fro string is valid or not.\n             */\n            if (!CalendarService.datesEqual(fdDate, this.selectedDate)) {\n                this.isInvalidDateInput = !fdDate.isDateValid();\n                this.selectedDate = fdDate;\n                this.onChange(this.selectedDate);\n                this.selectedDateChange.emit(this.selectedDate);\n\n                /** Check if date is valid, if it's not, there is no need to refresh calendar */\n                if (!this.isInvalidDateInput) {\n                    this.calendarComponent.setCurrentlyDisplayed(fdDate);\n                }\n            }\n\n\n            /** Case when there is range mode */\n        } else {\n            const currentDates = date.split(this.dateAdapter.rangeDelimiter);\n            const firstDate = this.dateAdapter.parse(currentDates[0]);\n            const secondDate = this.dateAdapter.parse(currentDates[1]);\n\n            /**\n             * Check if dates are equal, if dates are the same there is no need to make any changes\n             * Date in model is changed no matter if the parsed dates from string are valid or not.\n             */\n            if (!CalendarService.datesEqual(firstDate, this.selectedRangeDate.start) ||\n                !CalendarService.datesEqual(secondDate, this.selectedRangeDate.end)) {\n\n                this.isInvalidDateInput = !firstDate.isDateValid() || !secondDate.isDateValid();\n\n                /** If the end date is before the start date, there is need to replace them  */\n                if ((firstDate.getTimeStamp() > secondDate.getTimeStamp()) && secondDate.isDateValid()) {\n                    this.selectedRangeDate = { start: secondDate, end: firstDate };\n                } else {\n                    this.selectedRangeDate = { start: firstDate, end: secondDate };\n                }\n\n                this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                this.onChange({ start: this.selectedRangeDate.start, end: this.selectedRangeDate.end });\n\n                /** Check if dates are valid, if it's not, there is no need o refresh calendar */\n                if (!this.isInvalidDateInput) {\n                    this.calendarComponent.setCurrentlyDisplayed(this.selectedRangeDate.start);\n                }\n            }\n        }\n\n        if (!date && this.allowNull) {\n            this.isInvalidDateInput = false;\n        }\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        if (this.type === 'single') {\n            return this.selectedDate &&\n                this.selectedDate instanceof FdDate &&\n                this.selectedDate.isDateValid();\n        } else {\n            return this.selectedRangeDate &&\n                (\n                    this.selectedRangeDate.start &&\n                    this.selectedRangeDate.start instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                ) && (\n                    this.selectedRangeDate.end &&\n                    this.selectedRangeDate.end instanceof FdDate &&\n                    this.selectedRangeDate.end.isDateValid()\n                );\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CalendarModule } from '../calendar/calendar.module';\nimport { FormsModule } from '@angular/forms';\n\nimport { DatePickerComponent } from './date-picker.component';\n\n@NgModule({\n    declarations: [DatePickerComponent],\n    imports: [CommonModule, IconModule, PopoverModule, CalendarModule, FormsModule],\n    exports: [DatePickerComponent]\n})\nexport class DatePickerModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for labels inside the time component.\n */\n@Injectable({providedIn: 'root'})\nexport class TimeI18nLabels {\n\n    /** Aria label for the 'increase hours' button */\n    increaseHoursLabel: string = 'Increase hours';\n\n    /** Aria label for the 'hours' input */\n    hoursLabel: string = 'Hours';\n\n    /** Aria label for the 'decrease hours' button */\n    decreaseHoursLabel: string = 'Decrease hours';\n\n    /** Aria label for the 'increase minutes' button */\n    increaseMinutesLabel: string = 'Increase minutes';\n\n    /** Aria label for the 'minutes' input */\n    minutesLabel: string = 'Minutes';\n\n    /** Aria label for the 'decrease minutes' button */\n    decreaseMinutesLabel: string = 'Decrease minutes';\n\n    /** Aria label for the 'increase seconds' button */\n    increaseSecondsLabel: string = 'Increase seconds';\n\n    /** Aria label for the 'seconds' input */\n    secondsLabel: string = 'Seconds';\n\n    /** Aria label for the 'decrease seconds' button */\n    decreaseSecondsLabel: string = 'Decrease seconds';\n\n    /** Aria label for the 'increase period' button */\n    increasePeriodLabel: string = 'Increase period';\n\n    /** Aria label for the 'period' input */\n    periodLabel: string = 'Period';\n\n    /** Aria label for the 'decrease period' button */\n    decreasePeriodLabel: string = 'Decrease period';\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for placeholders and meridian modifiers naming in the time component.\n */\n@Injectable({providedIn: 'root'})\nexport class TimeI18n {\n\n    /**\n     * Ante Meridian naming label. The value written in the input should match this or Post Meridian. Otherwise it would be\n     * treated as invalid\n     * */\n    meridianAm: string = 'am';\n\n    /**\n     * Post Meridian naming label. The value written in the input should match this or Ante Meridian. Otherwise it would be\n     * treated as invalid\n     * */\n    meridianPm: string = 'pm';\n\n    /**\n     * Placeholder on the Ante Meridian / Post Meridian input\n     * */\n    meridianPlaceholder: string = 'am';\n\n    /**\n     * Placeholder for hours input\n     * */\n    hoursPlaceholder: string = 'hh';\n\n    /**\n     * Placeholder for minutes input\n     * */\n    minutesPlaceholder: string = 'mm';\n\n    /**\n     * Placeholder for seconds input\n     * */\n    secondsPlaceholder: string = 'ss';\n\n    /**\n     * Defines if the meridian validation should be case sensitive.\n     * */\n    meridianCaseSensitive: boolean = false;\n\n}\n","import { Component, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { TimeObject } from './time-object';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimeI18nLabels } from './i18n/time-i18n-labels';\nimport { TimeI18n } from './i18n/time-i18n';\n\n@Component({\n    selector: 'fd-time',\n    templateUrl: './time.component.html',\n    styleUrls: ['./time.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        class: 'fd-time fd-has-display-block'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimeComponent implements OnChanges, ControlValueAccessor {\n\n    /**\n     * @Input When set to false, uses the 24 hour clock (hours ranging from 0 to 23)\n     * and does not display a period control.\n     */\n    @Input() meridian: boolean = false;\n\n    /**\n     *  @Input When set to false, does not set the input field to invalid state on invalid entry.\n     */\n    @Input() validate: boolean = true;\n\n    /**\n     * @Input Disables the component.\n     */\n    @Input() disabled: boolean;\n\n    /**\n     * @Input When set to false, hides the buttons that increment and decrement the corresponding input.\n     */\n    @Input() spinners: boolean = true;\n\n    /**\n     * @Input When set to false, hides the input for seconds.\n     */\n    @Input() displaySeconds: boolean = true;\n\n    /** @Input When set to false, hides the input for minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /**\n     * When set to false, hides the input for hours\n     */\n    @Input()\n    displayHours: boolean = true;\n\n    /**\n     * @Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),\n     * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:\n     *\n     * ```json\n     * { hour: 12, minute: 0, second: 0 }\n     * ```\n     */\n    @Input()\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @hidden */\n    @Output()\n    readonly focusArrowLeft: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden\n     * Used only in meridian mode. Stores information the current am/pm state.\n     */\n    period: string;\n\n    /** @hidden\n     * Variable that is displayed as an hour.\n     * For meridian mode ranging from 0 to 12,\n     * For non-meridian mode ranging from 0 to 23, and reflects the hour value\n     */\n    displayedHour: number = 0;\n\n    /** @hidden */\n    onChange = (time: TimeObject) => {\n    };\n\n    /** @hidden */\n    onTouched = () => {\n    };\n\n    /** @hidden */\n    registerOnChange(fn: (time: TimeObject) => void): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    constructor(\n        public timeI18nLabels: TimeI18nLabels,\n        public timeI18n: TimeI18n\n    ) {}\n\n    /** @hidden */\n    writeValue(time: TimeObject): void {\n        if (!time) {\n            return;\n        }\n        this.time = time;\n        this.setDisplayedHour();\n    }\n\n    /** @hidden\n     * Reacts only when there is meridian or time input change\n     */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.meridian || changes.time) {\n            this.setDisplayedHour();\n        }\n    }\n\n    /** @hidden\n     * Changes displayed hour value, used mostly when the model hour is changed\n     */\n    setDisplayedHour(): void {\n        if (!this.meridian) {\n            this.displayedHour = this.time.hour;\n        } else if (this.time.hour === 0) {\n            this.displayedHour = 12;\n            this.period = this.timeI18n.meridianAm;\n        } else if (this.time.hour > 12) {\n            this.displayedHour = this.time.hour - 12;\n            this.period = this.timeI18n.meridianPm;\n        } else if (this.time.hour === 12) {\n            this.displayedHour = 12;\n            this.period = this.timeI18n.meridianPm;\n        } else {\n            this.displayedHour = this.time.hour;\n            this.period = this.timeI18n.meridianAm;\n        }\n    }\n\n    /** @hidden\n     * Handles changes of displayed hour value from template.\n     */\n    displayedHourChanged(): void {\n        if (!this.meridian) {\n            this.time.hour = this.displayedHour;\n        } else {\n            if (this.period === this.timeI18n.meridianAm) {\n                if (this.displayedHour === 12) {\n                    this.time.hour = 0;\n                } else {\n                    this.time.hour = this.displayedHour;\n                }\n            } else if (this.period === this.timeI18n.meridianPm) {\n                if (this.displayedHour === 12) {\n                    this.time.hour = this.displayedHour;\n                } else {\n                    this.time.hour = this.displayedHour + 12;\n                }\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** @hidden\n     * Handles the blur events from inputs. Also rewrite values if they are incorrect, prevents from negative or too big\n     * values. Also changes period if it's on meridian type and hour is bigger than 12.\n     */\n    inputBlur(inputType: string): void {\n        switch (inputType) {\n            case 'hour': {\n                this.displayedHour = Math.round(Math.abs(this.displayedHour)) % 24;\n                this.time.hour = this.displayedHour;\n\n                if (this.meridian) {\n                    if (this.displayedHour > 12) {\n                        this.period = this.timeI18n.meridianPm;\n                        this.displayedHour = this.displayedHour !== 12 ? this.displayedHour % 12 : this.displayedHour;\n                    } else if (this.displayedHour === 0) {\n                        this.displayedHour = 12;\n                        this.period = this.timeI18n.meridianAm;\n                    } else if (this.isAm(this.period) && this.displayedHour === 12) {\n                        this.time.hour = 0;\n                    }\n                }\n                break;\n            }\n            case 'minute': {\n                this.time.minute = Math.abs(Math.round(this.time.minute) % 60);\n                break;\n            }\n            case 'second': {\n                this.time.second = Math.abs(Math.round(this.time.second) % 60);\n                break;\n            }\n            case 'period': {\n                /**\n                 * When there is invalid period, function changes period to valid basing on actual hour\n                 */\n                if (!this.period ||\n                    (!this.isPm(this.period) && !this.isAm(this.period))\n                ) {\n                    this.setDisplayedHour();\n                }\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Increases the hour value by one. */\n    increaseHour(): void {\n        if (this.time.hour === null) {\n            this.time.hour = 0;\n        } else if (this.time.hour === 23) {\n            this.time.hour = 0;\n        } else {\n            this.time.hour = this.time.hour + 1;\n        }\n        this.setDisplayedHour();\n        this.onChange(this.time);\n    }\n\n    /** Decreases the hour value by one. */\n    decreaseHour(): void {\n        if (this.time.hour === null) {\n            this.time.hour = 0;\n        } else if (this.time.hour === 0) {\n            this.time.hour = 23;\n        } else {\n            this.time.hour = this.time.hour - 1;\n        }\n        this.setDisplayedHour();\n        this.onChange(this.time);\n    }\n\n    /** Increases the minute value by one. */\n    increaseMinute(): void {\n        if (this.time.minute === null) {\n            this.time.minute = 0;\n        } else if (this.time.minute === 59) {\n            this.time.minute = 0;\n            this.increaseHour();\n        } else {\n            this.time.minute = this.time.minute + 1;\n        }\n        this.onChange(this.time);\n    }\n\n    /** Decreases the minute value by one. */\n    decreaseMinute(): void {\n        if (this.time.minute === null) {\n            this.time.minute = 0;\n        } else if (this.time.minute === 0) {\n            this.time.minute = 59;\n            this.decreaseHour();\n        } else {\n            this.time.minute = this.time.minute - 1;\n        }\n        this.onChange(this.time);\n    }\n\n    /** Increases the second value by one. */\n    increaseSecond(): void {\n        if (this.displaySeconds) {\n            if (this.time.second === null) {\n                this.time.second = 0;\n            } else if (this.time.second === 59) {\n                this.time.second = 0;\n                this.increaseMinute();\n            } else {\n                this.time.second = this.time.second + 1;\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Decreases the second value by one. */\n    decreaseSecond(): void {\n        if (this.displaySeconds) {\n            if (this.time.second === null) {\n                this.time.second = 0;\n            } else if (this.time.second === 0) {\n                this.time.second = 59;\n                this.decreaseMinute();\n            } else {\n                this.time.second = this.time.second - 1;\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Toggles the period (am/pm). */\n    togglePeriod(): void {\n        if (this.time.hour < 24 && this.time.hour >= 0) {\n            if (this.isAm(this.period)) {\n                this.period = this.timeI18n.meridianPm;\n                this.periodModelChange();\n            } else if (this.isPm(this.period)) {\n                this.period = this.timeI18n.meridianAm;\n                this.periodModelChange();\n            }\n        }\n    }\n\n    /** @hidden\n     * Handles minutes model change from template\n     * */\n    minuteModelChange(): void {\n        if (!(this.time.minute > 59 || this.time.minute < 0) || !this.validate) {\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles seconds model change from template\n     * */\n    secondModelChange(): void {\n        if (!(this.time.second > 59 || this.time.second < 0) || !this.validate) {\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles period model change. depending on current hour and new period changes hours by +/- 12\n     */\n    periodModelChange(): void {\n        if (this.time && !this.time.hour) {\n            this.time.hour = 0;\n        }\n        if (this.time.hour < 24 && this.time.hour >= 0) {\n            if (this.isPm(this.period) && this.time.hour < 12) {\n                this.time.hour = this.time.hour + 12;\n            } else if (this.time.hour >= 12 && this.isAm(this.period)) {\n                this.time.hour = this.time.hour - 12;\n            }\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles last button keyboard events\n     */\n    lastButtonKeydown(event: KeyboardEvent): void {\n        if (event.code === 'Tab' && !event.shiftKey) {\n            event.preventDefault();\n            this.focusArrowLeft.emit();\n        }\n    }\n\n    /**\n     * @hidden\n     * Defines if period is PM, Considers the fact that period should be case sensitive\n     */\n    private isPm(period: string): boolean {\n        const pmMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianPm : this.timeI18n.meridianPm.toLocaleUpperCase();\n        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();\n        return period === pmMeridian;\n    }\n\n    /**\n     * @hidden\n     * Defines if period is AM, Considers the fact that period should be case sensitive\n     */\n    private isAm(period: string): boolean {\n        const amMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianAm : this.timeI18n.meridianAm.toLocaleUpperCase();\n        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();\n        return period === amMeridian;\n    }\n}\n","/**\n * Default date with time model used by the fundamental components.\n */\n\nimport { FdDate } from '../../calendar/models/fd-date';\nimport { TimeObject } from '../../time/time-object';\n\nexport class FdDatetime {\n\n    date: FdDate;\n    time: TimeObject;\n\n    /**\n     * Static function to get the current date in FdDateTime form.\n     */\n    static getToday(): FdDatetime {\n        const date: Date = new Date();\n        const time: TimeObject = {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds()};\n        return new FdDatetime(FdDate.getToday(), time);\n    }\n\n    /**\n     * Constructor to build a FdDateTime object from a FdDate and TimeObject.\n     * @param date the FdDate object.\n     * @param time the TimeObject object.\n     */\n    constructor(\n        date: FdDate,\n        time: TimeObject\n    ) {\n        this.date = date;\n        this.time = time;\n    }\n\n    /**\n     * Get Luxon date object converted to string from FdDate.\n     */\n    public toLocaleDateString(): string {\n        if (this.toDate() && this.isTimeValid() && this.isDateValid()) {\n            return this.toDate().toLocaleString();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Method that checks validity of time on FdDateTime object.\n     */\n    public isTimeValid(): boolean {\n\n        if (!this.time ||\n            this.hour === undefined ||\n            this.minute === undefined ||\n            this.second === undefined\n        ) {\n            return false;\n        }\n\n        if (this.hour > 23 || this.hour < 0) {\n            return false;\n        }\n\n        if (this.minute > 59 || this.minute < 0) {\n            return false;\n        }\n\n        if (this.second > 59 || this.second < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Method that checks validity of date on FdDateTime object.\n     */\n    public isDateValid(): boolean {\n        return this.date && this.date.isDateValid();\n    }\n\n    public get year(): number {\n        if (this.date) {\n            return this.date.year;\n        }\n    }\n\n    public get month(): number {\n        if (this.date) {\n            return this.date.month;\n        }\n    }\n\n    public get day(): number {\n        if (this.date) {\n            return this.date.day;\n        }\n    }\n\n    public get hour(): number {\n        if (this.time) {\n            return this.time.hour;\n        }\n    }\n\n    public get minute(): number {\n        if (this.time) {\n            return this.time.minute;\n        }\n    }\n\n    public get second(): number {\n        if (this.time) {\n            return this.time.second;\n        }\n    }\n\n    /**\n     * Get native date object from FdDate.\n     */\n    public toDate(): Date {\n        return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { FdDatetime } from '../models/fd-datetime';\nimport { FdDate } from '../../calendar/models/fd-date';\nimport { TimeObject } from '../../time/time-object';\n\nexport function DATE_TIME_FORMAT_FACTORY() {\n    return new DateTimeFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the datetime format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: DATE_TIME_FORMAT_FACTORY\n})\nexport abstract class DateTimeFormatParser {\n\n    /**\n     * Should take in a string value and return a FdDatetime model object.\n     * @param value String to concert to a FdDatetime model object.\n     */\n    abstract parse(value: string): FdDatetime;\n\n    /**\n     * Should take in a FdDatetime model object and return a string representation.\n     * @param date FdDatetime object to concert to a date string.\n     */\n    abstract format(date: FdDatetime): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class DateTimeFormatParserDefault extends DateTimeFormatParser {\n\n    /**\n     * Takes in a string representation of a date and returns a FdDatetime object.\n     * @param value String to convert to a FdDatetime model object.\n     */\n    public parse(value: string): FdDatetime {\n        if (!value) {\n            return FdDatetime.getToday();\n        } else {\n            let time: TimeObject;\n            let date: FdDate;\n            const dateStr = value.split(',')[0];\n            if (dateStr) {\n                const dateSplitStr = dateStr.split('.').map(Number);\n                date = new FdDate(dateSplitStr[2], dateSplitStr[1], dateSplitStr[0]);\n            }\n            const timeStr = value.split(',')[1];\n            if (timeStr) {\n                const timeSplitStr = timeStr.split(':').map(Number);\n                time = { hour: timeSplitStr[0], minute: timeSplitStr[1], second: timeSplitStr[2] };\n            }\n            if (date) {\n                return new FdDatetime(date, time);\n            }\n        }\n    }\n\n    /**\n     * Takes in a FdDatetime object and returns the string representation.\n     * @param date FdDatetime model object to convert to a string.\n     */\n    public format(date: FdDatetime): string {\n        return date.day + '.' +\n            date.month + '.' +\n            date.year + ', ' +\n            date.hour + ':' +\n            date.minute + ':' +\n            date.second\n        ;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeObject } from '../time/time-object';\nimport { TimeComponent } from '../time/time.component';\nimport { Placement } from 'popper.js';\nimport { DateTimeFormatParser } from './format/datetime-parser';\nimport { FdDate } from '../calendar/models/fd-date';\nimport { CalendarComponent, DaysOfWeek, FdCalendarView } from '../calendar/calendar.component';\nimport { FdDatetime } from './models/fd-datetime';\n\n/**\n * The datetime picker component is an opinionated composition of the fd-popover,\n * fd-calendar and fd-time components to accomplish the UI pattern for picking a date and time.\n * Supports Angular Forms.\n * ```html\n * <fd-date-time-picker [(ngModel)]=\"dateTime\"></fd-date-time-picker>\n * ```\n */\n@Component({\n    selector: 'fd-datetime-picker',\n    templateUrl: './datetime-picker.component.html',\n    styleUrls: ['./datetime-picker.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-datetime-host]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DatetimePickerComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DatetimePickerComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DatetimePickerComponent implements OnInit, OnDestroy, ControlValueAccessor, Validator {\n\n    /** @hidden Reference to the inner time component. */\n    @ViewChild(TimeComponent)\n    timeComponent: TimeComponent;\n\n    /** @hidden Reference to the inner calendar component. */\n    @ViewChild(CalendarComponent)\n    calendarComponent: CalendarComponent;\n\n    /**\n     * @hidden Date of the input field. Internal use.\n     * For programmatic selection, use two-way binding on the date input.\n     */\n    inputFieldDate: string = null;\n\n    /** @hidden The Time object which interacts with the inner Time component. Internal use. */\n    isInvalidDateInput: boolean = false;\n\n    /** @hidden The Time object which interacts with the inner Time component. Internal use. */\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @hidden The CalendarDay object which interacts with the inner Calendar component. Internal use. */\n    selectedDate: FdDate;\n\n    /** Subscription of the dateFromInput. */\n    private dateFromInputSubscription: Subscription;\n\n    /** Placeholder for the inner input element. */\n    @Input()\n    placeholder: string = 'mm/dd/yyyy, hh:mm:ss am';\n\n    /** Whether the component should be in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /**\n     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** Whether the time component should be meridian (am/pm). */\n    @Input()\n    meridian: boolean = true;\n\n    /** Whether the component is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Whether the time component shows spinners for changing the time. */\n    @Input()\n    spinners: boolean = true;\n\n    /** Whether the time component shows seconds. */\n    @Input()\n    displaySeconds: boolean = true;\n\n    /** Whether the time component shows minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /** Whether the time component shows hours. */\n    @Input()\n    displayHours: boolean = true;\n\n    /** Whether to perform visual validation on the picker input. */\n    @Input()\n    useValidation: boolean = true;\n\n    /** Current selected date. Two-way binding is supported. */\n    @Input()\n    date: FdDatetime = FdDatetime.getToday();\n\n    /** Whether the popover is open. Two-way binding is supported. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The disableFunction for the calendar. */\n    @Input()\n    startingDayOfWeek: DaysOfWeek = 1;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /** Aria label for the datetime picker input. */\n    @Input()\n    datetimeInputLabel: string = 'Datetime input';\n\n    /** Aria label for the button to show/hide the calendar. */\n    @Input()\n    displayDatetimeToggleLabel: string = 'Display calendar toggle';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** Event thrown every time calendar active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** Event emitted when the date changes. This can be a time or day change. */\n    @Output()\n    readonly dateChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when the day changes from the calendar. */\n    @Output()\n    readonly calendarChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when the time changes from the time component. */\n    @Output()\n    readonly timeChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when popover closes. */\n    @Output()\n    readonly onClose: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: any = (selected: any) => {\n    };\n\n    /** @hidden */\n    onTouched: any = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        };\n    }\n\n    /** Toggles the popover. */\n    togglePopover(): void {\n        this.onTouched();\n        if (this.isOpen) {\n            this.closePopover();\n        } else {\n            this.openPopover();\n        }\n    }\n\n    /**\n     * Method that handle calendar active view change and throws event.\n     */\n    public handleCalendarActiveViewChange(activeView: FdCalendarView): void {\n        this.activeViewChange.emit(activeView);\n    }\n\n    /** Opens the popover. */\n    openPopover(): void {\n        if (!this.isOpen && !this.disabled) {\n            this.onTouched();\n            this.isOpen = true;\n        }\n    }\n\n    /** Closes the popover and refresh model */\n    closePopover(): void {\n        if (this.isOpen) {\n            this.handleInputChange(this.inputFieldDate);\n            this.onClose.emit();\n            this.isOpen = false;\n        }\n    }\n\n    /** @hidden */\n    isInvalidDateInputHandler(e): void {\n        this.isInvalidDateInput = e;\n    }\n\n    /** @hidden */\n    @HostListener('document:keydown.escape', [])\n    onEscapeKeydownHandler(): void {\n        this.closePopover();\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    public onGlobalClick(event: MouseEvent): void {\n        if (!this.elRef.nativeElement.contains(event.target)) {\n            this.closePopover();\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.date && this.inputFieldDate !== null) {\n            this.selectedDate = this.date.date;\n            this.time = this.date.time;\n        }\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        if (this.dateFromInputSubscription) {\n            this.dateFromInputSubscription.unsubscribe();\n        }\n    }\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private changeDetRef: ChangeDetectorRef,\n                public dateTimeAdapter: DateTimeFormatParser\n    ) {\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (selected: any) => { void }): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected: FdDatetime): void {\n        if (!selected || !(selected instanceof FdDatetime)) {\n            return;\n        }\n        this.selectedDate = selected.date;\n        this.time = selected.time;\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        if (this.isModelValid()) {\n            this.calendarComponent.setCurrentlyDisplayed(this.date.date);\n            this.setInput(this.date);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected date changed.\n     * If invalid time model is detected, it takes time model data from TimeComponent.\n     */\n    handleDateChange(date: FdDate): void {\n        this.selectedDate = date;\n        if (!this.date.isTimeValid()) {\n            this.time = this.timeComponent.time;\n        }\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.setInput(this.date);\n        this.onChange(this.date);\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from time component, when there is selected time changed\n     */\n    handleTimeChange(time: TimeObject): void {\n        this.time = time;\n        if (!this.selectedDate || !this.selectedDate.isDateValid()) {\n            this.selectedDate = FdDate.getToday();\n        }\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.setInput(this.date);\n        this.onChange(this.date);\n    }\n\n    /** @hidden */\n    focusArrowLeft(): void {\n        if (this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow')) {\n            this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow').focus();\n        }\n    }\n\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to datetime, depending on type or\n     * validation the results are different. It also changes to state of isInvalidDateInput.\n     */\n    handleInputChange(date: string): void {\n        const fdTimeDate = this.dateTimeAdapter.parse(date);\n        this.selectedDate = fdTimeDate.date;\n        this.time = fdTimeDate.time;\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.onChange(fdTimeDate);\n        if (!this.isInvalidDateInput) {\n            this.calendarComponent.setCurrentlyDisplayed(fdTimeDate.date);\n        }\n        if (!date && this.allowNull) {\n            this.isInvalidDateInput = false;\n            this.date = FdDatetime.getToday();\n            this.selectedDate = this.date.date;\n            this.time = this.date.time;\n            this.calendarComponent.setCurrentlyDisplayed(this.date.date);\n            this.onChange(null);\n        } else if (!this.allowNull) {\n            this.isInvalidDateInput = true;\n        }\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        return this.date &&\n            this.date instanceof FdDatetime &&\n            this.date.isDateValid() && this.date.isTimeValid();\n    }\n\n    private setInput(fdDateTime: FdDatetime): void {\n        this.inputFieldDate = this.dateTimeAdapter.format(fdDateTime);\n        this.changeDetRef.detectChanges();\n    }\n\n}\n","import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[fdOnlyDigits], [fd-only-digits]'\n})\nexport class OnlyDigitsDirective {\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(e: KeyboardEvent) {\n        if (\n            // Allow: Delete, Backspace, Tab, Escape, Enter\n            [46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||\n            (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A\n            (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C\n            (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V\n            (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X\n            (e.keyCode === 65 && e.metaKey === true) || // Cmd+A (Mac)\n            (e.keyCode === 67 && e.metaKey === true) || // Cmd+C (Mac)\n            (e.keyCode === 86 && e.metaKey === true) || // Cmd+V (Mac)\n            (e.keyCode === 88 && e.metaKey === true) || // Cmd+X (Mac)\n            (e.keyCode >= 35 && e.keyCode <= 39) // Home, End, Left, Right\n        ) {\n            return;  // let it happen, don't do anything\n        }\n        // Ensure that it is a number and stop the keypress\n        if (\n            (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&\n            (e.keyCode < 96 || e.keyCode > 105)\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { TimeComponent } from './time.component';\nimport { OnlyDigitsDirective } from '../utils/directives/only-digits.directive';\n\n\n@NgModule({\n    declarations: [TimeComponent, OnlyDigitsDirective],\n    imports: [CommonModule, FormsModule],\n    exports: [TimeComponent, OnlyDigitsDirective]\n})\nexport class TimeModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CalendarModule } from '../calendar/calendar.module';\nimport { FormsModule } from '@angular/forms';\nimport { DatetimePickerComponent } from './datetime-picker.component';\nimport { TimeModule } from '../time/time.module';\n\n@NgModule({\n    declarations: [DatetimePickerComponent],\n    imports: [CommonModule, IconModule, PopoverModule, CalendarModule, FormsModule, TimeModule],\n    exports: [DatetimePickerComponent]\n})\nexport class DatetimePickerModule {}\n","import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * Tool to facilitate the input of files from the user.\n * It supports drag and drop, multiple input, max file size and more.\n * The drag events make it very easy to create and style elements like a dropzone.\n */\n@Component({\n    selector: 'fd-file-input',\n    templateUrl: './file-input.component.html',\n    styleUrls: ['./file-input.component.scss'],\n    host: {\n        '(blur)': 'onTouched()'\n    },\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => FileInputComponent),\n        multi: true,\n    }],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FileInputComponent implements ControlValueAccessor {\n\n    /** @hidden */\n    @HostBinding('class.fd-file-input')\n    fdFileInputClass: boolean = true;\n\n    /** @hidden */\n    @ViewChild('input')\n    inputRef: ElementRef;\n\n    /** Whether the file input is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the file input should accept multiple files. */\n    @Input()\n    multiple: boolean = true;\n\n    /** Accepted file extensions. Format: `'.png,.jpg'`. */\n    @Input()\n    accept: string;\n\n    /** Whether the file input accepts drag and dropped files. */\n    @Input()\n    dragndrop: boolean = true;\n\n    /** Max file size in bytes that the input will accept. */\n    @Input()\n    maxFileSize: number;\n\n    /** Event fired when files are selected. Passed object is the array of files selected. */\n    @Output()\n    readonly onSelect: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event fired when some invalid files are selected. Passed object is the array of invalid files. */\n    @Output()\n    readonly onInvalidFiles: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event fired when the dragged file enters the component boundaries. */\n    @Output()\n    readonly onDragEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event fired when the dragged file exits the component boundaries. */\n    @Output()\n    readonly onDragLeave: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: Function = () => {};\n\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(files: File[]): void {\n        // not needed - should be handled by user.\n    }\n\n    /** @hidden */\n    selectHandler(event: File[]) {\n        if (this.maxFileSize) {\n            const valid_files: File[] = [];\n            const invalid_files: File[] = [];\n            event.forEach(file => {\n                if (file.size < this.maxFileSize) {\n                    valid_files.push(file);\n                } else {\n                    invalid_files.push(file);\n                }\n            });\n            if (valid_files.length > 0) {\n                this.onChange(valid_files);\n                this.onSelect.emit(valid_files);\n            }\n            if (invalid_files.length > 0) {\n                this.onInvalidFiles.emit(invalid_files);\n            }\n        } else {\n            this.onChange(event);\n            this.onSelect.emit(event);\n        }\n    }\n\n    /**\n     * Opens the file selector.\n     */\n    public open(): void {\n        this.inputRef.nativeElement.click();\n    }\n\n    /**\n     * Clears the files from the input.\n     */\n    public clear(): void {\n        this.inputRef.nativeElement.value = '';\n        this.onChange([]);\n    }\n\n}\n","import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding } from '@angular/core';\n\n/**\n * Directive tool to facilitate interacting with a native file input element.\n */\n@Directive({\n    selector: '[fdFileSelect]',\n})\nexport class FileSelectDirective {\n\n    /** Whether the input should accept multiple file selections. */\n    @Input()\n    private multiple: boolean = true;\n\n    /** Event emitted when files are selected. */\n    @Output()\n    readonly onFileSelect: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** @hidden */\n    @HostBinding('attr.multiple')\n    get multipleBinding(): string {\n        return this.multiple ? '' : undefined;\n    }\n\n    /** @hidden */\n    @HostListener('change', ['$event'])\n    onChange(event: Event): void {\n        if (event.target instanceof HTMLInputElement) {\n            const elRef: HTMLInputElement = (<HTMLInputElement>event.target);\n            const files: FileList = elRef.files;\n            const fileArray: File[] = Array.from(files);\n            if (files.length) {\n                this.onFileSelect.emit(fileArray);\n            }\n        }\n    }\n}\n","import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n/**\n * Directive that handles the drag and drop feature of the file input.\n */\n@Directive({\n    selector: '[fdFileDragnDrop]'\n})\nexport class FileDragndropDirective {\n\n    /** Whether multiple files can be dropped at once. */\n    @Input()\n    multiple: boolean = true;\n\n    /** Accepted file extensions. Format: `'.png,.jpg'`. */\n    @Input()\n    accept: string;\n\n    /** Whether selecting of new files is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether drag and drop is enabled. Disables this directive. */\n    @Input()\n    dragndrop: boolean = true;\n\n    /** Event emitted when files are selected. Passes back an array of files. */\n    @Output()\n    readonly onFileChange: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event emitted when invalid files are selected. Passes back an array of files. */\n    @Output()\n    readonly onInvalidFiles: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event emitted when the dragged file enters the dropzone. */\n    @Output()\n    readonly onDragEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the dragged file exits the dropzone. */\n    @Output()\n    readonly onDragLeave: EventEmitter<void> = new EventEmitter<void>();\n\n    private elementStateCounter: number = 0;\n\n    /** @hidden */\n    @HostListener('dragover', ['$event'])\n    public onDragover(event) {\n        if (this.dragndrop) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('dragenter', [])\n    public onDragenter() {\n        ++this.elementStateCounter;\n        if (this.dragndrop && this.elementStateCounter === 1) {\n            this.onDragEnter.emit();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('dragleave', ['$event'])\n    public onDragleave(event) {\n        --this.elementStateCounter;\n        if (this.dragndrop && this.elementStateCounter === 0) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.onDragLeave.emit();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('drop', ['$event'])\n    public onDrop(event) {\n        this.elementStateCounter = 0;\n\n        if (!this.dragndrop || this.disabled) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        const rawFiles = event.dataTransfer.files;\n        const files: File[] = Array.from(rawFiles);\n\n        if (!this.multiple && files.length > 1) {\n            this.onInvalidFiles.emit(files);\n            return;\n        }\n\n        const valid_files: File[] = [];\n        const invalid_files: File[] = [];\n        if (files.length > 0) {\n            if (!this.accept) {\n                files.forEach((file: File) => {\n                    valid_files.push(file);\n                });\n            } else {\n                const allowed_extensions = this.accept.toLocaleLowerCase().replace(/[\\s.]/g, '').split(',');\n                files.forEach((file: File) => {\n                    const ext = file.name.split('.')[file.name.split('.').length - 1];\n                    if (allowed_extensions.lastIndexOf(ext) !== -1) {\n                        valid_files.push(file);\n                    } else {\n                        invalid_files.push(file);\n                    }\n                });\n            }\n            this.onFileChange.emit(valid_files);\n            if (invalid_files.length > 0) {\n                this.onInvalidFiles.emit(invalid_files);\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FileInputComponent } from './file-input.component';\nimport { FormsModule } from '@angular/forms';\nimport { FileSelectDirective } from './directives/file-select.directive';\nimport { FileDragndropDirective } from './directives/file-dragndrop.directive';\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    exports: [FileInputComponent, FileSelectDirective, FileDragndropDirective],\n    declarations: [FileInputComponent, FileSelectDirective, FileDragndropDirective]\n})\nexport class FileInputModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * Used for easily displaying forms with a margin. Not necessary for fundamental forms to be functional.\n *\n * ```html\n * <div fd-form-set>\n *     <div fd-form-item>\n *         ...\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-set]',\n    host: {\n        class: 'fd-form__set'\n    }\n})\nexport class FormSetDirective {}\n","import { Directive, Input, ElementRef } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Directive intended for use on form controls.\n *\n * ```html\n * <input type=\"text\" fd-form-control />\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-control]'\n})\nexport class FormControlDirective extends AbstractFdNgxClass {\n\n    /**\n     *  The state of the form control - applies css classes.\n     *  Can be `valid`, `error`, `warning` or blank for default.\n     */\n    @Input()\n    state: string;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-form__control');\n        if (this.state) {\n            this._addClassToElement('is-' + this.state);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, Input, HostBinding } from '@angular/core';\n\n/**\n * Directive to be applied to the parent of a form control.\n *\n * ```html\n * <div fd-form-item>\n *     <input fd-form-control type=\"text\" />\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-item]'\n})\nexport class FormItemDirective {\n\n    /** Whether the form item is a checkbox. */\n    @Input()\n    @HostBinding('class.fd-form__item--check')\n    isCheck: boolean = false;\n\n    /** Whether the form item is inline. */\n    @Input()\n    @HostBinding('class.fd-form__item--inline')\n    isInline: boolean = false;\n\n    /** @hidden */\n    @HostBinding('class.fd-form__item')\n    fdFormItemClass: boolean = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Label to be linked to a form control.\n *\n * ```html\n * <label fd-form-label for=\"input-id\">Label Text</label>\n * <input fd-form-control type=\"text\" id=\"input-id\" />\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-label]',\n})\nexport class FormLabelDirective {\n    /** @hidden */\n    @HostBinding('class.fd-form__label')\n    fdFormLabelClass: boolean = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies css to a legend html element.\n *\n * <legend fd-form-legend>Legend</legend>\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-legend]',\n})\nexport class FormLegendDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-form__legend')\n    fdFormLegendClass: boolean = true;\n}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * Form message. Intended to be displayed under a form control for validation purposes.\n */\n@Component({\n    selector: 'fd-form-message',\n    templateUrl: './form-message.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormMessageComponent {\n\n    /** Type of the message. Can be `text`, `help`, `error` and `warning`. */\n    @Input()\n    type: string = '';\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Represents a form group element.\n *\n * ```html\n * <fd-form-group>\n *     <div fd-form-item [isCheck]=\"true\">\n *         <input fd-form-control type=\"radio\" checked>\n *         <fd-form-label>Option One</fd-form-label>\n *     </div>\n * </fd-form-group>\n * ```\n */\n@Component({\n    selector: 'fd-form-group',\n    templateUrl: './form-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormGroupComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-form__group')\n    fdFormGroupClass: boolean = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormSetDirective } from './form-set/form-set.directive';\nimport { FormControlDirective } from './form-control/form-control.directive';\nimport { FormItemDirective } from './form-item/form-item.directive';\nimport { FormLabelDirective } from './form-label/form-label.directive';\nimport { FormLegendDirective } from './form-legend/form-legend.directive';\nimport { FormMessageComponent } from './form-message/form-message.component';\nimport { FormGroupComponent } from './form-group/form-group.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        FormSetDirective,\n        FormControlDirective,\n        FormItemDirective,\n        FormLabelDirective,\n        FormLegendDirective,\n        FormMessageComponent,\n        FormGroupComponent\n    ],\n    declarations: [\n        FormSetDirective,\n        FormControlDirective,\n        FormItemDirective,\n        FormLabelDirective,\n        FormLegendDirective,\n        FormMessageComponent,\n        FormGroupComponent\n    ]\n})\nexport class FormModule {}\n","import { Directive, ElementRef, Inject, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * The directive that represents an identifier. \n * Identifier is a way to visually present something using an icon or user initials.\n *\n * ```html\n * <span fd-identifier [size]=\"'l'\" [glyph]=\"'washing-machine'\"></span>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-identifier]',\n    host: {\n        role: 'presentation'\n    }\n})\nexport class IdentifierDirective extends AbstractFdNgxClass {\n    /** \n     * The size of the identifier. \n     * The predefined values for the size are *xxs*, *xs*, *s*, *m*, *l*, *xl* and *xxl*.\n     *  *size* can accept any other string, for example *xxxs*, which will be translated into class *fd-identifier--xxxs*.\n     */\n    @Input() size: string;\n\n    /** \n     * Whether to render a circle style for the identifier. \n     */\n    @Input() circle: boolean;\n\n    /** \n     * Whether to render a transparent style for the identifier. \n     */\n    @Input() transparent: boolean;\n\n    /** A number specifying the background color of the identifier. */\n    @Input() colorAccent: number;\n\n    /** The glyph name */\n    @Input() glyph: string;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.size) {\n            this._addClassToElement('fd-identifier--' + this.size);\n        }\n        if (this.circle) {\n            this._addClassToElement('fd-identifier--circle');\n        }\n        if (this.transparent) {\n            this._addClassToElement('fd-identifier--transparent');\n        }\n        if (this.colorAccent) {\n            this._addClassToElement('fd-has-background-color-accent-' + this.colorAccent);\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n    }\n\n    /** @hidden */\n    constructor(@Inject(ElementRef) elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IdentifierDirective } from './identifier.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [IdentifierDirective],\n    declarations: [IdentifierDirective]\n})\nexport class IdentifierModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents an image. \n *\n * ```html\n * <fd-image style=\"margin-right: 10px;\" [size]=\"'l'\" [circle]=\"true\" [photo]=\"'https://placeimg.com/400/400/nature'\"></fd-image>\n * ```\n */\n@Component({\n    selector: 'fd-image',\n    templateUrl: './image.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ImageComponent {\n    /** \n     * The size of the image. \n     * The predefined values for the size are *s*, *m*, and *l*.\n     */\n    @Input() size: string = 'm';\n\n    /** \n     * Whether to render a circle style for the image. \n     */\n    @Input() circle: boolean = false;\n\n    /** \n     * The image label. \n     */\n    @Input() label: string = 'Image label';\n\n    /** \n     * The image url. \n     */\n    @Input() photo: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ImageComponent } from './image.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ImageComponent],\n    declarations: [ImageComponent]\n})\nexport class ImageModule {}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { fromEvent, Observable, Subscription } from 'rxjs';\n\n/**\n * Tool directive used to achieve the infinite scroll mechanism.\n */\n@Directive({\n    selector: '[fdInfiniteScroll]'\n})\nexport class InfiniteScrollDirective implements OnInit, OnDestroy {\n\n    /** Scroll percentage at which the onScrollAction event is fired. */\n    @Input()\n    scrollPercent: number = 75;\n\n    /** Event emitted when the scrollPercent threshold is met. */\n    @Output()\n    onScrollAction = new EventEmitter<any>();\n\n    private scrollEvent: Observable<any>;\n    private subscription: Subscription;\n\n    /** @hidden */\n    constructor(private element: ElementRef) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.scrollEvent = fromEvent(this.element.nativeElement, 'scroll');\n\n        this.subscription = this.scrollEvent.subscribe((e: any) => {\n            if ((e.target.scrollTop + e.target.offsetHeight) / e.target.scrollHeight > this.scrollPercent / 100) {\n                this.onScrollAction.emit(null);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\n\n@NgModule({\n    declarations: [InfiniteScrollDirective],\n    exports: [InfiniteScrollDirective]\n})\nexport class InfiniteScrollModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { Placement } from 'popper.js';\n/**\n * The component that represents an inline-help. \n * Inline help is used to display help text in a popover, often inline with headers, body text and form labels.\n *\n * ```html\n * <fd-inline-help [placement]=\"'bottom-left'\">\n *      Lorem ipsum dolor sit amet, consectetur adipiscing.\n * </fd-inline-help>\n * ```\n */\n@Component({\n    selector: 'fd-inline-help',\n    templateUrl: './inline-help.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['inline-help.component.scss']\n})\nexport class InlineHelpComponent {\n\n    /** The placement of the inline help component. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     *   The default placement is *bottom start*\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** The trigger events that will open/close the inline help component.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['mouseenter', 'mouseleave'];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InlineHelpComponent } from './inline-help.component';\nimport { PopoverModule } from '../popover/public_api';\n\n@NgModule({\n    imports: [CommonModule, PopoverModule],\n    exports: [InlineHelpComponent],\n    declarations: [InlineHelpComponent]\n})\nexport class InlineHelpModule {}\n","import { Component, Input, Output, EventEmitter, forwardRef, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents an input group.\n * The input group includes form inputs with add-ons that allow the user to better understand the information being entered.\n *\n * ```html\n * <fd-input-group [placement]=\"'after'\" [addOnText]=\"'$'\" [placeholder]=\"'Amount'\">\n * </fd-input-group>\n * ```\n */\n@Component({\n    selector: 'fd-input-group',\n    templateUrl: './input-group.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupComponent implements ControlValueAccessor {\n    /** \n     * The placement of the add-on. \n     * Options include *before* and *after*\n     */\n    @Input()\n    placement: string;\n\n    /** Whether the input group is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the input group is inline. */\n    @Input()\n    inline: boolean;\n\n    /** Placeholder for the input group. */\n    @Input()\n    placeholder: string;\n\n    /** The text for the add-on. */\n    @Input()\n    addOnText: string;\n\n    /** The icon value for the add-on. */\n    @Input()\n    glyph: string;\n\n    /** Whether the icon add-on or the text add-on is a button. */\n    @Input()\n    button: boolean;\n\n    /** Whether the input group is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Event emitted when the add-on button is clicked. */\n    @Output()\n    addOnButtonClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    buttonClicked($event) {\n        this.addOnButtonClicked.emit($event);\n    }\n}\n","import { Component, forwardRef, Input, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents an integer value input.\n * The value is increased or decreased using the spinner add-on.\n *\n * ```html\n * <fd-input-group-number [disabled]=\"false\" [(ngModel)]=\"numberValue\"></fd-input-group-number>\n * ```\n */\n@Component({\n    selector: 'fd-input-group-number',\n    templateUrl: './input-group-number.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupNumberComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupNumberComponent implements ControlValueAccessor {\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder: string;\n\n    /** Aria label for the 'step up' button. */\n    @Input()\n    stepUpLabel: string = 'Step up';\n\n    /** Aria label for the 'step down' button. */\n    @Input()\n    stepDownLabel: string = 'Step down';\n\n    /** @hidden */\n    inputTextValue: number;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    stepUpClicked() {\n        this.inputTextValue++;\n        this.onChange(this.inputTextValue);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    stepDownClicked() {\n        this.inputTextValue--;\n        this.onChange(this.inputTextValue);\n        this.onTouched();\n    }\n}\n","import { Component, Input, forwardRef, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents a search input group.\n *\n * ```html\n * <fd-input-group-search [disabled]=\"false\" [(ngModel)]=\"searchTerm\"></fd-input-group-search>\n * ```\n */\n@Component({\n    selector: 'fd-input-group-search',\n    templateUrl: './input-group-search.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupSearchComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupSearchComponent implements ControlValueAccessor {\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder;\n\n    /** Aria label for the 'clear' button. */\n    @Input()\n    clearLabel: string = 'Clear';\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputGroupComponent } from './input-group.component';\nimport { InputGroupNumberComponent } from './input-group-number.component';\nimport { InputGroupSearchComponent } from './input-group-search.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n    declarations: [InputGroupSearchComponent, InputGroupNumberComponent, InputGroupComponent],\n    imports: [CommonModule, ButtonModule, IconModule, FormsModule],\n    exports: [InputGroupSearchComponent, InputGroupNumberComponent, InputGroupComponent]\n})\nexport class InputGroupModule {}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * The directive that represents a list.\n * It is used to display a list of items with simple information such as scopes, names, etc. \n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-list]',\n    host: {\n        class: 'fd-list-group'\n    }\n})\nexport class ListDirective {}\n","import { Component, Directive, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a list item.\n * The list item can contain plain text, links or actions.\n * \n * ```html\n * <ul fd-list>\n *    <li fd-list-item>\n *        List item 1\n *    </li>\n * </ul>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-list-item]',\n    host: {\n        'class': 'fd-list-group__item'\n    }\n})\nexport class ListItemDirective {}\n","import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet listCheckboxUniqueId: number = 0;\n\n/**\n * The component that represents a checkbox list.\n *\n * ```html\n * <fd-list>\n *    <li fd-list-item>\n *       <fd-list-checkbox>List item 1</fd-list-checkbox>\n *    </li>\n * </fd-list>\n * ```\n */\n@Component({\n    selector: 'fd-list-checkbox',\n    host: {\n        class: 'fd-form__item fd-form__item--check',\n        '[attr.id]': 'id'\n    },\n    templateUrl: './list-checkbox.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ListCheckboxComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ListCheckboxComponent implements ControlValueAccessor {\n\n    /** Whether the list item checkbox is checked. */\n    @Input()\n    checked: boolean = false;\n\n    /** Whether the list item checkbox is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Event fired when the state of the checkbox changes. Passes back the id and the value. */\n    @Output()\n    readonly onToggle: EventEmitter<{id: string, value: boolean}> = new EventEmitter<{id: string, value: boolean}>();\n\n    /** Event fired when the checkbox becomes active. */\n    @Output()\n    readonly onActivated: EventEmitter<string> = new EventEmitter<string>();\n\n    /** The id of the checkbox. */\n    @Input()\n    id: string = 'fd-list-checkbox-' + listCheckboxUniqueId++;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Set the value of the *isChecked* property. */\n    get isChecked() {\n        return this.checked;\n    }\n\n    /** Set the value of the *isChecked* property. */\n    set isChecked(value) {\n        this.checked = value;\n        this.onChange(value);\n        this.onTouched();\n        this.onToggle.emit({id: this.id, value: value});\n\n        if (this.checked) {\n            this.onActivated.emit(this.id);\n        }\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.checked = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n}\n","import { Directive } from '@angular/core';\n\n/**\n * List item level actions such as add, remove, delete, sort, etc.\n *\n * ```html\n * <fd-list>\n *    <li fd-list-item>List item 1\n *        <fd-list-action>\n *            <button fd-button [options]=\"'light'\" [glyph]=\"'edit'\"></button>\n *       </fd-list-action>\n *    </li>\n * </fd-list> \n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-list-action',\n    host: {\n        class: 'fd-list-group__action'\n    }\n})\nexport class ListActionDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ListDirective } from './list.directive';\nimport { ListItemDirective } from './list-item.directive';\nimport { ListCheckboxComponent } from './list-checkbox.component';\nimport { ListActionDirective } from './list-action.directive';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n    declarations: [ListDirective, ListItemDirective, ListActionDirective, ListCheckboxComponent],\n    imports: [CommonModule, ButtonModule, IconModule, FormsModule],\n    exports: [ListDirective, ListItemDirective, ListActionDirective, ListCheckboxComponent]\n})\nexport class ListModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a loading spinner. \n *\n * ```html\n * <fd-loading-spinner [loading]=\"true\"></fd-loading-spinner>\n * ```\n */\n@Component({\n    selector: 'fd-loading-spinner',\n    templateUrl: './loading-spinner.component.html',\n    styleUrls: ['./loading-spinner.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LoadingSpinnerComponent {\n    /** Whether to display the loading indicator animation. */\n    @Input()\n    loading: boolean = false;\n\n    /** Aria label for the 'loading' spinner. */\n    @Input()\n    loadingLabel: string = 'Loading';\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingSpinnerComponent } from './loading-spinner.component';\n\n@NgModule({\n    declarations: [LoadingSpinnerComponent],\n    exports: [LoadingSpinnerComponent],\n    imports: [CommonModule]\n})\nexport class LoadingSpinnerModule {}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger } from '@angular/animations';\n\nexport const modalFadeNgIf: AnimationTriggerMetadata = trigger(\n    'modal-fade',\n    [\n        transition(\n            ':enter', [\n                style({opacity: 0}),\n                animate('150ms ease-in-out', style({opacity: 1}))\n            ]\n        ),\n        transition(\n            ':leave', [\n                style({opacity: 1}),\n                animate('75ms ease-in-out', style({opacity: 0}))\n            ]\n        )\n    ]\n);\n","import { Observable, Subject } from 'rxjs';\n\n/**\n * Reference to a modal component generated via the ModalService.\n * It can be injected into the content component through the constructor.\n * For a template, it is declared as part of the implicit context, see examples.\n */\nexport class ModalRef {\n    private readonly _afterClosed = new Subject<any>();\n\n    /**\n     * Observable that is triggered when the modal is closed.\n     * On close a *result* is passed back. On dismiss, an *error* is returned instead.\n     */\n    public afterClosed: Observable<any> = this._afterClosed.asObservable();\n\n    /** Data passed from the calling component to the content.*/\n    public data: any;\n\n    /**\n     * Closes the modal and passes the argument to the afterClosed observable.\n     * @param result Value passed back to the observable as a result.\n     */\n    close(result?: any): void {\n        this._afterClosed.next(result);\n    }\n\n    /**\n     * Dismisses the modal and passes the argument to the afterClosed observable as an error.\n     * @param reason Value passed back to the observable as an error.\n     */\n    dismiss(reason?: any): void {\n        this._afterClosed.error(reason);\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    HostListener,\n    OnDestroy,\n    OnInit,\n    Optional,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { modalFadeNgIf } from './modal-utils/modal-animations';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\nimport focusTrap from 'focus-trap';\nimport { ModalRef } from './modal-utils/modal-ref';\n\n@Component({\n    selector: 'fd-modal',\n    styleUrls: ['modal.component.scss'],\n    templateUrl: './modal.component.html',\n    host: {\n        'role': 'dialog',\n        '[class.fd-modal]': 'true',\n        '[class.fd-modal-custom]': 'true',\n        '[attr.aria-labelledby]': 'ariaLabelledBy',\n        '[attr.aria-label]': 'ariaLabel',\n        '[attr.aria-describedby]': 'ariaDescribedBy',\n        '[attr.aria-modal]': 'true',\n        '[attr.id]': 'id',\n        'tabindex': '-1',\n        '[@modal-fade]': ''\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent extends AbstractFdNgxClass implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('vc', {read: ViewContainerRef})\n    containerRef: ViewContainerRef;\n\n    id: string;\n\n    escKeyCloseable: boolean = true;\n\n    focusTrapped: boolean = true;\n\n    ariaLabelledBy: string = null;\n\n    ariaLabel: string = null;\n\n    ariaDescribedBy: string = null;\n\n    childComponentType: TemplateRef<any> | Type<any>;\n\n    backdropClickCloseable: boolean = true;\n\n    hasBackdrop: boolean  = true;\n\n    modalPanelClass: string = '';\n\n    private componentRef: ComponentRef<any> | EmbeddedViewRef<any>;\n\n    private focusTrap: any;\n\n    constructor(private elRef: ElementRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private cdRef: ChangeDetectorRef,\n                @Optional() private modalRef: ModalRef) {\n        super(elRef);\n    }\n\n    ngOnInit(): void {\n        this._setProperties();\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusTrap) {\n            this.focusTrap.deactivate();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.childComponentType) {\n            if (this.childComponentType instanceof Type) {\n                this.loadFromComponent(this.childComponentType);\n            } else if (this.childComponentType instanceof TemplateRef) {\n                this.loadFromTemplate(this.childComponentType);\n            }\n        }\n        if (this.focusTrapped) {\n            try {\n                this.focusTrap = focusTrap(this.elRef.nativeElement, {\n                    clickOutsideDeactivates: this.backdropClickCloseable && this.hasBackdrop,\n                    escapeDeactivates: false,\n                    initialFocus: this.elRef.nativeElement\n                });\n                this.focusTrap.activate();\n            } catch (e) {\n                console.warn('Attempted to focus trap the modal, but no tabbable elements were found.');\n            }\n        }\n        this.cdRef.detectChanges();\n    }\n\n    @HostListener('keyup', ['$event'])\n    closeModalEsc(event: KeyboardEvent): void {\n        if (this.escKeyCloseable && event.key === 'Escape') {\n            this.modalRef.dismiss('escape');\n        }\n    }\n\n    private loadFromComponent(content: Type<any>): void {\n        this.containerRef.clear();\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(content);\n        this.componentRef = this.containerRef.createComponent(componentFactory);\n    }\n\n    private loadFromTemplate(content: TemplateRef<any>): void {\n        this.containerRef.clear();\n        const context = {\n            $implicit: this.modalRef\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(content, context);\n    }\n\n    _setProperties(): void {\n        if (this.modalPanelClass) {\n            this._addClassToElement(this.modalPanelClass);\n        }\n    }\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal header.\n *\n * ```html\n * <fd-modal-header>\n *     <h1 fd-modal-title>Title</h1>\n *     <button fd-modal-close-btn></button>\n * </fd-modal-header>\n * ```\n */\n@Component({\n    selector: 'fd-modal-header',\n    templateUrl: './modal-header.component.html',\n    styles: [':host {display: block;}']\n})\nexport class ModalHeaderComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__header')\n    modalHeader = true;\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal body.\n *\n * ```html\n * <fd-modal-body>\n *     <div>Modal body content</div>\n * </fd-modal-body>\n * ```\n */\n@Component({\n    selector: 'fd-modal-body',\n    templateUrl: './modal-body.component.html',\n    styles: [`\n        :host {\n            display: block;\n            overflow: auto;\n            flex-grow: 1;\n        }\n    `]\n})\nexport class ModalBodyComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__body')\n    modalBody = true;\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal footer.\n *\n * ```html\n * <fd-modal-footer>\n *     <button>Do action</button>\n * </fd-modal-footer>\n * ```\n */\n@Component({\n    selector: 'fd-modal-footer',\n    templateUrl: './modal-footer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            border-top: 1px solid #eeeeef;\n        }\n    `]\n})\nexport class ModalFooterComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__footer')\n    modalFooter = true;\n}\n","import { Component, ElementRef, HostBinding, HostListener, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\nimport { modalFadeNgIf } from './modal-animations';\nimport { ModalRef } from './modal-ref';\n\n@Component({\n    selector: 'fd-modal-overlay',\n    template: ``,\n    host: {\n        'tabindex': '-1',\n        '[@modal-fade]': ''\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalBackdrop extends AbstractFdNgxClass implements OnInit {\n\n    backdropClass: string = '';\n    backdropClickCloseable: boolean = true;\n\n    @HostBinding('class.fd-overlay') overlayMain = true;\n    @HostBinding('class.fd-overlay--modal') overlayModal = true;\n\n    constructor(private elRef: ElementRef,\n                private modalRef: ModalRef) {\n        super(elRef);\n    }\n\n    ngOnInit(): void {\n        this._setProperties();\n    }\n\n    _setProperties(): void {\n        if (this.backdropClass) {\n            this._addClassToElement(this.backdropClass);\n        }\n    }\n\n    @HostListener('click')\n    closeModal(): void {\n        if (this.backdropClickCloseable) {\n            this.modalRef.dismiss('backdrop');\n        }\n    }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { modalFadeNgIf } from './modal-animations';\n\n@Component({\n    selector: 'fd-modal-container',\n    template: ``,\n    styles: [`\n        .fd-modal-container {\n            position: fixed;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n        }\n    `],\n    host: {\n        '[@modal-fade]': '',\n        '[class.fd-modal-container]': 'true'\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalContainer {}\n","/**\n * Configuration for opening a modal with the ModalService.\n */\nimport { ModalPosition } from './modal-position';\nimport { DynamicComponentConfig } from '../../utils/dynamic-component/dynamic-component-config';\n\nexport class ModalConfig implements DynamicComponentConfig {\n\n    /** Id for the modal component. If omitted, a unique one is generated. */\n    id?: string;\n\n    /** Width of the modal. */\n    width?: string;\n\n    /** Height of the modal. */\n    height?: string;\n\n    /** Minimum width of the modal. */\n    minWidth?: string;\n\n    /** Minimum height of the modal. */\n    minHeight?: string;\n\n    /** Maximum width of the modal. */\n    maxWidth?: string;\n\n    /** Maximum height of the modal. */\n    maxHeight?: string;\n\n    /** Position of the modal. */\n    position?: ModalPosition;\n\n    /** Aria label for the modal component element. */\n    ariaLabel?: string = null;\n\n    /** Id of the element that labels the modal. */\n    ariaLabelledBy?: string = null;\n\n    /** Id of the element that describes the modal. */\n    ariaDescribedBy?: string = null;\n\n    /** Whether the modal should have a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** Global classes to apply to the backdrop. */\n    backdropClass?: string = '';\n\n    /** Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true. */\n    backdropClickCloseable?: boolean = true;\n\n    /** Global classes to apply to the modal panel. */\n    modalPanelClass?: string = '';\n\n    /** Whether the escape key should close the modal. */\n    escKeyCloseable?: boolean = true;\n\n    /** Whether the modal should be focus trapped. */\n    focusTrapped?: boolean = true;\n\n    /** The container that the modal is appended to. By default, it is appended to the body. */\n    container?: HTMLElement | 'body' = 'body';\n\n    /** Data to pass along to the content through the ModalRef. */\n    data?: any;\n}\n","import {\n    Injectable,\n    ComponentRef,\n    Type,\n    TemplateRef, Inject\n} from '@angular/core';\nimport { ModalComponent } from '../modal.component';\nimport { ModalBackdrop } from '../modal-utils/modal-backdrop';\nimport { ModalContainer } from '../modal-utils/modal-container';\nimport { ModalConfig } from '../modal-utils/modal-config';\nimport { ModalPosition } from '../modal-utils/modal-position';\nimport { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';\nimport { ModalRef } from '../modal-utils/modal-ref';\n\n/**\n * Service used to dynamically generate a modal.\n */\n@Injectable()\nexport class ModalService {\n    private modals: {\n        modalRef: ComponentRef<ModalComponent>,\n        backdropRef?: ComponentRef<ModalBackdrop>,\n        containerRef?: ComponentRef<ModalContainer>\n    }[] = [];\n\n    /** @hidden */\n    constructor(\n        @Inject(DynamicComponentService) private dynamicComponentService: DynamicComponentService\n    ) {}\n\n    /**\n     * Status of the modal service.\n     * Returns true if there are open modals, false otherwise.\n     */\n    public hasOpenModals(): boolean {\n        return this.modals && this.modals.length > 0;\n    }\n\n    /**\n     * Dismisses all currently open modals.\n     */\n    public dismissAll(): void {\n        this.modals.forEach(item => {\n            this.destroyModalComponent(item.modalRef);\n        });\n    }\n\n    /**\n     * Opens a modal component with a content of type TemplateRef or a component type.\n     * @param contentType Content of the modal component.\n     * @param modalConfig Configuration of the modal component.\n     */\n    public open(contentType: Type<any> | TemplateRef<any>, modalConfig: ModalConfig = new ModalConfig()): ModalRef {\n\n        // Get default values from model\n        modalConfig = Object.assign(new ModalConfig(), modalConfig);\n\n        // Instantiate modal ref service\n        const service: ModalRef = new ModalRef();\n        service.data = modalConfig.data;\n\n        // Create Container\n        const container: ComponentRef<ModalContainer> = this.dynamicComponentService.createDynamicComponent\n            < ModalContainer > (contentType, ModalContainer, modalConfig)\n        ;\n\n        // Define Container to put backdrop and component to container\n        modalConfig.container = container.location.nativeElement;\n\n        // Create Backdrop\n        let backdrop: ComponentRef<ModalBackdrop>;\n        if (modalConfig.hasBackdrop) {\n            backdrop = this.dynamicComponentService.createDynamicComponent<ModalBackdrop>\n                (contentType, ModalBackdrop, modalConfig, [service])\n            ;\n        }\n\n        // Create Component\n        const component = this.dynamicComponentService.createDynamicComponent\n            < ModalComponent > (contentType, ModalComponent, modalConfig, [service])\n        ;\n\n        // Sizing\n        this.setModalSize(component, modalConfig);\n\n        // Positioning\n        this.setModalPosition(component, modalConfig.position);\n\n        this.modals.push({\n            modalRef: component,\n            containerRef: container,\n            backdropRef: backdrop\n        });\n\n        const defaultBehaviourOnClose = () => {\n            this.destroyModalComponent(component);\n            refSub.unsubscribe();\n        };\n\n        const refSub = service.afterClosed\n            .subscribe(defaultBehaviourOnClose, defaultBehaviourOnClose)\n        ;\n\n        return service;\n    }\n\n    private destroyModalComponent(modal: ComponentRef<ModalComponent>): void {\n\n        const arrayRef = this.modals.find((item) => item.modalRef === modal);\n        const indexOf = this.modals.indexOf(arrayRef);\n        this.dynamicComponentService.destroyComponent(arrayRef.modalRef);\n        this.dynamicComponentService.destroyComponent(arrayRef.containerRef);\n        arrayRef.containerRef.destroy();\n        arrayRef.modalRef.destroy();\n\n        if (arrayRef.backdropRef) {\n            this.dynamicComponentService.destroyComponent(arrayRef.backdropRef);\n            arrayRef.backdropRef.destroy();\n        }\n\n        this.modals[indexOf] = null;\n        this.modals = this.modals.filter(item => item !== null && item !== undefined);\n\n    }\n\n    private setModalSize(componentRef: ComponentRef<ModalComponent>, configObj: ModalConfig): void {\n        componentRef.location.nativeElement.style.minWidth = configObj.minWidth;\n        componentRef.location.nativeElement.style.minHeight = configObj.minHeight;\n        componentRef.location.nativeElement.style.maxWidth = configObj.maxWidth;\n        componentRef.location.nativeElement.style.maxHeight = configObj.maxHeight;\n        componentRef.location.nativeElement.style.width = configObj.width;\n        componentRef.location.nativeElement.style.height = configObj.height;\n    }\n\n    private setModalPosition(componentRef: ComponentRef<ModalComponent>, position: ModalPosition): void {\n        if (position) {\n            componentRef.location.nativeElement.style.top = position.top;\n            componentRef.location.nativeElement.style.bottom = position.bottom;\n            componentRef.location.nativeElement.style.right = position.right;\n            componentRef.location.nativeElement.style.left = position.left;\n        }\n    }\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Directive that applies fundamental modal styling to a header.\n *\n * ```html\n * <h1 fd-modal-title>Modal Title</h1>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-modal-title]'\n})\nexport class ModalTitleDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__title')\n    modalTitle = true;\n}\n\n/**\n * Directive that applies fundamental modal styling to a button.\n *\n * ```html\n * <button fd-modal-close-btn></button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-modal-close-btn]'\n})\nexport class ModalCloseButtonDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-button--light')\n    lightButton = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__close')\n    modalClose = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\nimport { ModalComponent } from './modal.component';\nimport { ModalHeaderComponent } from './modal-header/modal-header.component';\nimport { ModalBodyComponent } from './modal-body/modal-body.component';\nimport { ModalFooterComponent } from './modal-footer/modal-footer.component';\n\nimport { ModalService } from './modal-service/modal.service';\nimport { ModalBackdrop } from './modal-utils/modal-backdrop';\nimport { ModalContainer } from './modal-utils/modal-container';\nimport { ModalCloseButtonDirective, ModalTitleDirective } from './modal-utils/modal-directives';\nimport { DynamicComponentService } from '../utils/dynamic-component/dynamic-component.service';\n\n@NgModule({\n    declarations: [\n        ModalComponent,\n        ModalHeaderComponent,\n        ModalBodyComponent,\n        ModalFooterComponent,\n        ModalBackdrop,\n        ModalContainer,\n        ModalCloseButtonDirective,\n        ModalTitleDirective\n    ],\n    imports: [\n        CommonModule,\n        ButtonModule,\n        IconModule\n    ],\n    exports: [\n        ModalHeaderComponent,\n        ModalBodyComponent,\n        ModalFooterComponent,\n        ModalBackdrop,\n        ModalContainer,\n        ModalCloseButtonDirective,\n        ModalTitleDirective\n    ],\n    entryComponents: [\n        ModalComponent,\n        ModalBackdrop,\n        ModalContainer\n    ],\n    providers: [ModalService, DynamicComponentService]\n})\nexport class ModalModule {}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PopoverComponent } from '../popover/popover.component';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Input field with multiple selection enabled. Should be used when a user can select between a\n * limited number of pre-defined options with a filter-enabled context.\n *\n * Supports Angular Forms.\n */\n@Component({\n    selector: 'fd-multi-input',\n    templateUrl: './multi-input.component.html',\n    styleUrls: ['./multi-input.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-multi-input-custom]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MultiInputComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultiInputComponent implements OnInit, ControlValueAccessor, OnChanges {\n\n    /** @hidden */\n    @ViewChild(PopoverComponent)\n    popoverRef: PopoverComponent;\n\n    /** @hidden */\n    @HostBinding('class.fd-multi-input')\n    multiInputClass = true;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder: string = '';\n\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the input is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '300px';\n\n    /** Icon of the button on the right of the input field. */\n    @Input()\n    glyph: string = 'navigation-down-arrow';\n\n    /** Values to be displayed in the unfiltered dropdown. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Search term, or more specifically the value of the inner input field. */\n    @Input()\n    searchTerm: string;\n\n    /** Whether the search term should be highlighted in results. */\n    @Input()\n    highlight: boolean = true;\n\n    /** Selected dropdown items. */\n    @Input()\n    selected: any[] = [];\n\n    /** Filter function. Accepts an array and a string as arguments, and outputs an array.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See multi input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See multi input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Aria label for the multi input body. */\n    @Input()\n    multiInputBodyLabel: string = 'Multi input body';\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** Event emitted when the search term changes. Use *$event* to access the new term. */\n    @Output()\n    readonly searchTermChange: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Event emitted when the selected items change. Use *$event* to access the new selected array. */\n    @Output()\n    readonly selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen = false;\n\n    /** @hidden */\n    onChange: Function = () => { };\n\n    /** @hidden */\n    onTouched: Function = () => { };\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) { }\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.searchTerm) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);\n            } else {\n                this.displayedValues = this.dropdownValues;\n            }\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(selected: any[]): void {\n        if (selected) {\n            this.selected = selected;\n        }\n    }\n\n    /** @hidden */\n    handleSelect(checked: any, value: any): void {\n        const previousLength = this.selected.length;\n        if (checked) {\n            this.selected.push(value);\n        } else {\n            this.selected.splice(this.selected.indexOf(value), 1);\n        }\n\n        // Handle popover placement update\n        if ((previousLength === 0 && this.selected.length === 1) ||\n            (previousLength === 1 && this.selected.length === 0)) {\n            this.popoverRef.updatePopover();\n        }\n\n        this.onChange(this.selected);\n        this.selectedChange.emit(this.selected);\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.searchTermChange.emit(this.searchTerm);\n        this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);\n        this.popoverRef.updatePopover();\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n    private defaultDisplay(str: string): string {\n        return str;\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    clickHandler(event) {\n        event.stopPropagation();\n        if (!this.elRef.nativeElement.contains(event.target)) {\n            this.isOpen = false;\n        }\n    }\n\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Output, ViewChild, ViewEncapsulation, Input } from '@angular/core';\n\n/**\n * A token is used to represent contextualizing information.\n * They can be useful to show applied filters, selected values for form fields or object metadata.\n */\n@Component({\n    selector: 'fd-token',\n    templateUrl: './token.component.html',\n    styleUrls: ['./token.component.scss'],\n    host: {\n        class: 'fd-token',\n        '[class.fd-token__disabled]': 'disabled',\n        'role': 'button'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class TokenComponent {\n\n    /** @hidden */\n    @ViewChild('contentContainer')\n    contentContainer: ElementRef;\n\n    /** Whether the token is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the *x* icon is clicked. Specifically, any pseudo-element. */\n    @Output()\n    readonly onCloseClick: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {\n    }\n\n    /** @hidden */\n    @HostListener('click', ['$event'])\n    clickHandler(event): void {\n        if (this.contentContainer && !this.disabled) {\n            if (this.elRef.nativeElement.contains(event.target) && !this.contentContainer.nativeElement.contains(event.target)) {\n                this.onCloseClick.emit();\n            }\n        }\n    }\n\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TokenComponent } from './token.component';\n\n@NgModule({\n    declarations: [TokenComponent],\n    imports: [CommonModule],\n    exports: [TokenComponent]\n})\nexport class TokenModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MultiInputComponent } from './multi-input.component';\nimport { TokenModule } from '../token/token.module';\nimport { FormsModule } from '@angular/forms';\nimport { MenuModule } from '../menu/menu.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { PipeModule } from '../utils/pipes/pipe.module';\n\n@NgModule({\n    declarations: [MultiInputComponent],\n    imports: [\n        CommonModule,\n        TokenModule,\n        FormsModule,\n        MenuModule,\n        PopoverModule,\n        PipeModule\n    ],\n    exports: [MultiInputComponent]\n})\nexport class MultiInputModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Pagination } from './pagination.model';\n\nconst DISPLAY_NUM_PAGES = 3;\n\n/**\n * Service that is used to retrieve all the pages,\n * the number of pages,\n * and to validate the pagination object.\n */\n@Injectable()\nexport class PaginationService {\n    /** Constant representing the default number of items per page. */\n    public DEFAULT_ITEMS_PER_PAGE = 10;\n    \n    /** @hidden */\n    public MORE = -1;\n\n    /** @hidden */\n    constructor() {}\n\n    /**\n     * Returns a number array representing the pages of the pagination object.\n     * @param pagination An object of type *Pagination*.\n     */\n    public getPages(pagination: Pagination): number[] {\n        const pages = [];\n        this.validate(pagination);\n        const totalPages = this.getTotalPages(pagination);\n\n        if (totalPages <= DISPLAY_NUM_PAGES) {\n            for (let i = 1; i <= totalPages; i++) {\n                pages.push(i);\n            }\n        } else {\n            if (pagination.currentPage <= DISPLAY_NUM_PAGES) {\n                for (let i = 1; i <= DISPLAY_NUM_PAGES; i++) {\n                    pages.push(i);\n                }\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                pages.push(totalPages);\n            } else if (pagination.currentPage > totalPages - (DISPLAY_NUM_PAGES - 1)) {\n                pages.push(1);\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                for (let i = totalPages - (DISPLAY_NUM_PAGES - 1); i <= totalPages; i++) {\n                    pages.push(i);\n                }\n            } else {\n                pages.push(1);\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                const buffer = Math.floor(DISPLAY_NUM_PAGES / 2);\n                for (let i = pagination.currentPage - buffer; i <= pagination.currentPage + buffer; i++) {\n                    pages.push(i);\n                }\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                pages.push(totalPages);\n            }\n        }\n        return pages;\n    }\n\n    /**\n     * Retrieves the total number of pages.\n     * @param pagination An object of type *Pagination*.\n     */\n    public getTotalPages(pagination: Pagination): number {\n        if (pagination.itemsPerPage <= 0) {\n            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;\n        }\n        return Math.ceil(pagination.totalItems / pagination.itemsPerPage);\n    }\n\n    /**\n     * Provides validation for the pagination object.\n     * @param pagination An object of type *Pagination*.\n     */\n    public validate(pagination: Pagination) {\n        if (!pagination.totalItems && isDevMode()) {\n            console.warn(`No pages provided in the Pagination object. This warning only appears in development mode.`);\n        }\n        if (!pagination.itemsPerPage) {\n            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;\n        } else if (pagination.itemsPerPage < 0 && isDevMode()) {\n            console.warn(`itemsPerPage must be greater than zero. This warning only appears in development mode.`);\n        }\n        if (!pagination.currentPage) {\n            pagination.currentPage = 1;\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { PaginationService } from './pagination.service';\n\n/**\n * The component that is used to provide navigation between paged information.\n * ```html\n * <fd-pagination \n *          [totalItems]=\"50\" \n *          [itemsPerPage]=\"10\" \n *          [currentPage]=\"3\">\n * </fd-pagination>\n * ```\n */\n@Component({\n    selector: 'fd-pagination',\n    templateUrl: './pagination.component.html',\n    providers: [PaginationService],\n    host: {\n        class: 'fd-pagination'\n    },\n    styles: [`\n        .fd-pagination a {\n            cursor: pointer;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PaginationComponent implements OnChanges {\n    /** Represents the total number of items. */\n    @Input()\n    totalItems: number;\n    \n    /** Represents the current page number. */\n    @Input()\n    currentPage: number;\n    \n    /** Represents the number of items per page. */\n    @Input()\n    itemsPerPage: number;\n\n    /** Whether to display the total number of items. */\n    @Input()\n    displayTotalItems: boolean = true;\n    \n    /** \n     * The text appended to the total number of items. \n     * The default text is set to 'items' \n     */\n    @Input()\n    displayText: string = 'items';\n\n    /** Label for the 'previous' page button. */\n    @Input()\n    previousLabel: string = 'Previous';\n\n    /** Label for the 'next' page button. */\n    @Input()\n    nextLabel: string = 'Next';\n\n    /** Event fired when the page is changed. */\n    @Output()\n    pageChangeStart = new EventEmitter<number>();\n\n    /** @hidden */\n    pages: number[];\n\n    /** @hidden */\n    constructor(private paginationService: PaginationService) {}\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes && changes.currentPage) {\n            this.currentPage = changes.currentPage.currentValue;\n        }\n        this.pages = this.paginationService.getPages(this.getPaginationObject());\n        const totalPages = this.paginationService.getTotalPages(this.getPaginationObject());\n        if (!this.currentPage || this.currentPage < 1) {\n            this.currentPage = 1;\n        } else if (this.currentPage > totalPages) {\n            this.currentPage = totalPages;\n        }\n    }\n\n    /**\n     * Checks if the current page is the last page.\n     */\n    isLastPage(): boolean {\n        return this.currentPage === this.paginationService.getTotalPages(this.getPaginationObject());\n    }\n\n    /**\n     * Navigates to a specific page when the user presses 'Space' or 'Enter' key.\n     * @param page The number of the page.\n     * @param $event The keyboard event.\n     */\n    onKeypressHandler(page: number, $event: KeyboardEvent) {\n        if ($event.code === 'Space' || $event.code === 'Enter') {\n            $event.preventDefault();\n            this.goToPage(page);\n        }\n    }\n\n    /**\n     * Navigates to a specific page.\n     * @param page The number of the page to navigate to.\n     * @param $event The mouse event (optional).\n     */\n    goToPage(page: number, $event?: MouseEvent) {\n        if ($event) {\n            $event.preventDefault();\n        }\n        if (page > this.paginationService.getTotalPages(this.getPaginationObject()) || page < 1) {\n            return;\n        }\n        this.pages = this.paginationService.getPages(this.getPaginationObject());\n        this.pageChangeStart.emit(page);\n    }\n\n    /**\n     * Retrieves an object that represents \n     * the total number of items, the current page, and the number of items per page.\n     */\n    getPaginationObject() {\n        const retVal = {\n            totalItems: this.totalItems,\n            currentPage: this.currentPage,\n            itemsPerPage: this.itemsPerPage\n        };\n        return retVal;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PaginationComponent } from './pagination.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { PaginationService } from './pagination.service';\n\n@NgModule({\n    declarations: [PaginationComponent],\n    imports: [CommonModule, ButtonModule, IconModule],\n    providers: [PaginationService],\n    exports: [PaginationComponent]\n})\nexport class PaginationModule {}\n","import { Component, ElementRef, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Panels are used to encapsulate part of the content, form elements, lists, collections, etc., on a page.\n */\n@Component({\n    selector: 'fd-panel',\n    templateUrl: './panel.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelComponent extends AbstractFdNgxClass {\n\n    /** @Input Column span for the panel in the grid system */\n    @Input()\n    columnSpan: number;\n\n    /** @Input Background image of the panel. */\n    @Input()\n    backgroundImage: string;\n\n    /** @hidden */\n    @HostBinding('class.fd-panel')\n    fdPanelClass: boolean = true;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.columnSpan) {\n            this._addClassToElement('fd-has-grid-column-span-' + this.columnSpan);\n        }\n        if (this.backgroundImage) {\n            this._addStyleToElement('background-image', 'url(\"' + this.backgroundImage + '\")');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Header of the panel. Contains a head and actions.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-title>Title!</fd-panel-title>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-header',\n    templateUrl: './panel-header.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelHeaderComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__header')\n    fdPanelHeaderClass = true;\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Container for title and description.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-title>Title!</fd-panel-title>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-head',\n    templateUrl: './panel-head.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelHeadComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__head')\n    fdPanelHeadClass = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the panel title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-panel-title>Panel Title</h1>\n * <h3 fd-panel-title>Panel Title</h3>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-panel-title]',\n})\nexport class PanelTitleDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__title')\n    fdPanelTitleClass: boolean = true;\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Description of the panel title.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-description>This is a description for a panel title!</fd-panel-description>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-description',\n    templateUrl: './panel-description.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelDescriptionComponent {}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel level actions such as add, remove, delete, sort, etc.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-actions>\n *             <button fd-button (click)=\"action()\">Action</button>\n *         </fd-panel-actions>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-actions',\n    templateUrl: './panel-actions.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelActionsComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__actions')\n    fdPanelActionsClass: boolean = true;\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel level filters that is specific to the data being displayed within the panel.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-filters>\n *         Some text can go here!\n *     </fd-panel-filters>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-filters',\n    templateUrl: './panel-filters.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelFiltersComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__filters')\n    fdPanelFiltersClass: boolean = true;\n}\n","import { Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * Main content of the panel can that hold lists, table, tree, text, form or any other information.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-body>\n *         Some text can go here!\n *     </fd-panel-body>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-body',\n    templateUrl: './panel-body.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelBodyComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__body')\n    fdPanelBodyClass: boolean = true;\n\n    /** Whether the edges of the panel should have bleeding padding. */\n    @Input()\n    @HostBinding('class.fd-panel__body--bleed')\n    bleed: boolean = false;\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel footer can be utilized for pagination, secondary actions, add more data, etc.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-footer>\n *         Some text can go here!\n *     </fd-panel-footer>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-footer',\n    templateUrl: './panel-footer.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelFooterComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__footer')\n    fdPanelFooterClass: boolean = true;\n}\n","import { Component, ElementRef, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Use a panel grid to arrange panels evenly in a grid layout.\n */\n@Component({\n    selector: 'fd-panel-grid',\n    templateUrl: './panel-grid.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelGridComponent extends AbstractFdNgxClass {\n\n    /** Number of columns for the grid. */\n    @Input() col: number;\n\n    /** Whether the grid should have a gap. */\n    @Input() nogap: boolean = false;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-panel-grid');\n\n        if (this.nogap) {\n            this._addClassToElement('fd-panel-grid--nogap');\n        }\n\n        if (this.col) {\n            this._addClassToElement('fd-panel-grid--' + this.col + 'col');\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PanelComponent } from './panel.component';\nimport { PanelHeaderComponent } from './panel-header/panel-header.component';\nimport { PanelHeadComponent } from './panel-head/panel-head.component';\nimport { PanelTitleDirective } from './panel-title/panel-title.directive';\nimport { PanelDescriptionComponent } from './panel-description/panel-description.component';\nimport { PanelActionsComponent } from './panel-actions/panel-actions.component';\nimport { PanelFiltersComponent } from './panel-filters/panel-filters.component';\nimport { PanelBodyComponent } from './panel-body/panel-body.component';\nimport { PanelFooterComponent } from './panel-footer/panel-footer.component';\nimport { PanelGridComponent } from './panel-grid/panel-grid.component';\n@NgModule({\n    declarations: [\n        PanelComponent,\n        PanelHeaderComponent,\n        PanelHeadComponent,\n        PanelTitleDirective,\n        PanelDescriptionComponent,\n        PanelActionsComponent,\n        PanelFiltersComponent,\n        PanelBodyComponent,\n        PanelFooterComponent,\n        PanelGridComponent\n    ],\n    imports: [CommonModule],\n    exports: [\n        PanelComponent,\n        PanelHeaderComponent,\n        PanelHeadComponent,\n        PanelTitleDirective,\n        PanelDescriptionComponent,\n        PanelActionsComponent,\n        PanelFiltersComponent,\n        PanelBodyComponent,\n        PanelFooterComponent,\n        PanelGridComponent\n    ]\n})\nexport class PanelModule {}\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n/**\n * A directive designed to help navigation elements determine the element currently in view of the user. \n */\n@Directive({\n    selector: '[fdScrollSpy]'\n})\nexport class ScrollSpyDirective {\n    /**\n     * An array of tags to track.\n     */\n    @Input()\n    public trackedTags: string[] = [];\n\n    /**\n     * Whether events are still fired if there is no tag present on the user's screen.\n     */\n    @Input()\n    public fireEmpty: boolean = false;\n\n    /** \n     * A number that represent at what location in the container the event is fired. \n     * 0.5 would fire the events in the middle of the container, \n     * 0 for the top and 1 for the bottom.\n     */\n    @Input()\n    public targetPercent: number = 0;\n\n    /** \n     * Event fired on the scroll element when a new item becomes activated by the scrollspy . \n     * The returned value is the HTMLElement itself.\n     */\n    @Output()\n    public readonly spyChange: EventEmitter<HTMLElement> = new EventEmitter<HTMLElement>();\n\n    /** @hidden */\n    private currentActive: HTMLElement;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {}\n\n    /** @hidden */\n    @HostListener('scroll', ['$event'])\n    onScroll(event: any) {\n        let spiedTag: HTMLElement;\n        const children = this.elRef.nativeElement.children;\n        const targetScrollTop = event.target.scrollTop;\n        const targetOffsetTop = event.target.offsetTop;\n\n        for (let i = 0; i < children.length; i++) {\n            const element: HTMLElement = children[i];\n            if (this.trackedTags.some(tag => tag.toLocaleUpperCase() === element.tagName.toLocaleUpperCase())) {\n                if ((element.offsetTop - targetOffsetTop) <= targetScrollTop + event.target.offsetHeight * this.targetPercent) {\n                    spiedTag = element;\n                }\n            }\n        }\n\n        if ((spiedTag || this.fireEmpty) && spiedTag !== this.currentActive) {\n            this.currentActive = spiedTag;\n            this.spyChange.emit(this.currentActive);\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { ScrollSpyDirective } from './scroll-spy.directive';\n\n@NgModule({\n    declarations: [ScrollSpyDirective],\n    exports: [ScrollSpyDirective]\n})\nexport class ScrollSpyModule {}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input, isDevMode,\n    OnChanges,\n    OnInit,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MenuItemDirective } from '../menu/menu-item.directive';\n\n/**\n * Allows users to filter through results and select.\n * Can also be customized to execute a search function.\n *\n * Supports Angular Forms.\n */\n@Component({\n    selector: 'fd-search-input',\n    templateUrl: './search-input.component.html',\n    styleUrls: ['./search-input.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SearchInputComponent),\n            multi: true\n        }\n    ],\n    host: {\n        class: 'fd-search-input-custom'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class SearchInputComponent implements ControlValueAccessor, OnInit, OnChanges {\n\n    /** Values to be filtered in the search input. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Filter function. Accepts an array of objects and a search term as arguments\n     * and returns a string. See search input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Whether the search input is disabled. **/\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder of the search input. **/\n    @Input()\n    placeholder: string;\n\n    /** Whether the search input is in a shellbar **/\n    @Input()\n    inShellbar: boolean = false;\n\n    /** Icon to display in the right-side button. */\n    @Input()\n    glyph: string = 'search';\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '200px';\n\n    /** Search function to execute when the Enter key is pressed on the main input. */\n    @Input()\n    searchFunction: Function;\n\n    /** Whether the search input should be displayed in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the matching string should be highlighted during filtration. */\n    @Input()\n    highlighting: boolean = true;\n\n    /** Whether the popover should close when a user selects a result. */\n    @Input()\n    closeOnSelect: boolean = true;\n\n    /** Whether the input field should be populated with the result picked by the user. */\n    @Input()\n    fillOnSelect: boolean = true;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See search input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Event emitted when an item is clicked. Use *$event* to retrieve it. */\n    @Output()\n    itemClicked: EventEmitter<{item: any, index: number}> = new EventEmitter<{item: any, index: number}>();\n\n    /** @hidden */\n    @ViewChildren(MenuItemDirective)\n    menuItems: QueryList<MenuItemDirective>;\n\n    /** @hidden */\n    @ViewChild('searchInputElement')\n    searchInputElement: ElementRef;\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    @HostBinding('class.fd-search-input')\n    searchInputClass = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-search-input--closed')\n    shellBarClass = this.inShellbar;\n\n    /** @hidden */\n    onInputKeydownHandler(event) {\n        if (event.code === 'Enter' && this.searchFunction) {\n            this.searchFunction();\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            if (this.menuItems && this.menuItems.first) {\n                this.menuItems.first.itemEl.nativeElement.children[0].focus();\n            }\n        }\n    }\n\n    /** @hidden */\n    onInputKeyupHandler() {\n        if (this.inputText && this.inputText.length) {\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    onMenuKeydownHandler(event, term?) {\n        if (event.code === 'Enter' && term) {\n            this.handleClickActions(term);\n            this.itemClicked.emit({item: term, index: this.dropdownValues.indexOf(term)});\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            let foundItem = false;\n            const menuItemsArray = this.menuItems.toArray();\n            menuItemsArray.forEach((item, index) => {\n                if (document.activeElement === item.itemEl.nativeElement.children[0] && !foundItem) {\n                    if (menuItemsArray[index + 1]) {\n                        menuItemsArray[index + 1].itemEl.nativeElement.children[0].focus();\n                    }\n                    foundItem = true;\n                }\n            })\n        } else if (event.code === 'ArrowUp') {\n            event.preventDefault();\n            let foundItem = false;\n            const menuItemsArray = this.menuItems.toArray();\n            menuItemsArray.forEach((item, index) => {\n                if (!foundItem) {\n                    if (document.activeElement === item.itemEl.nativeElement.children[0] && index === 0) {\n                        this.searchInputElement.nativeElement.focus();\n                        foundItem = true;\n                    } else if (document.activeElement === item.itemEl.nativeElement.children[0]) {\n                        if (menuItemsArray[index - 1]) {\n                            menuItemsArray[index - 1].itemEl.nativeElement.children[0].focus();\n                        }\n                        foundItem = true;\n                    }\n                }\n            });\n        }\n    }\n\n    /** @hidden */\n    onMenuClickHandler(event, term) {\n        if (term) {\n            this.handleClickActions(term);\n            this.itemClicked.emit({item: term, index: this.dropdownValues.indexOf(term)});\n        }\n    }\n\n    /** @hidden */\n    shellbarSearchInputClicked(event) {\n        event.stopPropagation();\n    }\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the input text of the input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the input text of the input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    private handleClickActions(term): void {\n        if (this.closeOnSelect) {\n            this.isOpen = false;\n        }\n        if (this.fillOnSelect) {\n            this.inputText = this.displayFn(term);\n            this.handleSearchTermChange();\n        }\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n\n        if (isDevMode()) {\n            console.warn('Search Input is deprecated. Please use Combobox instead. Visit the fundamental-ngx wiki for more information.')\n        }\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.inputText) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n            } else {\n                this.displayedValues =  this.dropdownValues;\n            }\n        }\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n    }\n\n    private defaultDisplay(str: any): string {\n        return str;\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SearchInputComponent } from './search-input.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\nimport { FormsModule } from '@angular/forms';\nimport { PipeModule } from '../utils/pipes/pipe.module';\n\n@NgModule({\n    declarations: [SearchInputComponent],\n    imports: [\n        CommonModule,\n        PopoverModule,\n        MenuModule,\n        FormsModule,\n        PipeModule\n    ],\n    exports: [SearchInputComponent]\n})\nexport class SearchInputModule {}\n","import { Component } from '@angular/core';\n\n/**\n * The shellbar offers consistent, responsive navigation across all products and applications.\n * Includes support for branding, product navigation, search, notifications, and user settings.\n * Shellbar is a composite component comprised of mandatory and optional elements.\n */\n@Component({\n    selector: 'fd-shellbar',\n    templateUrl: './shellbar.component.html'\n})\nexport class ShellbarComponent {\n}\n","import { Component, HostListener, Input, OnInit, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { PopoverComponent } from '../../popover/popover.component';\n\n/**\n * The component that represents a product menu.\n * Product menu is used for navigating to applications within the product.\n * ```html\n * <fd-product-menu [control]=\"productMenuControl\"\n *                  [items]=\"productMenuItems\">\n * </fd-product-menu>\n * ```\n */\n@Component({\n    selector: 'fd-product-menu',\n    templateUrl: './product-menu.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProductMenuComponent implements OnInit {\n\n    /** @hidden */\n    @ViewChild(PopoverComponent)\n    popoverComponent: PopoverComponent;\n\n    /** \n     * The control element to toggle the product menu,\n     * represented by the name of the current application. \n     */\n    @Input()\n    control: string;\n\n    /** The items in the product menu. */\n    @Input()\n    items: any[];\n\n    /** @hidden */\n    productMenuCollapsed: boolean = false;\n\n    /** When set to true, popover list will be closed after selecting the option */\n    @Input()\n    closePopoverOnSelect: boolean = false;\n\n    /** @hidden */\n    @HostListener('window:resize', [])\n    onResize() {\n        const mq = window.matchMedia('(max-width: 601px)');\n        mq.matches ? this.productMenuCollapsed = true : this.productMenuCollapsed = false;\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this.onResize();\n    }\n\n    /**\n     * @hidden\n     */\n    itemClicked(item: any, event: any): void {\n        if (this.closePopoverOnSelect) {\n            this.popoverComponent.close();\n        }\n        item.callback(event);\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar subtitle.\n * The subtitle is optional and should be used rarely.\n * ```html\n *   <fd-shellbar-subtitle>\n *      Corporate Portal\n *   </fd-shellbar-subtitle>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-subtitle',\n    templateUrl: './shellbar-subtitle.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarSubtitleComponent {}\n","import { Component, ContentChild, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar action.\n * ```html\n *  <fd-shellbar-action *ngFor=\"let action of actions\"\n *                      [glyph]=\"action.glyph\"\n *                      [callback]=\"action.callback\"\n *                      [label]=\"action.label\"\n *                      [notificationCount]=\"action.notificationCount\"\n *                      [notificationLabel]=\"action.notificationLabel\">\n *  </fd-shellbar-action>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-action',\n    templateUrl: './shellbar-action.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarActionComponent {\n\n    /** The glyph (icon) name */\n    @Input()\n    glyph: string;\n\n    /** Callback that hanldles the response to clicks on any of the actions. */\n    @Input()\n    callback: Function;\n\n    /** The action label. */\n    @Input()\n    label: string;\n\n    /** The notification label. */\n    @Input()\n    notificationLabel: string;\n\n    /** Represents the number of notifications. */\n    @Input()\n    notificationCount: number;\n\n}\n","import {\n    Component,\n    ContentChildren,\n    HostListener,\n    Input,\n    OnInit,\n    AfterContentChecked,\n    QueryList,\n    ViewEncapsulation,\n    ContentChild, ViewChildren\n} from '@angular/core';\nimport { ShellbarActionComponent } from '../shellbar-action/shellbar-action.component';\nimport { SearchInputComponent } from '../../search-input/search-input.component';\nimport { PopoverComponent } from '../../popover/popover.component';\n\n/**\n * The component that represents shellbar actions.\n * It is a container wrapper for all product actions and links (required element).\n * ```html\n * <fd-shellbar-actions [user]=\"user\"\n *                      [userMenu]=\"userMenu\"\n *                      [productSwitcher]=\"productSwitcher\">\n *        <button fd-button [fdType]=\"'standard'\">Custom Button</button>\n *\n *        <fd-shellbar-action *ngFor=\"let action of actions\"\n *                            [glyph]=\"action.glyph\"\n *                            [callback]=\"action.callback\"\n *                            [label]=\"action.label\"\n *                            [notificationCount]=\"action.notificationCount\"\n *                            [notificationLabel]=\"action.notificationLabel\">\n *        </fd-shellbar-action>\n * </fd-shellbar-actions>\n * ```\n */\n\n@Component({\n    selector: 'fd-shellbar-actions',\n    templateUrl: './shellbar-actions.component.html',\n    styleUrls: ['./shellbar-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarActionsComponent implements OnInit, AfterContentChecked {\n\n    /** @hidden */\n    actionsCollapsed: boolean = false;\n\n    /** @hidden */\n    showCollapsedProducts: boolean = false;\n\n    /** The product switcher data. */\n    @Input()\n    productSwitcher: any[];\n\n    /** The user data. */\n    @Input()\n    user: any;\n\n    /** The user menu data. */\n    @Input()\n    userMenu: any[];\n\n    /** When set to true, popover list will be closed after selecting the option */\n    @Input()\n    closePopoverOnSelect: boolean = false;\n\n    /** Label for the collapsed item menu. */\n    @Input()\n    collapsedItemMenuLabel: string = 'Collapsed Item Menu';\n\n    /** @hidden */\n    @ContentChildren(ShellbarActionComponent)\n    shellbarActions: QueryList<ShellbarActionComponent>;\n\n    /** @hidden */\n    @ViewChildren(PopoverComponent)\n    popoverComponents: QueryList<PopoverComponent>;\n\n    /** @hidden */\n    @ContentChild(SearchInputComponent)\n    searchInputComponent: SearchInputComponent;\n\n    /** @hidden */\n    totalNotifications: number;\n\n    /** @hidden */\n    @HostListener('window:resize', [])\n    onResize() {\n        this.actionsCollapsed = window.innerWidth < 1024;\n    }\n\n    /**\n     * @hidden\n     */\n    itemClicked(item: any, event: any): void {\n        if (this.closePopoverOnSelect) {\n            this.popoverComponents.forEach(popover => popover.close());\n        }\n        item.callback(event);\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this.onResize();\n    }\n\n    /** @hidden */\n    ngAfterContentChecked() {\n        this.totalNotifications = 0;\n        this.shellbarActions.forEach((action) => {\n            if (action.notificationCount && typeof action.notificationCount === 'number') {\n                this.totalNotifications = this.totalNotifications + action.notificationCount;\n            }\n        });\n    }\n\n    /** @hidden */\n    toggleCollapsedProducts(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.showCollapsedProducts = !this.showCollapsedProducts;\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar logo.\n * The logo is a required element and is used for company branding. \n * ```html\n *   <fd-shellbar-logo>\n *      <a href=\"#\" class=\"fd-shellbar__logo fd-shellbar__logo--image-replaced\" aria-label=\"SAP\"></a>\n *   </fd-shellbar-logo>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-logo',\n    templateUrl: './shellbar-logo.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarLogoComponent {}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar title.\n * The title is a required element and displays the current application name.\n * ```html\n *   <fd-shellbar-title>\n *      Corporate Portal\n *   </fd-shellbar-title>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-title',\n    templateUrl: './shellbar-title.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarTitleComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ShellbarComponent } from './shellbar.component';\nimport { ProductMenuComponent } from './product-menu/product-menu.component';\nimport { ShellbarSubtitleComponent } from './shellbar-subtitle/shellbar-subtitle.component';\nimport { ShellbarActionsComponent } from './shellbar-actions/shellbar-actions.component';\nimport { ShellbarActionComponent } from './shellbar-action/shellbar-action.component';\nimport { ShellbarLogoComponent } from './shellbar-logo/shellbar-logo.component';\nimport { ShellbarTitleComponent } from './shellbar-title/shellbar-title.component';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\n\n@NgModule({\n    declarations: [\n        ShellbarComponent,\n        ProductMenuComponent,\n        ShellbarSubtitleComponent,\n        ShellbarActionsComponent,\n        ShellbarActionComponent,\n        ShellbarLogoComponent,\n        ShellbarTitleComponent\n    ],\n    imports: [CommonModule, PopoverModule, MenuModule],\n    exports: [\n        ShellbarComponent,\n        ProductMenuComponent,\n        ShellbarSubtitleComponent,\n        ShellbarActionsComponent,\n        ShellbarActionComponent,\n        ShellbarLogoComponent,\n        ShellbarTitleComponent\n    ]\n})\nexport class ShellbarModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The side-navigation is a wrapping component representing\n * a left navigation that can always display or expand/collapse using the menu icon within the global navigation.\n */\n@Component({\n    selector: 'fd-side-nav',\n    templateUrl: './side-navigation.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationComponent {\n\n    /** Whether the side navigation is collapsed. */\n    @Input() collapsed: boolean = false;\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Component({\n    selector: 'fd-side-nav-group',\n    templateUrl: './side-navigation-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationGroupComponent { }\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the side navigation title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-side-nav-title>Side Nav Title</h1>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-title]'\n})\nexport class SideNavigationTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-side-nav__title')\n    fdSideNavTitleClass: boolean = true;\n}\n","import { Directive } from '@angular/core';\n\n/**\n * The directive that represents a list group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-list]',\n    host: {\n        class: 'fd-side-nav__list'\n    }\n})\nexport class SideNavigationListDirective {}\n","import {\n    Input,\n    ElementRef,\n    Output,\n    EventEmitter,\n    Directive, HostListener, Inject, HostBinding\n} from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * The component that represents a navigation link.\n * ```html\n *    <a fd-side-nav-link>\n *        <a [attr.href]=\"'#'\">Link Item</a>\n *    </a>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-link]',\n})\nexport class SideNavigationLinkDirective extends AbstractFdNgxClass {\n\n    /** Whether the link has a sublist. */\n    @Input()\n    hasSublist: boolean = false;\n\n    /** Whether the sub list is opened or closed */\n    @Output()\n    onSubListOpenChange = new EventEmitter<boolean>();\n\n    @Input()\n    sublistIsOpen: boolean = false;\n\n    @HostBinding('attr.role') role = this.hasSublist ? 'button' : '';\n    @HostBinding('attr.aria-haspopup') hasPopup = this.hasSublist;\n    @HostBinding('tabindex') tabindex = this.hasSublist ? '0' : '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-side-nav__link');\n        if (this.hasSublist) {\n            this._addClassToElement('has-child');\n            this._addStyleToElement('cursor', 'pointer');\n            this.elementRef.nativeElement.setAttribute('aria-expanded', this.sublistIsOpen);\n        }\n        if (this.sublistIsOpen && this.hasSublist) {\n            this._addClassToElement('is-selected');\n        }\n    }\n\n    /** @hidden */\n    constructor(@Inject(ElementRef) private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    @HostListener('keypress', ['$event'])\n    onKeypressHandler(event) {\n        if (this.hasSublist && (event.code === 'Enter' || event.code === 'Space')) {\n            event.preventDefault();\n            this.changeSubListIsOpen();\n        }\n    }\n\n    @HostListener('click', ['$event.target'])\n    changeSubListIsOpen() {\n        if (this.hasSublist) {\n            this.sublistIsOpen = !this.sublistIsOpen;\n            this.onSubListOpenChange.emit(this.sublistIsOpen);\n            this.ngOnChanges();\n        }\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-sublist]',\n    host: {\n        class: 'fd-side-nav__sublist'\n    }\n})\nexport class SideNavigationSublistDirective {\n    public sublistIsOpen: boolean = false;\n\n    public subListIsOpenChange(sublistIsOpen: boolean) {\n        this.sublistIsOpen = sublistIsOpen;\n        this.elementRef.nativeElement.setAttribute('aria-hidden', !this.sublistIsOpen);\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {}\n}\n","import { AfterContentInit, Component, ContentChild, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { SideNavigationLinkDirective } from '../side-navigation-link/side-navigation-link.directive';\nimport { Subscription } from 'rxjs';\nimport { SideNavigationSublistDirective } from '../side-navigation-sublist/side-navigation-sublist.directive';\n\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Component({\n    selector: 'fd-side-nav-item',\n    templateUrl: './side-navigation-item.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationItemComponent implements AfterContentInit, OnDestroy {\n    @ContentChild(SideNavigationLinkDirective) linkElement: SideNavigationLinkDirective;\n    @ContentChild(SideNavigationSublistDirective) subListElement: SideNavigationSublistDirective;\n\n    /** @Hidden */\n    subListOpenChanged$: Subscription;\n\n    public ngAfterContentInit(): void {\n        if (this.linkElement && this.subListElement) {\n            /** After view content check if there is flag with opened true */\n            this.subListElement.subListIsOpenChange(this.linkElement.sublistIsOpen);\n            this.subListOpenChanged$ = this.linkElement.onSubListOpenChange.subscribe(isOpen => {\n                this.subListElement.subListIsOpenChange(isOpen);\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subListOpenChanged$) {\n            this.subListOpenChanged$.unsubscribe();\n        }\n    }\n\n}\n","import { Directive } from '@angular/core';\n\n/**\n * The component that represents a sub item.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *            <a fd-side-nav-link>Link Item</a>\n *                <div fd-side-nav-sublist>\n *                    <div fd-side-nav-subitem>\n *                        <a fd-side-nav-sublink [attr.href]=\"'#'\">Link Item</a>\n *                    </div>\n *                    <div fd-side-nav-subitem>\n *                        <a fd-side-nav-sublink [routerLink]=\"'#'\">Link Item</a>\n *                    </div>\n *              </div>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-subitem]',\n    host: {\n        class: 'fd-side-nav__subitem'\n    }\n})\nexport class SideNavigationSubitemDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The directive that represents a navigation sublink.\n * ```html\n *     <a fd-side-nav-sublink [attr.href]=\"'#'\">Sub Link Item</a>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-sublink]',\n    host: {\n        class: 'fd-side-nav__sublink'\n    }\n})\nexport class SideNavigationSublinkDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SideNavigationComponent } from './side-navigation.component';\nimport { SideNavigationGroupComponent } from './side-navigation-group/side-navigation-group.component';\nimport { SideNavigationTitleDirective } from './side-navigation-title/side-navigation-title.directive';\nimport { SideNavigationListDirective } from './side-navigation-list/side-navigation-list.directive';\nimport { SideNavigationItemComponent } from './side-navigation-item/side-navigation-item.component';\nimport { SideNavigationLinkDirective } from './side-navigation-link/side-navigation-link.directive';\nimport { SideNavigationSublistDirective } from './side-navigation-sublist/side-navigation-sublist.directive';\nimport { SideNavigationSubitemDirective } from './side-navigation-subitem/side-navigation-subitem.directive';\nimport { SideNavigationSublinkDirective } from './side-navigation-sublink/side-navigation-sublink.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        SideNavigationComponent,\n        SideNavigationGroupComponent,\n        SideNavigationTitleDirective,\n        SideNavigationListDirective,\n        SideNavigationItemComponent,\n        SideNavigationLinkDirective,\n        SideNavigationSublistDirective,\n        SideNavigationSubitemDirective,\n        SideNavigationSublinkDirective,\n    ],\n    declarations: [\n        SideNavigationComponent,\n        SideNavigationGroupComponent,\n        SideNavigationTitleDirective,\n        SideNavigationListDirective,\n        SideNavigationItemComponent,\n        SideNavigationLinkDirective,\n        SideNavigationSublistDirective,\n        SideNavigationSubitemDirective,\n        SideNavigationSublinkDirective,\n    ]\n})\nexport class SideNavigationModule {}\n","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\n\n/**\n * Used to represent an option of the select component.\n */\n@Component({\n    selector: 'fd-option',\n    templateUrl: './option.component.html',\n    styleUrls: ['./option.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[class.fd-option-default-custom]': 'true',\n        '[attr.aria-disabled]': 'disabled',\n        '[tabindex]': 'disabled ? -1 : 0',\n        'role': 'option',\n    }\n})\nexport class OptionComponent implements OnInit {\n\n    /** @hidden */\n    @HostBinding('class.fd-menu__item')\n    fdMenuItemClass: boolean = true;\n\n    /** @hidden */\n    @HostBinding('class.is-selected')\n    selected: boolean = false;\n\n    /** Value of the option. Similar to how a native select operates. */\n    @Input()\n    value: any;\n\n    /** Whether to disable this option specifically. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Override for the view value of the option. If none is provided, the text content is used. */\n    @Input()\n    viewValue: string;\n\n    /** Emitted when the selected state changes. */\n    @Output()\n    readonly selectedChange: EventEmitter<OptionComponent>\n        = new EventEmitter<OptionComponent>();\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {}\n\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.selected && !this.disabled) {\n            this.focus();\n        }\n    }\n\n    /** Returns the view value text of the option, or the viewValue input if it exists. */\n    get viewValueText(): string {\n        return this.viewValue ? this.viewValue :\n            ((this.elRef.nativeElement as HTMLElement).textContent || '').trim();\n    }\n\n    /** Returns the view value text of the option, or the viewValue input if it exists. */\n    setSelected(value: boolean, fireEvent: boolean = true): void {\n        this.selected = value;\n\n        if (fireEvent) {\n            this.selectedChange.emit(this);\n        }\n    }\n\n    /** Focuses the element. */\n    focus(): void {\n        (this.elRef.nativeElement as HTMLElement).focus();\n    }\n\n    /** Returns HTMLElement representation of the component. */\n    getHtmlElement(): HTMLElement {\n        return this.elRef.nativeElement as HTMLElement;\n    }\n\n    /** @hidden */\n    @HostListener('keydown.enter')\n    @HostListener('click')\n    selectionHandler(): void {\n        if (!this.selected && !this.disabled) {\n            this.selected = true;\n            this.selectedChange.emit(this);\n        }\n    }\n\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    EventEmitter, forwardRef, HostBinding, HostListener,\n    Input, OnChanges, OnDestroy,\n    Output,\n    QueryList, SimpleChanges, TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { OptionComponent } from './option/option.component';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { PopperOptions } from 'popper.js';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Select component intended to mimic the behaviour of the native select element.\n */\n@Component({\n    selector: 'fd-select',\n    templateUrl: './select.component.html',\n    styleUrls: ['./select.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SelectComponent),\n            multi: true\n        }\n    ],\n    host: {\n        '[class.fd-select-custom]': 'true',\n        'role': 'listbox',\n    }\n})\nexport class SelectComponent implements OnChanges, AfterContentInit, OnDestroy, ControlValueAccessor {\n\n    /** @hidden */\n    @HostBinding('class.fd-dropdown')\n    fdDropdownClass: boolean = true;\n\n    /** @hidden */\n    @ContentChildren(OptionComponent, { descendants: true })\n    options: QueryList<OptionComponent>;\n\n    /** Whether the select component is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Placeholder for the select. Appears in the triggerbox if no option is selected. */\n    @Input()\n    placeholder: string;\n\n    /** Open state of the select. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Current value of the selected option. */\n    @Input()\n    value: any;\n\n    /** Whether the select is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string;\n\n    /** Popper.js options of the popover. */\n    @Input()\n    popperOptions: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** Template with which to display the trigger box. */\n    @Input()\n    triggerTemplate: TemplateRef<any>;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body';\n\n    /** Event emitted when the popover open state changes. */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean>\n        = new EventEmitter<boolean>();\n\n    /** Event emitted when the selected value of the select changes. */\n    @Output()\n    readonly valueChange: EventEmitter<any>\n        = new EventEmitter<any>();\n\n    /** @hidden */\n    calculatedMaxHeight: number;\n\n    /** Current selected option component reference. */\n    private selected: OptionComponent;\n\n    /** Subject triggered when the component is destroyed. */\n    private readonly destroy$: Subject<void> = new Subject<void>();\n\n    /** Observable triggered when an option has its selectedChange event fire. */\n    private readonly optionsStatusChanges: Observable<OptionComponent> = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(\n                startWith(options),\n                switchMap(() => merge(...options.map(option => option.selectedChange)))\n            );\n        }\n    }) as Observable<OptionComponent>;\n\n    /** @hidden */\n    onChange: Function = () => {};\n\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    isOpenChangeHandle(isOpen: boolean): void {\n        this.isOpen = isOpen;\n        this.isOpenChange.emit(isOpen);\n        this.resizeScrollHandler();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value) {\n            setTimeout(() => {\n                if (this.value) {\n                    this.selectValue(this.value, false);\n                }\n            });\n        }\n    }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n\n        // If the observable state changes, reset the options and initialize selection.\n        this.options.changes.pipe(startWith(null), takeUntil(this.destroy$)).subscribe(() => {\n            this.resetOptions();\n            this.initSelection();\n        });\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    /** Toggles the open state of the select. */\n    toggle(): void {\n        if (this.isOpen && !this.disabled) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the select popover body. */\n    open(): void {\n        if (!this.isOpen && !this.disabled) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /** Closes the select popover body. */\n    close(): void {\n        if (this.isOpen && !this.disabled) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.selectValue(value, false);\n        } else {\n            // Defer the selection of the value to support forms\n            Promise.resolve().then(() => {\n                if (this.options) {\n                    this.selectValue(value, false);\n                }\n            });\n        }\n    }\n\n    /** Returns the current trigger value if there is a selected option. Otherwise, returns the placeholder. */\n    get triggerValue(): string {\n        return this.selected ? this.selected.viewValueText : this.placeholder;\n    }\n\n    /** @hidden */\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n        switch (event.code) {\n            case ('ArrowUp'): {\n                event.preventDefault();\n                this.decrementFocused();\n                break;\n            }\n            case ('ArrowDown'): {\n                event.preventDefault();\n                this.incrementFocused();\n                break;\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('window:resize')\n    resizeScrollHandler() {\n        this.calculatedMaxHeight = window.innerHeight * 0.45;\n    }\n\n    /**\n     * Selects an option by option component reference. Preferred method of selection.\n     * @param option The option component to search for.\n     * @param fireEvents Whether to fire change events.\n     */\n    private selectOption(option: OptionComponent, fireEvents: boolean = true): OptionComponent | undefined {\n        if (!this.isOptionActive(option)) {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            option.setSelected(true, false);\n            this.selected = option;\n            this.updateValue(fireEvents);\n            this.close();\n            return option;\n        }\n        return;\n    }\n\n    /**\n     * Selects an option by value. If two components have the same value, the first one found is selected.\n     * Recommend using selectOption generally.\n     * @param value Value to search for.\n     * @param fireEvents Whether to fire change events.\n     */\n    private selectValue(value: any, fireEvents: boolean = true): OptionComponent | undefined {\n        const matchOption = this.options.find((option: OptionComponent) => {\n            return option.value != null && option.value === value;\n        });\n\n        // If not match is found, set everything to null\n        // This is mostly only for cases where a user removes an active option\n        if (!matchOption) {\n            this.unselectOptions();\n            return;\n        }\n\n        // If match is found, select the new value\n        if (matchOption && !this.isOptionActive(matchOption)) {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            matchOption.setSelected(true, false);\n            this.selected = matchOption;\n\n            this.updateValue(fireEvents);\n            this.close();\n        }\n\n        return matchOption;\n    }\n\n    /**\n     * Updates the value parameter with optional events.\n     * @param fireEvents If true, function fires valueChange, onChange and onTouched events.\n     */\n    private updateValue(fireEvents: boolean = true): void {\n        this.value = this.selected.value;\n        if (fireEvents) {\n            this.valueChange.emit(this.value);\n            this.onChange(this.value);\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Function used to reset the options state.\n     */\n    private resetOptions(): void {\n        // Create observable that fires when the options change or the component is destroyed.\n        const destroyCurrentObs = merge(this.options.changes, this.destroy$);\n\n        // Subscribe to observable defined in component properties which fires when an option is clicked.\n        // Destroy if the observable defined above triggers.\n        this.optionsStatusChanges.pipe(takeUntil(destroyCurrentObs)).subscribe((instance: OptionComponent) => {\n            this.selectOption(instance);\n        });\n    }\n\n    /** Selection initialization when a change occurs in options. */\n    private initSelection(): void {\n        if (this.value) {\n            this.selected = undefined;\n            this.selectValue(this.value, false);\n        }\n    }\n\n    /**\n     * Function that tests whether the tested option is currently selected.\n     * @param option Option to test against the selected option.\n     */\n    private isOptionActive(option: OptionComponent): boolean {\n        return option && this.selected && option === this.selected;\n    }\n\n    /** Method that focuses the next option in the list, or the first one if the last one is currently focused. */\n    private incrementFocused(): void {\n\n        // Get active focused element\n        const activeElement = document.activeElement;\n\n        // Get corresponding option element to the above\n        const correspondingOption = this.options.find(option => {\n            return option.getHtmlElement() === activeElement;\n        });\n\n        if (correspondingOption) {\n            const arrayOptions = this.options.toArray();\n            const index = arrayOptions.indexOf(correspondingOption);\n\n            // If active option is the last option, focus the first one\n            // Otherwise, focus the next option.\n            if (index === this.options.length - 1) {\n                arrayOptions[0].focus();\n            } else {\n                arrayOptions[index + 1].focus();\n            }\n        } else if (this.options) {\n            this.options.first.focus();\n        }\n    }\n\n    /** Method that focuses the previous option in the list, or the last one if the last one is currently focused. */\n    private decrementFocused(): void {\n\n        // Get active focused element\n        const activeElement = document.activeElement;\n\n        // Get corresponding option element to the above\n        const correspondingOption = this.options.find(option => {\n            return option.getHtmlElement() === activeElement;\n        });\n\n        // If active option is the first option, focus the last one\n        // Otherwise, focus the previous option.\n        if (correspondingOption) {\n            const arrayOptions = this.options.toArray();\n            const index = arrayOptions.indexOf(correspondingOption);\n\n            if (index === 0) {\n                arrayOptions[this.options.length - 1].focus();\n            } else {\n                arrayOptions[index - 1].focus();\n            }\n        } else if (this.options) {\n            this.options.first.focus();\n        }\n    }\n\n    /**\n     * Method used to handle cases where a user removes the currently active option.\n     * The timeout is required because this can happen after the view has been checked.\n     */\n    private unselectOptions(): void {\n        setTimeout(() => {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            this.selected = undefined;\n            this.value = undefined;\n            this.valueChange.emit(undefined);\n            this.onChange(undefined);\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SelectComponent } from './select.component';\nimport { OptionComponent } from './option/option.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        SelectComponent,\n        OptionComponent\n    ],\n    exports: [\n        SelectComponent,\n        OptionComponent\n    ],\n    imports: [\n        CommonModule,\n        PopoverModule\n    ]\n})\nexport class SelectModule {}\n","import { Directive, EmbeddedViewRef, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive used to identify the template which will populate the main action button.\n * Used to achieve complex buttons that require more than a string.\n *```html\n *    <fd-button-split>\n *        <ng-template fd-button-split-action-title>\n *            <p>Paragraph 1</p>\n *            <p>Paragraph 2</p>\n *        </ng-template>\n *        <div fd-button-split-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-button-split>\n *</fd-button-split>\n *```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-action-title]'\n})\nexport class SplitButtonActionTitle {}\n\n\n/**\n *   Directive used to specify menu list of items for dropdown.\n *```html\n *    <fd-button-split>\n *        Action Button\n *        <div fd-button-split-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-button-split>\n *</fd-button-split>\n *```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-menu]',\n})\nexport class SplitButtonMenuDirective {}\n\n\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-load-action-title]'\n})\nexport class SplitButtonLoadActionTitle implements OnInit {\n    @Input('fd-split-button-load-action-title')\n    content: TemplateRef<any>;\n\n    private contentRef: EmbeddedViewRef<any>;\n\n    constructor(private viewRef: ViewContainerRef) {}\n\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { SplitButtonActionTitle } from './split-button-utils/split-button.directives';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Split Button component, used to enhance standard HTML button and add possibility to put some dropdown with\n * additional options.\n *\n * ```html\n *    <fd-split-button>\n *        Action Button\n *        <div fd-split-button-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-split-button>\n * ```\n */\n@Component({\n    selector: 'fd-split-button',\n    templateUrl: 'split-button.component.html'\n})\nexport class SplitButtonComponent {\n\n    /** @hidden */\n    @ContentChild(SplitButtonActionTitle, {read: TemplateRef})\n    titleTemplate: TemplateRef<any>;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /** Whether to apply compact mode to the button. */\n    @Input()\n    compact: boolean;\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input()\n    glyph: string = 'slim-arrow-down';\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input()\n    disabled: boolean;\n\n    /** The Title for main  action button */\n    @Input()\n    mainActionTitle: string;\n\n    /** The type of the button. Types include 'standard', 'positive', 'medium', and 'negative'.\n     * Leave empty for default (Action button).'*/\n    @Input()\n    fdType: string;\n\n    /** Button options.  Options include 'emphasized' and 'light'. Leave empty for default.' */\n    @Input()\n    options: string | string[];\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** @hidden */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Event sent when is open popover changed */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event sent when primary button is clicked */\n    @Output()\n    readonly primaryButtonClicked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     *  Handles primary button click\n     *  */\n    public buttonClick($event) {\n        this.primaryButtonClicked.emit();\n        $event.stopPropagation();\n    }\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SplitButtonComponent } from './split-button.component';\nimport { ButtonModule } from '../button/button.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { SplitButtonActionTitle, SplitButtonLoadActionTitle, SplitButtonMenuDirective } from './split-button-utils/split-button.directives';\n\n@NgModule({\n    imports: [CommonModule, ButtonModule, PopoverModule],\n    declarations: [SplitButtonComponent, SplitButtonMenuDirective, SplitButtonActionTitle, SplitButtonLoadActionTitle],\n    exports: [SplitButtonComponent, SplitButtonMenuDirective, SplitButtonActionTitle, SplitButtonLoadActionTitle]\n})\nexport class SplitButtonModule {}\n","import { Directive, HostBinding } from '@angular/core';\n/**\n * The directive that represents a table.\n * A table is a set of tabular data. Line items can support data, images and actions.\n * ```html\n * <table fd-table></table>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-table]'\n})\nexport class TableDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-table')\n    fdTableClass: boolean = true;\n\n}\n","import { Directive, Input } from '@angular/core';\n\n/**\n * Directive used to achieve column sorting.\n * The directive is placed on the the desired column(s) to sort,\n */\n@Directive({\n    selector: '[fdColumnSortable]',\n    host: {\n        class: 'fd-table__sort-column',\n        '[class.fd-table__sort-column--dsc]': 'sortDir === \"desc\" || sortDir === \"dsc\"',\n        '[class.fd-table__sort-column--asc]': 'sortDir === \"asc\"'\n    }\n})\nexport class ColumnSortableDirective {\n\n    /** \n     * The sorting direction. \n     * Options include *asc*, *dsc*, *desc*, and *none*\n     */\n    @Input() sortDir: SortDirections;\n\n}\nexport type SortDirections = 'asc' | 'dsc' | 'desc' | 'none';\n","import { Directive } from '@angular/core';\n/**\n * The directive that represents a table.\n * A table is a set of tabular data. Line items can support data, images and actions.\n * ```html\n *     <div fd-table-responsive-wrapper>\n *         <table fd-table>\n *         </table>\n *     </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-table-responsive-wrapper]',\n    host: {\n        style: 'overflow-x: auto'\n    }\n})\nexport class TableResponsiveWrapperDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TableDirective } from './table.directive';\nimport { ColumnSortableDirective } from './column-sortable.directive';\nimport { TableResponsiveWrapperDirective } from './table-responsive-wrapper.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [TableDirective, TableResponsiveWrapperDirective, ColumnSortableDirective],\n    exports: [TableDirective, TableResponsiveWrapperDirective, ColumnSortableDirective]\n})\nexport class TableModule {}\n","import { Directive, EmbeddedViewRef, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive used to identify the template which will populate the tab header.\n * Used to achieve complex headers that require more than a string.\n *\n * ```html\n * <fd-tab>\n *      <ng-template fd-tab-title>\n *          <fd-icon [glyph]=\"'delete'\"></fd-icon>\n *          <span>Tab Label</span>\n *      </ng-template>\n * </fd-tab>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-title]'\n})\nexport class TabTitleDirective {\n}\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-load-title]'\n})\nexport class TabLoadTitleDirective implements OnInit {\n    @Input('fd-tab-load-title')\n    content: TemplateRef<any>;\n\n    private contentRef: EmbeddedViewRef<any>;\n\n    constructor(private viewRef: ViewContainerRef) {}\n\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import { Component, ContentChild, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { TabTitleDirective } from '../tab-utils/tab-directives';\n\nlet tabPanelUniqueId: number = 0;\n\n/**\n * Represents the body of a tab element. It also contains elements pertaining to the associated tab header.\n */\n@Component({\n    selector: 'fd-tab',\n    templateUrl: './tab-panel.component.html',\n    host: {\n        role: 'tabpanel',\n        class: 'fd-tabs__panel',\n        '[attr.id]': 'id',\n        '[attr.aria-expanded]': 'expanded ? true : null',\n        '[class.is-expanded]': 'expanded'\n    },\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TabPanelComponent {\n\n    /** @hidden */\n    @ContentChild(TabTitleDirective, {read: TemplateRef})\n    titleTemplate: TemplateRef<any>;\n\n    /** The title of the tab header. */\n    @Input()\n    title: string;\n\n    /** Aria-label of the tab. Also applied to the tab header. */\n    @Input()\n    ariaLabel: string;\n\n    /** Id of the element that labels the tab. Also applied to the tab header. */\n    @Input()\n    ariaLabelledBy: string;\n\n    /** Whether the tab is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Id of the tab. If none is provided, one will be generated. */\n    @Input()\n    id: string = 'fd-tab-panel' + tabPanelUniqueId++;\n\n    /** @hidden */\n    expanded = false;\n\n    /** @hidden */\n    index: number;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Service that is responsible for providing keyboard actions support\n * */\n@Injectable()\nexport class TabsService {\n\n    /** Event is thrown always when tab is selected by keyboard actions */\n    public tabSelected = new Subject<number>();\n\n    /** @hidden */\n    tabHeaderKeyHandler(index: number, event: any, elements: HTMLElement[]): void {\n        switch (event.code) {\n            case ('ArrowLeft'): {\n                if (index - 1 >= 0) {\n                    this.getTabLinkFromIndex(index - 1, elements).focus();\n                } else {\n                    this.getTabLinkFromIndex(elements.length - 1, elements).focus();\n                }\n                break;\n            }\n            case ('ArrowRight'): {\n                if (index + 1 < elements.length) {\n                    this.getTabLinkFromIndex(index + 1, elements).focus();\n                } else {\n                    this.getTabLinkFromIndex(0, elements).focus();\n                }\n                break;\n            }\n            case ('Space'): {\n                event.preventDefault();\n                this.tabSelected.next(index);\n                break;\n            }\n            case ('Enter'): {\n                this.tabSelected.next(index);\n            }\n        }\n    }\n\n    /** @hidden */\n    private getTabLinkFromIndex(index: number, elements: HTMLElement[]): HTMLElement {\n        return elements[index];\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TabPanelComponent } from './tab/tab-panel.component';\nimport { Subscription } from 'rxjs';\nimport { TabsService } from './tabs.service';\n\n/**\n * Represents a list of tab-panels.\n */\n@Component({\n    selector: 'fd-tab-list',\n    templateUrl: './tab-list.component.html',\n    styleUrls: ['./tab-list.component.scss'],\n    host: {\n        class: 'fd-tabs-custom'\n    },\n    encapsulation: ViewEncapsulation.None,\n    providers: [TabsService]\n})\nexport class TabListComponent implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** @hidden */\n    @ContentChildren(TabPanelComponent)\n    panelTabs: QueryList<TabPanelComponent>;\n\n    /** @hidden */\n    @ViewChildren('tabLink')\n    tabLinks: QueryList<ElementRef>;\n\n    /** Index of the selected tab panel. */\n    @Input()\n    selectedIndex: number = 0;\n\n    /** Event emitted when the selected panel changes. */\n    @Output()\n    selectedIndexChange = new EventEmitter<number>();\n\n    private _tabsSubscription: Subscription;\n    private _tabSelectSubscription: Subscription;\n\n    constructor(\n        private tabsService: TabsService\n    ) {}\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        setTimeout(() => {\n            this.selectTab(this.selectedIndex);\n        });\n\n        this._tabSelectSubscription = this.tabsService.tabSelected.subscribe(index => {\n            if (index !== this.selectedIndex) {\n                this.selectTab(index);\n            }\n        });\n\n        this._tabsSubscription = this.panelTabs.changes.subscribe(() => {\n            if (!this.isIndexInRange() || this.isTabContentEmpty()) {\n                this.resetTabHook();\n            }\n        });\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this._tabsSubscription.unsubscribe();\n        this._tabSelectSubscription.unsubscribe();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.selectedIndex) {\n            setTimeout(() => {\n                this.selectTab(changes.selectedIndex.currentValue);\n            });\n        }\n    }\n\n    /**\n     * Function to select a new tab from an index.\n     * @param tabIndex Index of the tab to select.\n     */\n    selectTab(tabIndex: number): void {\n       if (this.isIndexInRange() && this.isTargetTabEnabled(tabIndex)) {\n            this.panelTabs.forEach((tab, index) => {\n                tab.expanded = index === tabIndex;\n            });\n            this.selectedIndex = tabIndex;\n            this.selectedIndexChange.emit(tabIndex);\n        }\n    }\n\n    /** @hidden */\n    tabHeaderClickHandler(tabIndex: number): void {\n        if (this.selectedIndex !== tabIndex) {\n            this.selectTab(tabIndex);\n        }\n    }\n\n    /** @hidden */\n    tabHeaderKeyHandler(index: number, event: any): void {\n        this.tabsService.tabHeaderKeyHandler(index, event, this.tabLinks.map(tab => tab.nativeElement));\n    }\n\n    private isIndexInRange(): boolean {\n        return this.panelTabs && this.panelTabs.length > 0 && this.selectedIndex < this.panelTabs.length;\n    }\n\n    private isTargetTabEnabled(index: number): boolean {\n        return !this.panelTabs.toArray()[index].disabled;\n    }\n\n    private isTabContentEmpty(): boolean {\n        let result = true;\n        this.panelTabs.forEach(tab => {\n            if (tab.expanded) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    private resetTabHook(): void {\n        this.selectedIndex = 0;\n        setTimeout(() => {\n            this.selectTab(this.selectedIndex);\n        });\n    }\n}\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Tab link for nav mode\n *\n * ```html\n * <a fd-tab-link>\n *    link\n * </a>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-link]',\n    host: {\n        'role': 'tab',\n    }\n})\nexport class TabLinkDirective extends AbstractFdNgxClass {\n\n    /** Whether the link is active */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    active: boolean;\n\n    /**\n     * Only visual / accessibility thing on tab-nav mode\n     * RouterLink does not respect preventDefault/stopPropagation\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    disabled: boolean;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tabs__link');\n        if (this.active) {\n            this._addClassToElement('is-selected');\n        }\n    }\n\n    /** @hidden */\n    constructor(public elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n}\n","import { ContentChild, Directive } from '@angular/core';\nimport { TabLinkDirective } from '../tab-link/tab-link.directive';\n/**\n * Tab Item is optional wrapper for Tab link\n *\n * ```html\n * <div fd-tab-item>\n *    <a fd-tab-link>\n *        link\n *    </a>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-item]',\n    host: {\n        'class': 'fd-tabs__item'\n    }\n})\nexport class TabItemDirective {\n\n    /** @hidden */\n    @ContentChild(TabLinkDirective) linkItem: TabLinkDirective;\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    EventEmitter, OnDestroy,\n    Output,\n    QueryList,\n    Renderer2\n} from '@angular/core';\nimport { TabLinkDirective } from '../tab-link/tab-link.directive';\nimport { TabItemDirective } from '../tab-item/tab-item.directive';\nimport { TabsService } from '../tabs.service';\nimport { Subscription } from 'rxjs';\n\n\n/**\n * Tab Nav for only navigation mode when you want for example use router-outlet\n *\n * ```html\n *<nav fd-tab-nav>\n *  <div fd-tab-item>\n *      <a fd-tab-link\n *      [active]=\"true\">\n *          Link\n *      </a>\n *  </div>\n *  <div fd-tab-item>\n *      <a fd-tab-link\n *      [active]=\"false\">\n *          Link\n *      </a>\n *  </div>\n *  <a fd-tab-link\n *  [active]=\"false\">\n *      Link\n *  </a>\n * </nav>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-nav]',\n    host: {\n        'class': 'fd-tabs',\n        'role': 'tablist'\n    },\n    providers: [TabsService]\n})\nexport class TabNavDirective implements AfterContentInit, OnDestroy {\n\n    /** @hidden */\n    @ContentChildren(TabLinkDirective) links: QueryList<TabLinkDirective>;\n\n    /** @hidden */\n    @ContentChildren(TabItemDirective) items: QueryList<TabItemDirective>;\n\n    /** @hidden */\n    private _tabSelectSubscription: Subscription;\n\n    /** Event Thrown every time something is clicked */\n    @Output() onKeyDown = new EventEmitter<{event: any, index: number}>();\n\n    /** @hidden */\n    constructor(\n        private renderer: Renderer2,\n        private tabsService: TabsService\n    ) {}\n\n    /** Function that gives possibility to get all the link directives, with and without nav__item wrapper */\n    public get tabLinks(): TabLinkDirective[] {\n        let tabLinks: TabLinkDirective[] = [];\n        if (this.links) { tabLinks = tabLinks.concat(this.links.map(link => link)); }\n        if (this.items) { tabLinks = tabLinks.concat(this.items.filter(item => !!item.linkItem).map(item => item.linkItem)); }\n        return tabLinks;\n    }\n\n    /** @hidden */\n    public ngAfterContentInit(): void {\n        this._tabSelectSubscription = this.tabsService.tabSelected.subscribe(index => {\n            this.selectTab(index);\n        });\n\n        this.tabLinks.forEach((linkElement, index) => {\n            this.renderer.listen(linkElement.elementRef.nativeElement, 'keydown', (event) => {\n                this.tabsService.tabHeaderKeyHandler(index, event, this.tabLinks.map(link => link.elementRef.nativeElement))\n            }\n        )})\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this._tabSelectSubscription.unsubscribe();\n    }\n\n    /**\n     * Function to select a new tab from an index.\n     * @param tabIndex Index of the tab to select.\n     */\n    selectTab(tabIndex: number): void {\n        this.tabLinks[tabIndex].elementRef.nativeElement.click();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabPanelComponent } from './tab/tab-panel.component';\nimport { TabListComponent } from './tab-list.component';\n\nimport { TabLoadTitleDirective, TabTitleDirective } from './tab-utils/tab-directives';\nimport { TabNavDirective } from './tab-nav/tab-nav.directive';\nimport { TabLinkDirective } from './tab-link/tab-link.directive';\nimport { TabItemDirective } from './tab-item/tab-item.directive';\n\n@NgModule({\n    declarations: [\n        TabListComponent,\n        TabPanelComponent,\n        TabTitleDirective,\n        TabLoadTitleDirective,\n        TabNavDirective,\n        TabLinkDirective,\n        TabItemDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        TabListComponent,\n        TabPanelComponent,\n        TabTitleDirective,\n        TabLoadTitleDirective,\n        TabNavDirective,\n        TabItemDirective,\n        TabLinkDirective\n    ]\n})\nexport class TabsModule {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Tile is used to display information in a simple container format.\n * ```html\n * <fd-tile>\n *     <fd-tile-content>\n *         <h2 fd-tile-title>Tile Tile</h2>\n *         <p>Tile Description</p>\n *     </fd-tile-content>\n * </fd-tile>\n * ```\n */\n@Component({\n    selector: 'fd-tile',\n    host: {\n        '[attr.role]': '(this.isButton === true ? \\'button\\' : \\'\\')'\n    },\n    templateUrl: './tile.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TileComponent extends AbstractFdNgxClass {\n    /** Whether the tile is disabled. */\n    @Input() disabled: boolean = false;\n\n    /** Whether the tile is rendered as a button. */\n    @Input() isButton: boolean = false;\n\n    /** Specifies the number of rows a tile should span. */\n    @Input() rowSpan: number;\n\n    /** Specifies the number of columns a tile should span. */\n    @Input() columnSpan: number;\n\n    /** A number specifying the background color of the tile. */\n    @Input() colorAccent: number;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tile');\n        if (this.disabled) {\n            this._addClassToElement('is-disabled');\n        }\n        if (this.rowSpan) {\n            this._addClassToElement('fd-has-grid-row-span-' + this.rowSpan);\n        }\n        if (this.columnSpan) {\n            this._addClassToElement('fd-has-grid-column-span-' + this.columnSpan);\n        }\n        if (this.colorAccent) {\n            this._addClassToElement('fd-has-background-color-accent-' + this.colorAccent);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Directive that represents a tile content. \n * ```html\n * <div fd-tile-content>\n *    <h2 fd-tile-title>Tile Tile</h2>\n *    <p>Tile Description</p>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-content]',\n    host: {\n        class: 'fd-tile__content'\n    }\n})\nexport class TileContentDirective {}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the tile title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-tile-title>Tile Title</h1>\n * <h2 fd-tile-title>Tile Title</h2>\n * <h3 fd-tile-title>Tile Title</h3>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-title]'\n})\nexport class TileTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-tile__title')\n    fdTileTitleClass: boolean = true;\n}\n","import { Directive } from '@angular/core';\n\n/**\n * The directive that represents a tile media container. \n * ```html\n * <div fd-tile-media>\n *      <span fd-identifier\n *            [size]=\"'m'\"\n *            [glyph]=\"'home'\"\n *            [transparent]=\"true\"></span>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-media]',\n    host: {\n        class: 'fd-tile__media'\n    }\n})\nexport class TileMediaDirective {}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * Tile level actions such as add, remove, delete, sort, etc.\n * \n * ```html\n * <fd-tile>\n *    <div fd-tile-actions>\n *        <button fd-button (click)=\"action()\">Action</button>\n *    </div>\n * </fd-tile>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-actions]',\n    host: {\n        class: 'fd-tile__actions'\n    }\n})\nexport class TileActionsDirective {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Product tile is used to display product information.\n * ```html\n * <fd-product-tile>\n *     <fd-product-tile-media [photo]=\"'https://techne.yaas.io/images/product-thumbnail-wide.png'\">\n *     </fd-product-tile-media>\n *     <fd-product-tile-content>\n *         <h2 fd-product-tile-title>Default Product Tile</h2>\n *     </fd-product-tile-content>\n * </fd-product-tile>\n * ```\n */\n@Component({\n    selector: 'fd-product-tile',\n    host: {\n        '[attr.role]': '(this.isButton === true ? \"button\" : \"\")',\n        '[class.fd-product-tile-custom]': 'true'\n    },\n    templateUrl: './product-tile.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n        .fd-product-tile-custom {\n            display: block;\n        }\n    `]\n})\nexport class ProductTileComponent extends AbstractFdNgxClass {\n    /** Whether the product tile is disabled. */\n    @Input() disabled: boolean = false;\n\n    /** Whether the product tile is rendered as a button. */\n    @Input() isButton: boolean = false;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-product-tile');\n        if (this.disabled) {\n            this._addClassToElement('is-disabled');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Component that represents a product tile media container.\n * ```html\n * <div fd-product-tile-media [photo]=\"'https://techne.yaas.io/images/product-thumbnail-wide.png'\">\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-media]',\n})\nexport class ProductTileMediaDirective extends AbstractFdNgxClass {\n    /** The image url. */\n    @Input() photo: string;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties(): void {\n        this._addClassToElement('fd-product-tile__media');\n        if (this.photo) {\n            this._addStyleToElement('background-image', 'url(' + this.photo + ')')\n        }\n    }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Component that represents a product tile content. \n * ```html\n * <div fd-product-tile-content>\n *    <h2 fd-product-tile-title>Default Product Tile</h2>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-content]',\n    host: {\n        'class': 'fd-product-tile__content'\n    }\n})\nexport class ProductTileContentDirective {}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Directive that represents a product tile title.\n * ```html\n * <h2 fd-product-tile-title>Default Product Tile</h2>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-title]'\n})\nexport class ProductTileTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-product-tile__title')\n    fdProductTileTitleClass: boolean = true;\n}\n","import { Directive, ElementRef, Inject, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Directive that represents a tile grid. \n * A Tile Gird is a collection of fd-tile components in a gird layout. \n * ```html\n * <fd-tile-grid [col]=\"3\">\n *      <fd-tile>\n *          <div fd-tile-content>\n *              <h2 fd-tile-title>Tile Tile 1</h2>\n *              <p>Tile Description</p>\n *          </div>\n *      </fd-tile>\n *      <fd-tile>\n *          <div fd-tile-content>\n *              <h2 fd-tile-title>Tile Tile 2</h2>\n *              <p>Tile Description</p>\n *          </div>\n *      </fd-tile>\n *      <fd-tile>\n * </fd-tile-grid>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-grid]'\n})\nexport class TileGridDirective extends AbstractFdNgxClass {\n    /** \n     * The number of columns in the grid layout.\n     * The default is 3-col grid.\n     */\n    @Input() col: number;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tile-grid');\n        if (this.col) {\n            this._addClassToElement('fd-tile-grid--' + this.col + 'col');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TileComponent } from './tile.component';\nimport { TileContentDirective } from './tile-content/tile-content.directive';\nimport { TileTitleDirective } from './tile-title/tile-title.directive';\nimport { TileMediaDirective } from './tile-media/tile-media.directive';\nimport { TileActionsDirective } from './tile-actions/tile-actions.directive';\nimport { ProductTileComponent } from './product-tile.component';\nimport { ProductTileMediaDirective } from './product-tile-media/product-tile-media.directive';\nimport { ProductTileContentDirective } from './product-tile-content/product-tile-content.directive';\nimport { ProductTileTitleDirective } from './product-tile-title/product-tile-title.directive';\nimport { TileGridDirective } from './tile-grid/tile-grid.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        TileComponent,\n        TileContentDirective,\n        TileTitleDirective,\n        TileMediaDirective,\n        TileActionsDirective,\n        ProductTileComponent,\n        ProductTileMediaDirective,\n        ProductTileContentDirective,\n        ProductTileTitleDirective,\n        TileGridDirective\n    ],\n    declarations: [\n        TileComponent,\n        TileContentDirective,\n        TileTitleDirective,\n        TileMediaDirective,\n        TileActionsDirective,\n        ProductTileComponent,\n        ProductTileMediaDirective,\n        ProductTileContentDirective,\n        ProductTileTitleDirective,\n        TileGridDirective\n    ]\n})\nexport class TileModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TreeRowObject } from './tree-row-object.model';\n\n@Component({\n    selector: 'fd-tree-child',\n    templateUrl: './tree-child.component.html'\n})\nexport class TreeChildComponent implements OnInit {\n    @Input() row: TreeRowObject;\n\n    @Input() hideChildren: boolean;\n\n    @Input() displayTreeActions: boolean;\n\n    @Output() editClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() deleteClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    ngOnInit() {\n        this.hideChildren = false;\n    }\n\n    toggleDisplayChildren(hideAll?) {\n        if (hideAll !== undefined) {\n            this.hideChildren = hideAll;\n        } else {\n            this.hideChildren = !this.hideChildren;\n        }\n    }\n\n    typeOf(variable?) {\n        let retVal;\n        if (typeof variable === 'string') {\n            retVal = 'string';\n        } else if (typeof variable === 'object') {\n            retVal = 'object';\n        }\n\n        return retVal;\n    }\n\n    editTreeItem(row?) {\n        if (row) {\n            this.editClicked.emit(row);\n        }\n    }\n\n    deleteTreeItem(row?) {\n        if (row) {\n            this.deleteClicked.emit(row);\n        }\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    OnInit,\n    AfterContentInit,\n    ViewChildren,\n    QueryList,\n    EventEmitter\n} from '@angular/core';\n\nimport { TreeRowObject } from './tree-row-object.model';\nimport { TreeChildComponent } from './tree-child.component';\n\n@Component({\n    selector: 'fd-tree',\n    templateUrl: './tree.component.html'\n})\nexport class TreeComponent implements OnInit, AfterContentInit {\n    @Input() headers: string[];\n\n    @Input() treeData: TreeRowObject[];\n\n    @Input() hideAll: boolean;\n\n    @Input() displayTreeActions: boolean;\n\n    @Output() editRowClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() deleteRowClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChildren(TreeChildComponent) treeChildren: QueryList<TreeChildComponent>;\n\n    ngOnInit() {\n        this.hideAll = false;\n    }\n\n    ngAfterContentInit() {\n        if (this.treeData && this.treeData.length) {\n            this.treeData.forEach(row => {\n                this.getChildDepth(row, 0);\n                this.handleEmptyTrailingCells(row); // handle empty cells for parents\n            });\n        }\n    }\n\n    toggleDisplayAll() {\n        this.hideAll = !this.hideAll;\n        this.treeChildren.forEach(child => {\n            child.toggleDisplayChildren(this.hideAll);\n        });\n    }\n\n    getChildDepth(row, depth) {\n        if (depth > 0) {\n            row.sublevelClass = 'fd-tree__group--sublevel-' + depth;\n        }\n        if (row.children) {\n            row.children.forEach(child => {\n                this.getChildDepth(child, depth + 1);\n                this.handleEmptyTrailingCells(child); // handle empty cells for children\n            });\n        }\n    }\n\n    handleEmptyTrailingCells(row) {\n        if (\n            row &&\n            row.rowData &&\n            row.rowData.length &&\n            typeof row.rowData[0] !== 'object' &&\n            this.headers &&\n            this.headers.length\n        ) {\n            while (row.rowData.length < this.headers.length) {\n                row.rowData.push('');\n            }\n        } else if (\n            row &&\n            row.rowData &&\n            row.rowData.length &&\n            typeof row.rowData[0] === 'object' &&\n            this.headers &&\n            this.headers.length\n        ) {\n            while (row.rowData.length < this.headers.length) {\n                row.rowData.push({\n                    displayText: ''\n                });\n            }\n        }\n    }\n\n    editClicked(row) {\n        this.editRowClicked.emit(row);\n    }\n\n    deleteClicked(row) {\n        this.deleteRowClicked.emit(row);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeComponent } from './tree.component';\nimport { TreeChildComponent } from './tree-child.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\n\n@NgModule({\n    declarations: [TreeComponent, TreeChildComponent],\n    imports: [CommonModule, ButtonModule, IconModule, PopoverModule, MenuModule],\n    exports: [TreeComponent, TreeChildComponent]\n})\nexport class TreeModule {}\n","export class TimeObject {\n    hour: number;\n    minute: number;\n    second: number;\n}\n","import { Injectable } from '@angular/core';\nimport { TimeObject } from '../../time/time-object';\n\nexport function TIME_FORMAT_FACTORY() {\n    return new TimeFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the time format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: TIME_FORMAT_FACTORY\n})\nexport abstract class TimeFormatParser {\n\n    /**\n     * Should take in a string value and return a Time object.\n     * @param value String to convert to a time object.\n     * @param meridian boolean to define if string should be treated as a meridian.\n     * @param displaySeconds boolean to define if string should display seconds.\n     */\n    abstract parse(value: string, displaySeconds: boolean, meridian?: boolean): TimeObject;\n\n    /**\n     * Should take in a time object and return a string representation.\n     * @param time TimeObject to convert to a string.\n     * @param meridian boolean to define if TimeObject should be treated as a meridian.\n     */\n    abstract format(time: TimeObject, meridian?: boolean): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class TimeFormatParserDefault extends TimeFormatParser {\n\n    /**\n     * Takes in a string representation of a date and returns a Time object.\n     * @param value String to convert to a time object.\n     * @param meridian boolean to define if string should be treated as a meridian.\n     * @param displaySeconds boolean to define if string should display seconds.\n     */\n    public parse(value: string, displaySeconds: boolean = true, meridian?: boolean): TimeObject {\n        const time = new TimeObject();\n        let regexp;\n        if (!meridian) {\n            if (displaySeconds) {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9])$/;\n            } else {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;\n            }\n            if (regexp.test(value)) {\n                const splitString = value.split(':');\n                time.hour = parseInt(splitString[0], 10);\n                time.minute = parseInt(splitString[1], 10);\n                if (displaySeconds) {\n                    time.second = parseInt(splitString[2], 10);\n                }\n                return time;\n            } else {\n                return null;\n            }\n        } else if (meridian) {\n            if (displaySeconds) {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9]) [APap][mM]$/;\n            } else {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9]) [APap][mM]$/;\n            }\n            if (regexp.test(value)) {\n                const period = value.split(' ')[1];\n\n                const splitString = value.split(':');\n                time.hour = parseInt(splitString[0], 10);\n                if (( period === 'pm' || period === 'PM' ) && time.hour < 12) {\n                    time.hour = time.hour + 12;\n                } else if ( (period === 'am' || period === 'AM') && time.hour === 12 ) {\n                    time.hour = 0;\n                }\n                time.minute = parseInt(splitString[1], 10);\n                if (displaySeconds) {\n                    time.second = parseInt(splitString[2], 10);\n                }\n                return time;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /**\n     * Takes in a time object and returns the string representation.\n     * @param time TimeObject to convert to a string.\n     * @param meridian boolean to define if TimeObject should be treated as a meridian.\n     */\n    public format(time: TimeObject, meridian?: boolean): string {\n        let formattedHour, formattedMinute, formattedSecond;\n        let formattedTime;\n        let formattedMeridian;\n        if (time.hour !== null) {\n            if (meridian) {\n                if (time.hour === 0) {\n                    formattedHour = 12;\n                    formattedMeridian = 'am';\n                } else if (time.hour > 12) {\n                    formattedHour = time.hour - 12;\n                    formattedMeridian = 'pm';\n                } else if (time.hour === 12) {\n                    formattedHour = 12;\n                    formattedMeridian = 'pm';\n                } else {\n                    formattedHour = time.hour;\n                    formattedMeridian = 'am';\n                }\n            } else {\n                formattedHour = time.hour;\n            }\n        }\n        if (time.minute !== null) {\n            formattedMinute = time.minute < 10 ? '0' + time.minute : time.minute;\n        }\n\n        if (time.second !== null) {\n            formattedSecond = time.second < 10 ? '0' + time.second : time.second;\n        }\n        if (formattedHour || formattedHour === 0) {\n            formattedTime = formattedHour;\n            if (formattedMinute || formattedMinute === '00') {\n                formattedTime = formattedTime + ':' + formattedMinute;\n                if (formattedSecond || formattedSecond === '00') {\n                    formattedTime = formattedTime + ':' + formattedSecond;\n                }\n            }\n        }\n        if (formattedMeridian && formattedTime) {\n            formattedTime += ' ' + formattedMeridian\n        }\n\n        return formattedTime;\n    }\n}\n","import { ChangeDetectorRef, Component, forwardRef, HostBinding, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { TimeObject } from '../time/time-object';\nimport { TimeComponent } from '../time/time.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimeFormatParser } from './format/time-parser';\n\n@Component({\n    selector: 'fd-time-picker',\n    templateUrl: './time-picker.component.html',\n    host: {\n        '(blur)': 'onTouched()',\n        class: 'fd-timepicker-custom'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimePickerComponent),\n            multi: true\n        }\n    ],\n    styleUrls: ['./time-picker.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnInit {\n\n    /** @hidden */\n    @HostBinding('class.fd-time-picker')\n    timepickerclass = true;\n\n    /**\n     * @Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),\n     * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:\n     *\n     * ```json\n     * { hour: 12, minute: 0, second: 0 }\n     * ```\n     */\n    @Input()\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @Input Uses compact time picker. */\n    @Input()\n    compact: boolean = false;\n\n    /** @Input When set to true, uses the 24 hour clock (hours ranging from 0 to 23)\n     * and does not display a period control. */\n    @Input()\n    meridian: boolean = false;\n\n    /** @Input Disables the component. */\n    @Input()\n    disabled: boolean;\n\n    /** @Input When set to false, hides the buttons that increment and decrement the corresponding input. */\n    @Input()\n    spinners: boolean = true;\n\n    /** @Input When set to false, hides the input for seconds. */\n    @Input()\n    displaySeconds: boolean = true;\n\n    /** @Input When set to false, hides the input for minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /** @Input When set to false, hides the input for hours. */\n    @Input()\n    displayHours: boolean = true;\n\n    /** Whether to perform visual validation on the picker input. */\n    @Input()\n    validate: boolean = true;\n\n    /** Aria label for the time picker input. */\n    @Input()\n    timePickerInputLabel: string = 'Time picker input';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** @hidden Whether the input time is valid. Internal use. */\n    isInvalidTimeInput: boolean = false;\n\n    /** @hidden */\n    @ViewChild(TimeComponent)\n    child: TimeComponent;\n\n    /** @hidden */\n    period: string;\n\n    /** @hidden */\n    isOpen: boolean;\n\n    /** @hidden */\n    placeholder: string;\n\n    /** @hidden */\n    onChange: Function = () => {};\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.placeholder = this.getPlaceholder();\n    }\n\n    /**\n     * Returns the current value of the time input.\n     */\n    getTime(): TimeObject {\n        return this.time;\n    }\n\n    /** @hidden */\n    getFormattedTime(): string {\n        const formattedTime = this.timeAdapter.format(this.time, this.meridian);\n        return formattedTime !== undefined ? formattedTime : '';\n    }\n\n    /** @hidden */\n    timeInputChanged(timeFromInput) {\n        const time = this.timeAdapter.parse(timeFromInput, this.displaySeconds, this.meridian);\n        if (time) {\n            this.isInvalidTimeInput = false;\n            this.child.setDisplayedHour();\n            this.time = Object.assign(this.time, time);\n            this.onChange(time);\n        } else {\n            if (this.allowNull && timeFromInput === '') {\n                this.isInvalidTimeInput = false;\n                this.child.setDisplayedHour();\n                this.onChange({hour: null, minutes: null, seconds: null});\n            } else {\n                this.isInvalidTimeInput = true;\n            }\n        }\n    }\n\n    /** @hidden */\n    inputGroupClicked($event) {\n        if (!this.isOpen && !this.disabled) {\n            $event.stopPropagation();\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    onFocusHandler() {\n        if (!this.isOpen) {\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    addOnButtonClicked() {\n        if (!this.disabled) {\n            this.isOpen = !this.isOpen;\n        }\n    }\n\n    /** @hidden */\n    popoverClosed() {\n        this.isOpen = false;\n    }\n\n    /** @hidden */\n    getPlaceholder(): string {\n        let retVal;\n        if (this.displaySeconds) {\n            if (this.meridian) {\n                retVal = 'hh' + ':' + 'mm' + ':' + 'ss am/pm';\n            } else {\n                retVal = 'hh' + ':' + 'mm' + ':' + 'ss';\n            }\n        } else {\n            if (this.meridian) {\n                retVal = 'hh' + ':' + 'mm' + ' am/pm';\n            } else {\n                retVal = 'hh' + ':' + 'mm';\n            }\n        }\n\n        return retVal;\n    }\n\n    /** @hidden */\n    timeFromTimeComponentChanged() {\n        this.cd.detectChanges();\n        this.onChange(this.time);\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (time: TimeObject) => void): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(time: TimeObject): void {\n        if (!time) {\n            return;\n        }\n        this.time = time;\n    }\n\n    /** @hidden */\n    constructor(private cd: ChangeDetectorRef,\n                public timeAdapter: TimeFormatParser) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { InputGroupModule } from '../input-group/input-group.module';\nimport { TimeModule } from '../time/time.module';\n\nimport { TimePickerComponent } from './time-picker.component';\n\n\n@NgModule({\n    declarations: [TimePickerComponent],\n    imports: [CommonModule, FormsModule, PopoverModule, InputGroupModule, TimeModule],\n    exports: [TimePickerComponent]\n})\nexport class TimePickerModule {}\n","import { Component, ElementRef, EventEmitter, forwardRef, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet toggleUniqueId: number = 0;\n\n/**\n * The Toggle component is used to activate or deactivate an element.\n * It uses a visual metaphor to inform the user of the state of the toggle.\n */\n@Component({\n    selector: 'fd-toggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ToggleComponent),\n            multi: true\n        }\n    ],\n    host: {\n        class: 'fd-form__item fd-form__item--check fd-toggle-custom',\n        '[attr.id]': 'id',\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ToggleComponent implements OnInit, ControlValueAccessor {\n    /** @hidden */\n    @ViewChild('input')\n    inputElement: ElementRef<HTMLInputElement>;\n\n    /**\n     * The size of the toggle.\n     * Can be one of the four *xs*, *s*, *l*, *error* or default.\n     */\n    @Input()\n    size: string;\n\n    /** Whether the toggle is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Id for the toggle component. If omitted, a unique one is generated. */\n    @Input()\n    id: string = 'fd-toggle-' + toggleUniqueId++;\n\n    /** Whether the toggle is checked. */\n    @Input()\n    checked: boolean = false;\n\n    /** aria-label attribute of the inner input element. */\n    @Input()\n    ariaLabel: string = null;\n\n    /** aria-labelledby attribute of the inner input element. */\n    @Input()\n    ariaLabelledby: string = null;\n\n    /**\n     * Event fired when the state of the toggle changes.\n     * *$event* can be used to retrieve the new state of the toggle.\n     */\n    @Output()\n    readonly checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.size && this.size !== 'xs' && this.size !== 's' && this.size !== 'l') {\n            this.size = null;\n        }\n    }\n\n    /** Set focus on the input element. */\n    public focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /** Get the id of the inner input element of the toggle. */\n    get innerInputId(): string {\n        return `${this.id}-input`;\n    }\n\n    /** Get the isChecked property of the toggle. */\n    get isChecked() {\n        return this.checked;\n    }\n\n    /** Set the isChecked property of the toggle. */\n    set isChecked(value) {\n        this.checked = value;\n        this.onChange(value);\n        this.onTouched();\n        this.checkedChange.emit(value);\n    }\n\n    /**\n     * @hidden\n     * @param value Sets the value of the *checked* property of the toggle.\n     */\n    writeValue(value: any) {\n        this.checked = value;\n    }\n\n    /**\n     * @hidden\n     * @param fn User defined function that handles the *onChange* event of the toggle.\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /**\n     * @hidden\n     * @param fn User defined function that handles the *onTouch* event of the toggle.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @hidden\n     * @param isDisabled Sets the value of the *disabled* property of the toggle.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToggleComponent } from './toggle.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [ToggleComponent],\n    imports: [CommonModule, FormsModule],\n    exports: [ToggleComponent]\n})\nexport class ToggleModule {}\n","import { Directive, EmbeddedViewRef, HostBinding, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive which is used along with input elements, inside the localization editor item or main.\n *  ```html\n *  <fd-localization-editor-item>\n *      <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-input]'\n})\nexport class LocalizationEditorInputDirective {\n\n    /**\n     * @hidden\n     *  Variable is controlled by parent component and define if there should be used compact mode\n     * */\n    @HostBinding('class.fd-input--compact')\n    public compact: boolean;\n}\n\n/**\n * Directive which is used along with textarea elements, inside the localization editor item or main.\n *  ```html\n *  <fd-localization-editor-item>\n *      <textarea fd-localization-editor-input placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-textarea]',\n})\nexport class LocalizationEditorTextareaDirective {\n\n    /**\n     * @hidden\n     *  Variable is controlled by parent component and define if there should be used compact mode\n     * */\n    @HostBinding('class.fd-input--compact')\n    public compact: boolean;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.fd-localization-editor-textarea')\n    public fdLocalizationEditorTextareaClass: boolean = true;\n}\n\n/**\n * Directive which is used to add complex content, which will be displayed in the add-on space.\n *  ```html\n *  <fd-localization-editor-item>\n *      <ng-template fd-localization-editor-label>\n *          <fd-icon [glyph]=\"field.glyph\"></fd-icon>\n *      </ng-template>\n *      <textarea fd-localization-editor-input placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-label]',\n})\nexport class LocalizationEditorLabel {}\n\n/**\n * Directive that is used to wrap whole localization field inside li element.\n *  ```html\n *  <li fd-localization-editor-element>\n *      <fd-localization-editor-item>\n *          <textarea fd-localization-editor-input placeholder=\"EN\">\n *      </fd-localization-editor-item>\n *  </li>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-element]',\n})\nexport class LocalizationEditorElement {}\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-load-label]'\n})\nexport class LocalizationEditorLoadLabel implements OnInit {\n    /** @hidden */\n    @Input('fd-localization-editor-load-label')\n    content: TemplateRef<any>;\n\n    /** @hidden */\n    private contentRef: EmbeddedViewRef<any>;\n\n    /** @hidden */\n    constructor(private viewRef: ViewContainerRef) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnInit,\n    TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    LocalizationEditorInputDirective,\n    LocalizationEditorLabel,\n    LocalizationEditorTextareaDirective\n} from '../localization-editor.directives';\n\n/**\n *  Component that represents field with add-on.\n *  ```html\n *  <fd-localization-editor-item [label]=\"'EN'\">\n *      <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor-item',\n    templateUrl: './localization-editor-item.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorItemComponent implements OnInit, AfterContentInit, OnChanges {\n\n    /** @hidden */\n    type: string;\n\n    /** The text for the add-on on the right side. */\n    @Input()\n    label: string;\n\n    /** Whether to apply compact mode to to field. */\n    @Input()\n    compact: boolean;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorInputDirective)\n    input: LocalizationEditorInputDirective;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorTextareaDirective)\n    textarea: LocalizationEditorTextareaDirective;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorLabel, { read: TemplateRef })\n    labelTemplate: TemplateRef<any>;\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.refreshChildInput();\n    }\n\n    ngOnChanges(): void {\n        this.refreshChildInput();\n    }\n\n    ngAfterContentInit(): void {\n        if (this.textarea) {\n            this.type = 'textarea';\n        }\n    }\n\n    private refreshChildInput(): void {\n        if (this.input) {\n            this.input.compact = this.compact;\n        }\n        if (this.textarea) {\n            this.textarea.compact = this.compact;\n        }\n    }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { LocalizationEditorItemComponent } from '../localization-editor-item/localization-editor-item.component';\n\n/**\n *  Component that represents the field which is always visible and is rendered outside the popover.\n *  ```html\n *  <fd-localization-editor-main [label]=\"'EN'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-main>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor-main',\n    templateUrl: './localization-editor-main.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorMainComponent extends LocalizationEditorItemComponent {\n\n    /**\n     * @hidden\n     * This variable is controlled by parent component\n     * */\n    expanded: boolean;\n}\n","import { Component, ContentChild, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Placement } from 'popper.js';\nimport { LocalizationEditorMainComponent } from './localization-editor-main/localization-editor-main.component';\n\n/**\n *  The component that represents a list of fields with add-ons inside popover\n *  ```html\n * <fd-localization-editor>\n *    <fd-localization-editor-main [label]=\"'EN'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *    </fd-localization-editor-main>\n *    <fd-localization-editor-item [label]=\"'DE'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"DE\">\n *    </fd-localization-editor-item>\n * </fd-localization-editor>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor',\n    templateUrl: './localization-editor.component.html',\n    styleUrls: ['localization-editor.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-localization-editor')\n    fdLocalizationEditorClass: boolean = true;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorMainComponent)\n    mainElement: LocalizationEditorMainComponent;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Whether to disable opening. */\n    @Input()\n    disabled: boolean;\n\n    /** Whether the inputs are in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * @hidden\n     * Event handled always, when the popup is opened or closed.\n     */\n    public handleOpenChange(opened: boolean): void {\n        if (this.mainElement) {\n            this.mainElement.expanded = opened;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LocalizationEditorComponent } from './localization-editor.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { FormModule } from '../form/form.module';\nimport { InputGroupModule } from '../input-group/input-group.module';\nimport { MenuModule } from '../menu/menu.module';\nimport {\n    LocalizationEditorInputDirective,\n    LocalizationEditorLabel,\n    LocalizationEditorElement,\n    LocalizationEditorLoadLabel,\n    LocalizationEditorTextareaDirective\n} from './localization-editor.directives';\nimport { LocalizationEditorMainComponent } from './localization-editor-main/localization-editor-main.component';\nimport { LocalizationEditorItemComponent } from './localization-editor-item/localization-editor-item.component';\n\n@NgModule({\n    declarations: [\n        LocalizationEditorComponent,\n        LocalizationEditorMainComponent,\n        LocalizationEditorItemComponent,\n        LocalizationEditorInputDirective,\n        LocalizationEditorLabel,\n        LocalizationEditorLoadLabel,\n        LocalizationEditorTextareaDirective,\n        LocalizationEditorElement\n    ],\n    exports: [\n        LocalizationEditorComponent,\n        LocalizationEditorItemComponent,\n        LocalizationEditorMainComponent,\n        LocalizationEditorInputDirective,\n        LocalizationEditorLabel,\n        LocalizationEditorLoadLabel,\n        LocalizationEditorTextareaDirective,\n        LocalizationEditorElement\n    ],\n    imports: [CommonModule, PopoverModule, FormModule, InputGroupModule, MenuModule]\n})\nexport class LocalizationEditorModule {}\n","import { Component, ViewEncapsulation } from '@angular/core';\n/**\n *  Component represents mega menu element, which contains list with menu items, links, sublists, subitems and sublinks..\n *  ```html\n *  <fd-mega-menu>\n *      <ul fd-mega-menu-list>\n *          <fd-mega-menu-item>\n *              <a fd-mega-menu-link>Item 0</a>\n *              <li fd-mega-menu-subitem>\n *                 <a fd-mega-menu-sublink>Sub Item 1</a>\n *            </li>\n *              <li fd-mega-menu-subitem>\n *                <a fd-mega-menu-sublink>Sub Item 2</a>\n *           </li>\n *             <li fd-mega-menu-subitem>\n *                  <a fd-mega-menu-sublink>Sub Item 3</a>\n *             </li>\n *          </fd-mega-menu-item>\n *      </ul>\n *  </fd-mega-menu>\n *  ```\n * */\n@Component({\n    selector: 'fd-mega-menu',\n    templateUrl: './mega-menu.component.html',\n    styleUrls: ['./mega-menu.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MegaMenuComponent {}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n/**\n *  Directive represents mega menu sub link.\n *  ```html\n * <a fd-mega-menu-sublink href=\"#\">Link</a>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-mega-menu-sublink]',\n    host: {\n        'tabindex': '0'\n    }\n})\nexport class MegaMenuSublinkDirective {\n    /** @hidden */\n    @HostBinding('class.fd-mega-menu__sublink')\n    fdMegaMenuClass: boolean = true;\n\n    /** @hidden */\n    constructor (public itemEl: ElementRef) {}\n\n    public focus(): void {\n        this.itemEl.nativeElement.focus();\n    }\n\n    public click(): void {\n        this.itemEl.nativeElement.click();\n    }\n}\n","import { ContentChild, Directive, EventEmitter, HostBinding, HostListener, Output } from '@angular/core';\nimport { DefaultMenuItem } from '../menu/default-menu-item';\nimport { MegaMenuSublinkDirective } from './mega-menu-sublink.directive';\n\n/**\n *  Directive represents mega menu subitem, which can contain sublink.\n *  ```html\n * <li fd-mega-menu-subitem>\n *      <a fd-mega-menu-sublink>Sub Item 2</a>\n * </li>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-mega-menu-subitem]'\n})\nexport class MegaMenuSubitemDirective implements DefaultMenuItem {\n    /** @hidden */\n    @HostBinding('class.fd-mega-menu__subitem')\n    fdMegaMenuClass: boolean = true;\n\n    /** @hidden */\n    @ContentChild(MegaMenuSublinkDirective)\n    link: MegaMenuSublinkDirective;\n\n    /** */\n    @Output()\n    readonly keyDown: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();\n\n    /** @hidden */\n    @HostListener('keydown', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent) {\n        this.keyDown.emit(event);\n    }\n\n    /** @hidden */\n    public focus(): void {\n        this.link.focus();\n    }\n\n    /** @hidden */\n    public click(): void {\n        this.link.click();\n    }\n}\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\n\n/**\n *  Directive represents mega menu link.\n *  ```html\n * <a fd-mega-menu-link href=\"#\">Link</a>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-mega-menu-link]',\n    host: {\n        'tabindex': '0'\n    }\n})\nexport class MegaMenuLinkDirective {\n    /** @hidden */\n    @HostBinding('class.fd-mega-menu__link')\n    fdMegaMenuClass: boolean = true;\n\n    /** @hidden */\n    @Input()\n    @HostBinding('class.has-child')\n    @HostBinding('attr.aria-haspopup')\n    hasChild: boolean = false;\n\n    /** @hidden */\n    @Input()\n    @HostBinding('attr.aria-expanded')\n    isExpanded: boolean = false;\n\n    /** @hidden */\n    constructor (public itemEl: ElementRef) {}\n\n    public focus(): void {\n        this.itemEl.nativeElement.focus();\n    }\n\n    public click(): void {\n        this.itemEl.nativeElement.click();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { MegaMenuSubitemDirective } from '../mega-menu-subitem.directive';\nimport { MegaMenuLinkDirective } from '../mega-menu-link/mega-menu-link.directive';\nimport { MenuKeyboardService } from '../../menu/menu-keyboard.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultMenuItem } from '../../menu/default-menu-item';\n\nexport type MenuSubListPosition = 'left' | 'right';\n\n/**\n *  Component represents mega menu item, which contains subitems and link.\n *  ```html\n *  <fd-mega-menu-item>\n *      <a fd-mega-menu-link>Item 0</a>\n *      <li fd-mega-menu-subitem>\n *          <a fd-mega-menu-sublink>Sub Item 1</a>\n *      </li>\n *      <li fd-mega-menu-subitem>\n *          <a fd-mega-menu-sublink>Sub Item 2</a>\n *      </li>\n *      <li fd-mega-menu-subitem>\n *          <a fd-mega-menu-sublink>Sub Item 3</a>\n *      </li>\n *  </fd-mega-menu-item>\n *  ```\n * */\n@Component({\n    selector: 'fd-mega-menu-item',\n    templateUrl: './mega-menu-item.component.html',\n    styleUrls: ['./mega-menu-item.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MegaMenuItemComponent implements AfterContentInit, OnDestroy, DefaultMenuItem {\n\n    /** @hidden */\n    @ContentChildren(MegaMenuSubitemDirective)\n    subItems: QueryList<MegaMenuSubitemDirective>;\n\n    /** @hidden */\n    @ContentChild(MegaMenuLinkDirective)\n    link: MegaMenuLinkDirective;\n\n    /** @hidden */\n    @ViewChild('subList')\n    subList: ElementRef;\n\n    /** @hidden */\n    @ViewChild('parentElement')\n    parentElement: ElementRef;\n\n    /**  Event thrown, when there is some keyboard event detected on mega menu item */\n    @Output()\n    readonly keyDown: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();\n\n    /** An RxJS Subject that will kill the data stream upon componentâs destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** Variable that specifies if the sublist menu is opened. */\n    @Input()\n    open: boolean = false;\n\n    /** Defines what should be position for sublist */\n    @Input()\n    subListPosition: MenuSubListPosition = 'right';\n\n    /** Event that is thrown always, when the open variable is changed */\n    @Output()\n    readonly openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** @hidden */\n    constructor(\n        private elRef: ElementRef,\n        private menuKeyboardService: MenuKeyboardService,\n        private changeDetectionRef: ChangeDetectorRef\n    ) {}\n\n    /** @hidden */\n    @HostListener('keydown', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent): void {\n        switch (event.code) {\n            case ('ArrowLeft'): {\n                this.closeSubList();\n                this.link.focus();\n                break;\n            }\n            case ('ArrowRight'):\n            case ('Space'):\n            case ('Enter'): {\n                this.openSubList();\n                this.changeDetectionRef.detectChanges();\n                if (this.subItems.first) {\n                    this.subItems.first.focus();\n                }\n                event.preventDefault();\n                break;\n            }\n            default: {\n                this.keyDown.emit(event);\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    clickHandler(event): void {\n        /** Check if click wasn't inside the component, then close. */\n        if (!this.elRef.nativeElement.contains(event.target)) {\n            this.closeSubList();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('window:resize')\n    onResize(): void {\n        if (this.open && this.isSubListPositionRight()) {\n            this.changeDetectionRef.detectChanges();\n            let distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;\n\n            /**\n             * When the page is resized and the menu sub list goes beyond the page,\n             * the sub list should go over the parent list\n             */\n            while (distanceFromCorner > window.innerWidth && this.getLeftPropertyFromSubList() > 1) {\n                this.subList.nativeElement.style.left = (this.getLeftPropertyFromSubList() - 1) + '%';\n                this.changeDetectionRef.detectChanges();\n                distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;\n            }\n\n            /**\n             * When the page is resized and the menu sub list was pulled over parent list,\n             * the sub list should go to right side of parent list\n             */\n            while (distanceFromCorner < window.innerWidth && this.getLeftPropertyFromSubList() < 100) {\n                this.subList.nativeElement.style.left = (this.getLeftPropertyFromSubList() + 1) + '%';\n                this.changeDetectionRef.detectChanges();\n                distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;\n            }\n        }\n    }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        this.link.hasChild = this.subItems.length > 0;\n        this.subItems.forEach((item: MegaMenuSubitemDirective, index: number) => item.keyDown\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((keyboardEvent: KeyboardEvent) => this.handleSubListKeyDown(keyboardEvent, index)))\n        ;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /**\n     * Keyboard events handler from sublist, the event doesn't propagate upper, when it was ArrowDown or ArrowUp.\n     * It prevents from changing focus to item on primary menu list\n     */\n    handleSubListKeyDown(event: KeyboardEvent, index: number): void {\n        this.menuKeyboardService.keyDownHandler(event, index, this.subItems.toArray());\n        if (event.code === 'ArrowDown' || event.code === 'ArrowUp') {\n            event.stopPropagation();\n        }\n    }\n\n    /** @hidden */\n    click(): void {\n        this.link.click();\n    }\n\n    /** @hidden */\n    focus(): void {\n        this.link.focus();\n    }\n\n    /** Method that informs if actual position of sublist is set to right */\n    public isSubListPositionRight(): boolean {\n        return this.subListPosition === 'right';\n    }\n\n    /** Method that changes state of open variable */\n    public toggleOpen(): void {\n        if (this.open) {\n            this.closeSubList()\n        } else {\n            this.openSubList();\n        }\n    }\n\n    /** Method that closes sublist */\n    public closeSubList(): void {\n        this.open = false;\n        this.link.isExpanded = this.isShow();\n        this.openChange.emit(this.open);\n    }\n\n    /** Method that opens sublist */\n    public openSubList(): void {\n        this.open = true;\n        this.link.isExpanded = this.isShow();\n        this.openChange.emit(this.open);\n        this.onResize();\n    }\n\n    /** Method that gives information if the sublist should behave like it is opened. */\n    public isShow(): boolean {\n        return this.open && this.subItems.length > 0;\n    }\n\n    /** Method that helps with the responsive support. Gives percentage number of left css attribute on list. */\n    private getLeftPropertyFromSubList(): number {\n        const styles = getComputedStyle(this.subList.nativeElement);\n        if (styles.left) {\n            if (styles.left.includes('px')) {\n                return Number(styles.left.split('px')[0]) / this.parentElement.nativeElement.offsetWidth * 100;\n            } else if (styles.left.includes('%')) {\n                return Number(styles.left.split('%')[0])\n            }\n        } else {\n            return 100;\n        }\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    HostBinding,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { MegaMenuItemComponent } from '../mega-menu-item/mega-menu-item.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MenuKeyboardService } from '../../menu/menu-keyboard.service';\n\n/**\n *  Directive represents mega menu list, which contains items.\n *  ```html\n *  <ul fd-mega-menu-list>\n *      <fd-mega-menu-item>\n *          <a fd-mega-menu-link>Item 0</a>\n *          <li fd-mega-menu-subitem>\n *              <a fd-mega-menu-sublink>Sub Item 1</a>\n *          </li>\n *          <li fd-mega-menu-subitem>\n *              <a fd-mega-menu-sublink>Sub Item 2</a>\n *          </li>\n *          <li fd-mega-menu-subitem>\n *              <a fd-mega-menu-sublink>Sub Item 3</a>\n *          </li>\n *      </fd-mega-menu-item>\n *  </ul>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-mega-menu-list]'\n})\nexport class MegaMenuListDirective implements AfterContentInit, OnDestroy {\n\n    /** @hidden */\n    @HostBinding('class.fd-mega-menu__list')\n    fdMegaMenuClass: boolean = true;\n\n    /** @hidden */\n    @ContentChildren(MegaMenuItemComponent)\n    items: QueryList<MegaMenuItemComponent>;\n\n    /** An RxJS Subject that will kill the data stream upon componentâs destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** @hidden */\n    constructor(\n        private menuKeyboardService: MenuKeyboardService,\n    ) {}\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        this.items.forEach((item: MegaMenuItemComponent, index: number) => item.keyDown\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((keyboardEvent: KeyboardEvent) => this.handleListKeyDown(keyboardEvent, index)))\n        ;\n    }\n\n    /** Method that provides handles keydown events from menu item list */\n    handleListKeyDown(event: KeyboardEvent, index: number): void {\n        this.menuKeyboardService.keyDownHandler(event, index, this.items.toArray());\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n *  Component represents mega menu group, which contains list with menu items.\n *  ```html\n *  <fd-mega-menu-group>\n *      <h3 fd-mega-menu-title>Title 1</h3>\n *      <ul fd-mega-menu-list>\n *          <fd-mega-menu-item>\n *              <a fd-mega-menu-link>Item 0</a>\n *              <li fd-mega-menu-subitem>\n *                 <a fd-mega-menu-sublink>Sub Item 1</a>\n *            </li>\n *              <li fd-mega-menu-subitem>\n *                <a fd-mega-menu-sublink>Sub Item 2</a>\n *           </li>\n *             <li fd-mega-menu-subitem>\n *                  <a fd-mega-menu-sublink>Sub Item 3</a>\n *             </li>\n *          </fd-mega-menu-item>\n *      </ul>\n *  </fd-mega-menu-group>\n *  ```\n * */\n@Component({\n    selector: 'fd-mega-menu-group',\n    templateUrl: './mega-menu-group.component.html',\n    encapsulation: ViewEncapsulation.None\n\n})\nexport class MegaMenuGroupComponent {}\n","import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-mega-menu-title]',\n})\nexport class MegaMenuTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-mega-menu__title')\n    fdMegaMenuTitleClass: boolean = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MegaMenuComponent } from './mega-menu.component';\nimport { MegaMenuItemComponent } from './mega-menu-item/mega-menu-item.component';\nimport { MegaMenuSubitemDirective } from './mega-menu-subitem.directive';\nimport { MegaMenuSublinkDirective } from './mega-menu-sublink.directive';\nimport { MenuKeyboardService } from '../menu/menu-keyboard.service';\nimport { MegaMenuListDirective } from './mega-menu-list/mega-menu-list.directive';\nimport { MegaMenuLinkDirective } from './mega-menu-link/mega-menu-link.directive';\nimport { MegaMenuGroupComponent } from './mega-menu-group/mega-menu-group.component';\nimport { MegaMenuTitleDirective } from './mega-menu-title/mega-menu-title.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [MegaMenuComponent, MegaMenuListDirective, MegaMenuItemComponent, MegaMenuSubitemDirective,\n        MegaMenuSublinkDirective, MegaMenuLinkDirective, MegaMenuGroupComponent, MegaMenuTitleDirective],\n    exports: [\n        MegaMenuComponent,\n        MegaMenuLinkDirective,\n        MegaMenuItemComponent,\n        MegaMenuSubitemDirective,\n        MegaMenuListDirective,\n        MegaMenuSublinkDirective,\n        MegaMenuGroupComponent,\n        MegaMenuTitleDirective\n    ],\n    providers: [MenuKeyboardService]\n})\nexport class MegaMenuModule {}\n","import {NgModule} from '@angular/core';\nimport {ActionBarModule} from './action-bar/action-bar.module';\nimport {AlertModule} from './alert/alert.module';\nimport {AlertService} from './alert/alert-service/alert.service';\nimport {BadgeLabelModule} from './badge-label/badge-label.module';\nimport {BreadcrumbModule} from './breadcrumb/breadcrumb.module';\nimport {ButtonModule} from './button/button.module';\nimport {ButtonGroupModule} from './button-group/button-group.module';\nimport {CalendarModule} from './calendar/calendar.module';\nimport {ComboboxModule} from './combobox/combobox.module';\nimport {DatePickerModule} from './date-picker/date-picker.module';\nimport {DatetimePickerModule} from './datetime-picker/datetime-picker.module';\nimport {FileInputModule} from './file-input/file-input.module';\nimport {FormModule} from './form/form.module';\nimport {IconModule} from './icon/icon.module';\nimport {IdentifierModule} from './identifier/identifier.module';\nimport {ImageModule} from './image/image.module';\nimport {InfiniteScrollModule} from './infinite-scroll/infinite-scroll.module';\nimport {InlineHelpModule} from './inline-help/inline-help.module';\nimport {InputGroupModule} from './input-group/input-group.module';\nimport {ListModule} from './list/list.module';\nimport {LoadingSpinnerModule} from './loading-spinner/loading-spinner.module';\nimport {MenuModule} from './menu/menu.module';\nimport {ModalModule} from './modal/modal.module';\nimport {ModalService} from './modal/modal-service/modal.service';\nimport {MultiInputModule} from './multi-input/multi-input.module';\nimport {PaginationModule} from './pagination/pagination.module';\nimport {PanelModule} from './panel/panel.module';\nimport {PopoverModule} from './popover/popover.module';\nimport {ScrollSpyModule} from './scroll-spy/scroll-spy.module';\nimport {SearchInputModule} from './search-input/search-input.module';\nimport {ShellbarModule} from './shellbar/shellbar.module';\nimport {SideNavigationModule} from './side-navigation/side-navigation.module';\nimport {SelectModule} from './select/select.module';\nimport {SplitButtonModule} from './split-button/split-button.module';\nimport {TableModule} from './table/table.module';\nimport {TabsModule} from './tabs/tabs.module';\nimport {TileModule} from './tile/tile.module';\nimport {TreeModule} from './tree/tree.module';\nimport {TimeModule} from './time/time.module';\nimport {TimePickerModule} from './time-picker/time-picker.module';\nimport {ToggleModule} from './toggle/toggle.module';\nimport {TokenModule} from './token/token.module';\n\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {LocalizationEditorModule} from './localizator-editor/localization-editor.module';\nimport { MegaMenuModule } from './mega-menu/mega-menu.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  exports: [\n    ActionBarModule,\n    AlertModule,\n    BadgeLabelModule,\n    BreadcrumbModule,\n    ButtonModule,\n    ButtonGroupModule,\n    CalendarModule,\n    ComboboxModule,\n    DatePickerModule,\n    DatetimePickerModule,\n    FileInputModule,\n    FormModule,\n    IconModule,\n    IdentifierModule,\n    ImageModule,\n    InlineHelpModule,\n    IdentifierModule,\n    InfiniteScrollModule,\n    InputGroupModule,\n    ListModule,\n    LoadingSpinnerModule,\n    LocalizationEditorModule,\n    MenuModule,\n    MegaMenuModule,\n    ModalModule,\n    MultiInputModule,\n    PaginationModule,\n    PanelModule,\n    PopoverModule,\n    ScrollSpyModule,\n    SearchInputModule,\n    SelectModule,\n    ShellbarModule,\n    SideNavigationModule,\n    SplitButtonModule,\n    TableModule,\n    TabsModule,\n    TileModule,\n    TimeModule,\n    TimePickerModule,\n    ToggleModule,\n    TokenModule,\n    TreeModule,\n  ],\n  providers: [AlertService, ModalService],\n})\nexport class FundamentalNgxCoreModule {\n\n}\n","export abstract class DefaultMenuItem {\n    abstract focus(): void;\n    abstract click(): void;\n}\n","/**\n * Represents the positioning of the modal on the screen.\n */\nexport class ModalPosition {\n\n    /** Value of the modal's top position. */\n    top?: string;\n\n    /** Value of the modal's bottom position. */\n    bottom?: string;\n\n    /** Value of the modal's left position. */\n    left?: string;\n\n    /** Value of the modal's right position. */\n    right?: string;\n}\n"]}