!function(){function e(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function n(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function t(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}function o(e,n){return(o=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function l(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var t,o=i(e);if(n){var l=i(this).constructor;t=Reflect.construct(o,arguments,l)}else t=o.apply(this,arguments);return a(this,t)}}function a(e,n){return!n||"object"!=typeof n&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,n){if(!e)return;if("string"==typeof e)return r(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return r(e,n)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{"46OY":function(n,a,i){"use strict";i.r(a),i.d(a,"PlatformUploadCollectionDocsModule",function(){return ue});var r={};i.r(r),i.d(r,"default",function(){return x});var c={};i.r(c),i.d(c,"default",function(){return U});var s={};i.r(s),i.d(s,"default",function(){return S});var m={};i.r(m),i.d(m,"default",function(){return E});var p={};i.r(p),i.d(p,"default",function(){return P});var u={};i.r(u),i.d(u,"default",function(){return w});var f={};i.r(f),i.d(f,"default",function(){return C});var h={};i.r(h),i.d(h,"default",function(){return _});var b={};i.r(b),i.d(b,"default",function(){return T});var g=i("tyNb"),I=i("PUim"),v=i("IywY"),y=i("jzzn"),F=i("t9W5"),x="import { HttpClient } from '@angular/common/http';\nimport { merge, Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\nimport { uuidv4 } from '@fundamental-ngx/core/utils';\nimport {\n    CancelUploadNewFileEvent,\n    DeleteEvent,\n    DownloadEvent,\n    FileRenamedEvent,\n    MoveToEvent,\n    NewFolderEvent,\n    UpdateVersionEvent,\n    UploadCollectionDataProvider,\n    UploadCollectionFile,\n    UploadCollectionFolder,\n    UploadCollectionItem,\n    UploadCollectionItemStatus,\n    UploadCollectionNewItem,\n    UploadEvent\n} from '@fundamental-ngx/platform/upload-collection';\n\nimport { generateUploadCollectionItems } from './platform-upload-collection-items-generator';\n\nexport class PlatformUploadCollectionDataProviderExample extends UploadCollectionDataProvider {\n    items: UploadCollectionItem[] = generateUploadCollectionItems(50, 4, 2);\n    private _cancelUploadNewFileIds: (string | number)[] = [];\n\n    constructor(private readonly _http: HttpClient) {\n        super();\n    }\n\n    /** The method is triggered when valid files are selected in the file uploader dialog. */\n    upload({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('upload', parentFolderId, items);\n\n        const newFiles: UploadCollectionNewItem[] = items.map((item) => {\n            delete item.file;\n            item.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n            return {\n                temporaryDocumentId: item.documentId,\n                item: item\n            };\n        });\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, newFiles);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const ids = newFiles\n                    .filter((file) => {\n                        const includes = this._cancelUploadNewFileIds.includes(file.item.documentId);\n                        if (includes) {\n                            this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter(\n                                (id) => id !== file.item.documentId\n                            );\n                            return true;\n                        }\n\n                        return false;\n                    })\n                    .map((file) => file.item.documentId);\n\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids, updatedItems);\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Download button is pressed. */\n    download(data: DownloadEvent): Observable<void> {\n        console.log('download', data);\n\n        const obs = data.items.map((file) => {\n            return this._http.get(file.url, { responseType: 'blob' }).pipe(map(blob => ({\n                blob: blob,\n                file: file\n            })));\n        });\n\n        return merge(...obs).pipe(map(({ file, blob }) => {\n            const a = document.createElement('a');\n            const objectUrl = URL.createObjectURL(blob);\n            a.href = objectUrl;\n            a.download = file.name;\n            a.click();\n            URL.revokeObjectURL(objectUrl);\n\n            return null;\n        }));\n    }\n\n    /**\n     * The method is triggered when Move to button is pressed and folder to move is selected in the dialog modal.\n     * Should return full dataSource\n     * */\n    moveTo({ from, to, items, newFolder }: MoveToEvent): Observable<UploadCollectionItem[]> {\n        console.log('moveTo', from, to, items, newFolder);\n\n        const ids = items.map((item) => item.documentId);\n\n        this._findParentFolderAndRemoveItemsByIds(from ? from.documentId : null, ids);\n        if (newFolder) {\n            const folder = this._generateNewFolder(newFolder.folderName);\n\n            this._findParentFolderAndAddFiles(newFolder.parentFolderId, [folder]);\n            this._findParentFolderAndAddFiles(folder.documentId, items);\n        } else {\n            this._findParentFolderAndAddFiles(to ? to.documentId : null, items);\n        }\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Delete button is pressed. */\n    delete({ parentFolderId, items }: DeleteEvent): Observable<UploadCollectionItem[]> {\n        console.log('delete', parentFolderId, items);\n\n        const ids = items.map((item) => item.documentId);\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when the file name is changed. */\n    fileRenamed({ parentFolderId, item, fileName }: FileRenamedEvent): Observable<UploadCollectionItem[]> {\n        console.log('fileRenamed', parentFolderId, item, fileName);\n        let updatedItem = {\n            ...item,\n            name: fileName,\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = item.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...updatedItem };\n                    updatedItem.name = item.name;\n                    updatedItem.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when the new folder added. */\n    newFolder({ parentFolderId, folder }: NewFolderEvent): Observable<UploadCollectionItem[]> {\n        console.log('newFolder', folder, parentFolderId);\n\n        folder.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: folder.documentId,\n                item: folder\n            }\n        ]);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const folderId = folder.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(folderId);\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== folderId);\n                    this._findParentFolderAndRemoveItemsByIds(parentFolderId, [folderId], updatedItems);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when Update Version button is pressed and valid file are selected in the file uploader dialog. */\n    updateVersion({ parentFolderId, item, newItem }: UpdateVersionEvent): Observable<UploadCollectionItem[]> {\n        console.log('updateVersion', parentFolderId, item);\n\n        let updatedItem: UploadCollectionFile = {\n            ...item,\n            status: UploadCollectionItemStatus.SUCCESSFUL,\n            uploadedOn: new Date(),\n            uploadedBy: {\n                id: Date.now(),\n                name: 'You'\n            },\n            version: +item.version,\n            name: newItem.name,\n            fileSize: newItem.size\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = updatedItem.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...item };\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    runAfterFail({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('runAfterFail', parentFolderId, items);\n        const item = items[0];\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: item.documentId,\n                item: {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL\n                }\n            }\n        ]);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when Cancel button is pressed */\n    cancelUploadNewFile({ parentFolderId, item }: CancelUploadNewFileEvent): Observable<UploadCollectionItem[]> {\n        console.log('cancelUploadNewFile', parentFolderId, item);\n        const id = item.documentId;\n        this._cancelUploadNewFileIds.push(id);\n\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n\n        return of(null);\n    }\n\n    /** @hidden */\n    private _findParentFolderAndUpdateItem(\n        parentFolderId: string | number | null,\n        updatedItem: UploadCollectionItem,\n        items = this.items\n    ): void {\n        if (!parentFolderId) {\n            const index = items.findIndex((item) => item.documentId === updatedItem.documentId);\n            if (index !== -1) {\n                items[index] = updatedItem;\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const index = currentItem.files.findIndex((item) => item.documentId === updatedItem.documentId);\n                if (index !== -1) {\n                    currentItem.files[i] = updatedItem;\n\n                    break;\n                }\n            } else {\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddNewFiles(\n        parentFolderId: string | number | null,\n        uploadedFiles: UploadCollectionNewItem[],\n        items = this.items\n    ): void {\n        if (uploadedFiles.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const uploadedFile = uploadedFiles.pop();\n            const index = items.findIndex((item) => item.documentId === uploadedFile.temporaryDocumentId);\n            if (index !== -1) {\n                items[index] = uploadedFile.item;\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const hash = uploadedFiles.reduce((res, file) => {\n                    res[file.temporaryDocumentId] = file.item;\n                    return res;\n                }, {});\n\n                currentItem.files = currentItem.files.map((item) =>\n                    hash[item.documentId] ? hash[item.documentId] : item\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddFiles(\n        parentFolderId: string | number | null,\n        files: UploadCollectionItem[],\n        items = this.items\n    ): void {\n        if (files.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            items.push(...files);\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files.push(...files);\n\n                break;\n            } else {\n                this._findParentFolderAndAddFiles(parentFolderId, files, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndRemoveItemsByIds(\n        parentFolderId: string | number | null,\n        documentsIds: (number | string)[],\n        items = this.items\n    ): void {\n        if (documentsIds.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const documentId = documentsIds.pop();\n            const index = items.findIndex((item) => item.documentId === documentId);\n            if (index !== -1) {\n                items.splice(index, 1);\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files = currentItem.files.filter(\n                    (item) => !documentsIds.some((documentId) => documentId === item.documentId)\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _generateNewFolder(folderName: string): UploadCollectionFolder {\n        return {\n            documentId: uuidv4(),\n            type: 'folder',\n            name: folderName,\n            uploadedBy: {\n                id: uuidv4(),\n                name: 'You'\n            },\n            uploadedOn: new Date(),\n            files: [],\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n    }\n}\n",U="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\n\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-example',\n    templateUrl: './platform-upload-collection-example.component.html'\n})\nexport class PlatformUploadCollectionExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",S='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',E="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-disabled-example',\n    templateUrl: './platform-upload-collection-disabled-example.component.html'\n})\nexport class PlatformUploadCollectionDisabledExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",P='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    disabled="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',w="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-readonly-example',\n    templateUrl: './platform-upload-collection-readonly-example.component.html'\n})\nexport class PlatformUploadCollectionReadonlyExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",C='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    readonly="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',_="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-turn-off-example',\n    templateUrl: './platform-upload-collection-turn-off-example.component.html'\n})\nexport class PlatformUploadCollectionTurnOffExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",T='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [showSearch]="false"\n    [enablePagination]="false"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',A=i("fXoL"),L=i("ddaM"),N=i("kt86"),j=i("X1JU"),V=i("LRne"),O=i("VRyK"),M=i("3E0/"),D=i("lJxs"),z=i("t33z"),R=["Liam","Noah","Oliver","William","Elijah","James","Benjamin","Lucas","Mason","Ethan","Alexander","Henry","Jacob","Michael","Daniel","Logan","Jackson","Sebastian","Jack","Aiden"],k=[".jpg",".png",".pdf",".xls"];function W(){var e="abcdefghijklmnopqrstuvwxyz";return e[Math.floor(Math.random()*e.length)].toUpperCase()}function B(e,n){return new Date(+e+Math.random()*(n.getTime()-e.getTime()))}function H(e){for(var n,t,o=[],l=0;l<e;l++){var a=R[Math.floor(Math.random()*R.length)],i=(n=1,t=5242880,n=Math.ceil(n),t=Math.floor(t),Math.floor(Math.random()*(t-n+1))+n),d=k[Math.floor(Math.random()*k.length)],r=void 0;switch(d){case".jpg":case".png":r="https://picsum.photos/200";break;case".pdf":r="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";break;case".xls":r="https://file-examples-com.github.io/uploads/2017/02/file_example_XLS_10.xls"}o.push({documentId:Object(z.L)(),type:"file",name:"File-".concat(l+1).concat(d),uploadedBy:{id:Object(z.L)(),name:"".concat(a," ").concat(W(),".")},url:r,uploadedOn:B(new Date(2018,0,1),new Date),fileSize:i,version:Math.floor(10*Math.random())||1})}return o}function $(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=[],l=0;l<e;l++){var a=R[Math.floor(Math.random()*R.length)],i=H(Math.floor(10*Math.random()));n!==t&&i.push.apply(i,d($(Math.floor(10*Math.random()),n,t+1))),o.push({documentId:Object(z.L)(),type:"folder",name:"Folder-".concat(l+1),uploadedBy:{id:Object(z.L)(),name:"".concat(a," ").concat(W(),".")},uploadedOn:B(new Date(2018,0,1),new Date),files:i})}return o}var J,K,Y,Q,X,q,Z,G=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&o(e,n)}(i,n);var a=l(i);function i(n){var t;return e(this,i),(t=a.call(this))._http=n,t.items=[].concat(d(H(50)),d($(4,1))),t._cancelUploadNewFileIds=[],t}return t(i,[{key:"upload",value:function(e){var n=this,t=e.parentFolderId,o=e.items;console.log("upload",t,o);var l=o.map(function(e){return delete e.file,e.status=I.d.SUCCESSFUL,{temporaryDocumentId:e.documentId,item:e}});return this._findParentFolderAndAddNewFiles(t,l),Object(V.a)(this.items).pipe(Object(M.a)(5e3),Object(D.a)(function(e){var o=l.filter(function(e){return!!n._cancelUploadNewFileIds.includes(e.item.documentId)&&(n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter(function(n){return n!==e.item.documentId}),!0)}).map(function(e){return e.item.documentId});return n._findParentFolderAndRemoveItemsByIds(t,o,e),e}))}},{key:"download",value:function(e){var n=this;console.log("download",e);var t=e.items.map(function(e){return n._http.get(e.url,{responseType:"blob"}).pipe(Object(D.a)(function(n){return{blob:n,file:e}}))});return Object(O.a).apply(void 0,d(t)).pipe(Object(D.a)(function(e){var n=e.file,t=e.blob,o=document.createElement("a"),l=URL.createObjectURL(t);return o.href=l,o.download=n.name,o.click(),URL.revokeObjectURL(l),null}))}},{key:"moveTo",value:function(e){var n=e.from,t=e.to,o=e.items,l=e.newFolder;console.log("moveTo",n,t,o,l);var a=o.map(function(e){return e.documentId});if(this._findParentFolderAndRemoveItemsByIds(n?n.documentId:null,a),l){var i=this._generateNewFolder(l.folderName);this._findParentFolderAndAddFiles(l.parentFolderId,[i]),this._findParentFolderAndAddFiles(i.documentId,o)}else this._findParentFolderAndAddFiles(t?t.documentId:null,o);return Object(V.a)(this.items)}},{key:"delete",value:function(e){var n=e.parentFolderId,t=e.items;console.log("delete",n,t);var o=t.map(function(e){return e.documentId});return this._findParentFolderAndRemoveItemsByIds(n,o),Object(V.a)(this.items)}},{key:"fileRenamed",value:function(e){var n=this,t=e.parentFolderId,o=e.item,l=e.fileName;console.log("fileRenamed",t,o,l);var a=Object.assign(Object.assign({},o),{name:l,status:I.d.SUCCESSFUL});return this._findParentFolderAndUpdateItem(t,a),Object(V.a)(this.items).pipe(Object(M.a)(5e3),Object(D.a)(function(e){var l=o.documentId;return n._cancelUploadNewFileIds.includes(l)&&((a=Object.assign({},a)).name=o.name,a.status=I.d.SUCCESSFUL,n._findParentFolderAndUpdateItem(t,a,e),n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter(function(e){return e!==l})),e}))}},{key:"newFolder",value:function(e){var n=this,t=e.parentFolderId,o=e.folder;return console.log("newFolder",o,t),o.status=I.d.SUCCESSFUL,this._findParentFolderAndAddNewFiles(t,[{temporaryDocumentId:o.documentId,item:o}]),Object(V.a)(this.items).pipe(Object(M.a)(5e3),Object(D.a)(function(e){var l=o.documentId;return n._cancelUploadNewFileIds.includes(l)&&(n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter(function(e){return e!==l}),n._findParentFolderAndRemoveItemsByIds(t,[l],e)),e}))}},{key:"updateVersion",value:function(e){var n=this,t=e.parentFolderId,o=e.item,l=e.newItem;console.log("updateVersion",t,o);var a=Object.assign(Object.assign({},o),{status:I.d.SUCCESSFUL,uploadedOn:new Date,uploadedBy:{id:Date.now(),name:"You"},version:+o.version,name:l.name,fileSize:l.size});return this._findParentFolderAndUpdateItem(t,a),Object(V.a)(this.items).pipe(Object(M.a)(5e3),Object(D.a)(function(e){var l=a.documentId;return n._cancelUploadNewFileIds.includes(l)&&(a=Object.assign({},o),n._findParentFolderAndUpdateItem(t,a,e),n._cancelUploadNewFileIds=n._cancelUploadNewFileIds.filter(function(e){return e!==l})),e}))}},{key:"runAfterFail",value:function(e){var n=e.parentFolderId,t=e.items;console.log("runAfterFail",n,t);var o=t[0];return this._findParentFolderAndAddNewFiles(n,[{temporaryDocumentId:o.documentId,item:Object.assign(Object.assign({},o),{status:I.d.SUCCESSFUL})}]),Object(V.a)(this.items)}},{key:"cancelUploadNewFile",value:function(e){var n=e.parentFolderId,t=e.item;console.log("cancelUploadNewFile",n,t);var o=t.documentId;return this._cancelUploadNewFileIds.push(o),this._findParentFolderAndRemoveItemsByIds(n,[o]),Object(V.a)(null)}},{key:"_findParentFolderAndUpdateItem",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.items;if(e)for(var o=0;o<t.length;o++){var l=t[o];if("folder"===l.type)if(l.documentId===e){if(-1!==l.files.findIndex(function(e){return e.documentId===n.documentId})){l.files[o]=n;break}}else this._findParentFolderAndUpdateItem(e,n,l.files)}else{var a=t.findIndex(function(e){return e.documentId===n.documentId});-1!==a&&(t[a]=n)}}},{key:"_findParentFolderAndAddNewFiles",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.items;if(0!==n.length)if(e)for(var o=0;o<t.length;o++){var l=t[o];if("folder"===l.type){if(l.documentId===e){var a=function(){var e=n.reduce(function(e,n){return e[n.temporaryDocumentId]=n.item,e},{});return l.files=l.files.map(function(n){return e[n.documentId]?e[n.documentId]:n}),"break"}();if("break"===a)break}this._findParentFolderAndAddNewFiles(e,n,l.files)}}else{var i=n.pop(),d=t.findIndex(function(e){return e.documentId===i.temporaryDocumentId});-1!==d&&(t[d]=i.item,this._findParentFolderAndAddNewFiles(e,n))}}},{key:"_findParentFolderAndAddFiles",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.items;if(0!==n.length)if(e)for(var o=0;o<t.length;o++){var l=t[o];if("folder"===l.type){if(l.documentId===e){var a;(a=l.files).push.apply(a,d(n));break}this._findParentFolderAndAddFiles(e,n,l.files)}}else t.push.apply(t,d(n))}},{key:"_findParentFolderAndRemoveItemsByIds",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.items;if(0!==n.length)if(e)for(var o=0;o<t.length;o++){var l=t[o];if("folder"===l.type){if(l.documentId===e){l.files=l.files.filter(function(e){return!n.some(function(n){return n===e.documentId})});break}this._findParentFolderAndRemoveItemsByIds(e,n,l.files)}}else{var a=n.pop(),i=t.findIndex(function(e){return e.documentId===a});-1!==i&&(t.splice(i,1),this._findParentFolderAndRemoveItemsByIds(e,n))}}},{key:"_generateNewFolder",value:function(e){return{documentId:Object(z.L)(),type:"folder",name:e,uploadedBy:{id:Object(z.L)(),name:"You"},uploadedOn:new Date,files:[],status:I.d.SUCCESSFUL}}}]),i}(I.b),ee=i("tk/3"),ne=i("SzzL"),te=((J=function(){function n(t){e(this,n),this._http=t,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new I.c(new G(t))}return t(n,[{key:"typeMismatch",value:function(e){var n=e.source,t=e.payload;console.log("typeMismatch",n,t)}},{key:"filenameLengthExceed",value:function(e){var n=e.source,t=e.payload;console.log("filenameLengthExceed",n,t)}},{key:"fileSizeExceed",value:function(e){var n=e.source,t=e.payload;console.log("fileSizeExceed",n,t)}}]),n}()).\u0275fac=function(e){return new(e||J)(A.Qb(ee.a))},J.\u0275cmp=A.Kb({type:J,selectors:[["fdp-upload-collection-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(A.Wb(0,"fdp-upload-collection",0),A.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),A.Vb()),2&e&&A.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[ne.a],encapsulation:2}),J),oe=i("5HkS"),le=((X=function(){function n(t){e(this,n),this._http=t,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new I.c(new G(t))}return t(n,[{key:"typeMismatch",value:function(e){var n=e.source,t=e.payload;console.log("typeMismatch",n,t)}},{key:"filenameLengthExceed",value:function(e){var n=e.source,t=e.payload;console.log("filenameLengthExceed",n,t)}},{key:"fileSizeExceed",value:function(e){var n=e.source,t=e.payload;console.log("fileSizeExceed",n,t)}}]),n}()).\u0275fac=function(e){return new(e||X)(A.Qb(ee.a))},X.\u0275cmp=A.Kb({type:X,selectors:[["fdp-upload-collection-disabled-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","disabled","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(A.Wb(0,"fdp-upload-collection",0),A.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),A.Vb()),2&e&&A.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[ne.a],encapsulation:2}),X),ae=((Q=function(){function n(t){e(this,n),this._http=t,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new I.c(new G(t))}return t(n,[{key:"typeMismatch",value:function(e){var n=e.source,t=e.payload;console.log("typeMismatch",n,t)}},{key:"filenameLengthExceed",value:function(e){var n=e.source,t=e.payload;console.log("filenameLengthExceed",n,t)}},{key:"fileSizeExceed",value:function(e){var n=e.source,t=e.payload;console.log("fileSizeExceed",n,t)}}]),n}()).\u0275fac=function(e){return new(e||Q)(A.Qb(ee.a))},Q.\u0275cmp=A.Kb({type:Q,selectors:[["fdp-upload-collection-readonly-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","readonly","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(A.Wb(0,"fdp-upload-collection",0),A.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),A.Vb()),2&e&&A.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[ne.a],encapsulation:2}),Q),ie=((Y=function(){function n(t){e(this,n),this._http=t,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new I.c(new G(t))}return t(n,[{key:"typeMismatch",value:function(e){var n=e.source,t=e.payload;console.log("typeMismatch",n,t)}},{key:"filenameLengthExceed",value:function(e){var n=e.source,t=e.payload;console.log("filenameLengthExceed",n,t)}},{key:"fileSizeExceed",value:function(e){var n=e.source,t=e.payload;console.log("fileSizeExceed",n,t)}}]),n}()).\u0275fac=function(e){return new(e||Y)(A.Qb(ee.a))},Y.\u0275cmp=A.Kb({type:Y,selectors:[["fdp-upload-collection-turn-off-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","showSearch","enablePagination","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(A.Wb(0,"fdp-upload-collection",0),A.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),A.Vb()),2&e&&A.vc("dataSource",n.dataSource)("showSearch",!1)("enablePagination",!1)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[ne.a],encapsulation:2}),Y),de=((K=function n(){e(this,n),this.uploadCollection=[{language:"html",code:s,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:c,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:r,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionReadOnly=[{language:"html",code:f,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:u,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:r,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionDisabled=[{language:"html",code:p,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:m,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:r,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionTurnOff=[{language:"html",code:b,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:h,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:r,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}]}).\u0275fac=function(e){return new(e||K)},K.\u0275cmp=A.Kb({type:K,selectors:[["app-platform-upload-collection"]],decls:47,vars:4,consts:[["id","default","componentName","upload-collection"],[3,"exampleFiles"],["id","disabled","componentName","upload-collection"],[1,"code-snippet"],["id","readonly","componentName","upload-collection"],["id","without-pagination-and-search","componentName","upload-collection"]],template:function(e,n){1&e&&(A.Wb(0,"fd-docs-section-title",0),A.Vc(1," Default\n"),A.Vb(),A.Rb(2,"description"),A.Wb(3,"component-example"),A.Rb(4,"fdp-upload-collection-example"),A.Vb(),A.Rb(5,"code-example",1),A.Wb(6,"fd-docs-section-title",2),A.Vc(7," Disabled State\n"),A.Vb(),A.Wb(8,"description"),A.Vc(9,"Use "),A.Wb(10,"code",3),A.Vc(11,'[disable]="true"'),A.Vb(),A.Vc(12," to disable all CRUD buttons."),A.Vb(),A.Wb(13,"component-example"),A.Rb(14,"fdp-upload-collection-disabled-example"),A.Vb(),A.Rb(15,"code-example",1),A.Wb(16,"fd-docs-section-title",4),A.Vc(17," Readonly State\n"),A.Vb(),A.Wb(18,"description"),A.Vc(19,"Use "),A.Wb(20,"code",3),A.Vc(21,'[readonly]="true"'),A.Vb(),A.Vc(22," to hide all CRUD buttons."),A.Vb(),A.Wb(23,"component-example"),A.Rb(24,"fdp-upload-collection-readonly-example"),A.Vb(),A.Rb(25,"code-example",1),A.Wb(26,"fd-docs-section-title",5),A.Vc(27," Without Pagination and Search\n"),A.Vb(),A.Wb(28,"description"),A.Vc(29," Use "),A.Wb(30,"code",3),A.Vc(31,'[showSearch]="false"'),A.Vb(),A.Vc(32," to hide search input, by default "),A.Wb(33,"code",3),A.Vc(34,'[showSearch]="true"'),A.Vb(),A.Vc(35,". "),A.Rb(36,"br"),A.Vc(37," Use "),A.Wb(38,"code",3),A.Vc(39,'[enablePagination]="false"'),A.Vb(),A.Vc(40," to hide pagination, by default "),A.Wb(41,"code",3),A.Vc(42,'[enablePagination]="true"'),A.Vb(),A.Vc(43,".\n"),A.Vb(),A.Wb(44,"component-example"),A.Rb(45,"fdp-upload-collection-turn-off-example"),A.Vb(),A.Rb(46,"code-example",1)),2&e&&(A.Db(5),A.vc("exampleFiles",n.uploadCollection),A.Db(10),A.vc("exampleFiles",n.uploadCollectionDisabled),A.Db(10),A.vc("exampleFiles",n.uploadCollectionReadOnly),A.Db(21),A.vc("exampleFiles",n.uploadCollectionTurnOff))},directives:[L.a,N.a,j.a,te,oe.a,le,ae,ie],encapsulation:2}),K),re=i("dor/"),ce=i("trhy"),se=i("RJTZ"),me=i("Kpas"),pe=[{path:"",component:(q=function n(){e(this,n)},q.\u0275fac=function(e){return new(e||q)},q.\u0275cmp=A.Kb({type:q,selectors:[["fd-upload-collection-header"]],decls:31,vars:0,consts:[["label","SAP Ariba Component","title","SAP Ariba Component","color","8"],[1,"code-snippet"],["module","PlatformUploadCollectionModule","subPackage","upload-collection"]],template:function(e,n){1&e&&(A.Wb(0,"header"),A.Vc(1,"Upload Collection"),A.Vb(),A.Rb(2,"fd-info-label",0),A.Wb(3,"description"),A.Wb(4,"p"),A.Vc(5,"The upload collection allows users to upload one or more files from different devices."),A.Vb(),A.Wb(6,"h3"),A.Vc(7,"Usage"),A.Vb(),A.Wb(8,"p"),A.Vc(9,"Use the upload collection if:"),A.Vb(),A.Wb(10,"ul"),A.Wb(11,"li"),A.Vc(12,"You want to show a list of uploaded files that can be modified."),A.Vb(),A.Wb(13,"li"),A.Vc(14,"You want to allow users to add or remove files, and to change the file names."),A.Vb(),A.Vb(),A.Wb(15,"p"),A.Vc(16,"Don't use the upload collection if:"),A.Vb(),A.Wb(17,"ul"),A.Wb(18,"li"),A.Vc(19,"The user can upload only one file to the app. In this case, use the FileUploader control instead."),A.Vb(),A.Vb(),A.Wb(20,"h3"),A.Vc(21,"Required"),A.Vb(),A.Wb(22,"ul"),A.Wb(23,"li"),A.Vc(24," To use all CRUD operations need to describe "),A.Wb(25,"code",1),A.Vc(26,"UploadCollectionService"),A.Vb(),A.Vc(27," (look at examples) "),A.Vb(),A.Vb(),A.Vb(),A.Rb(28,"import",2),A.Rb(29,"fd-header-tabs"),A.Rb(30,"router-outlet"))},directives:[re.a,ce.a,N.a,se.a,me.a,g.h],encapsulation:2}),q),children:[{path:"",component:de},{path:"api",component:y.a,data:{content:v.a.uploadCollection}}]}],ue=((Z=function n(){e(this,n)}).\u0275fac=function(e){return new(e||Z)},Z.\u0275mod=A.Ob({type:Z}),Z.\u0275inj=A.Nb({imports:[[g.g.forChild(pe),F.a,I.a],g.g]}),Z)}}])}();