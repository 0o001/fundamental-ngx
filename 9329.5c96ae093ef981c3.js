"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9329],{39329:(m,c,n)=>{n.r(c),n.d(c,{MessageToastDocsModule:()=>O});var i=n(8674),l=n(36854),d=n(86487),T=n(82972),r=n(18303),g=n(98043),a=n(23506),e=n(5e3),C=n(93943),h=n(44969),M=n(28595),u=n(68405);let v=(()=>{class t{constructor(o){this.ref=o}}return t.\u0275fac=function(o){return new(o||t)(e.Y36(u.B2))},t.\u0275cmp=e.Xpm({type:t,selectors:[["fd-message-toast-content-example"]],decls:2,vars:0,template:function(o,p){1&o&&(e.TgZ(0,"div"),e._uU(1," Message Toast created from component. It will stay open if the cursor is above it. Has a customized width and will disappear after 7500ms "),e.qZA())},encapsulation:2}),t})();var Z=n(87757);function x(t,s){1&t&&e._uU(0),2&t&&e.hij(" ",s.$implicit.data.content,"\n")}let b=(()=>{class t{constructor(o){this.messageToastService=o}openFromComponent(){this.messageToastService.open(v,{mousePersist:!0,duration:5e3,maxWidth:"25rem"})}openFromString(){this.messageToastService.open("Message Toast created from string. Will disappear after 5000ms",{duration:5e3})}openFromTemplate(o){this.messageToastService.open(o,{data:{content:"Message Toast created from template."}})}}return t.\u0275fac=function(o){return new(o||t)(e.Y36(u.H2))},t.\u0275cmp=e.Xpm({type:t,selectors:[["fd-message-toast-example"]],decls:6,vars:0,consts:[["fd-button","","label","Open from Component",3,"click"],["fd-button","","label","Open from Template",3,"click"],["fd-button","","label","Open from String",3,"click"],["fd-button","","label","Hide All","fdType","emphasized",3,"click"],["template",""]],template:function(o,p){if(1&o){const P=e.EpF();e.TgZ(0,"button",0),e.NdJ("click",function(){return p.openFromComponent()}),e.qZA(),e.TgZ(1,"button",1),e.NdJ("click",function(){e.CHM(P);const H=e.MAs(5);return p.openFromTemplate(H)}),e.qZA(),e.TgZ(2,"button",2),e.NdJ("click",function(){return p.openFromString()}),e.qZA(),e.TgZ(3,"button",3),e.NdJ("click",function(){return p.messageToastService.hideAll()}),e.qZA(),e.YNc(4,x,1,1,"ng-template",null,4,e.W1O)}},directives:[Z.r],styles:["button[_ngcontent-%COMP%]{margin-right:12px}"]}),t})();var U=n(29871);let y=(()=>{class t{constructor(){this.messageToastComponentExample=[{language:"html",fileName:"message-toast-example",code:g,scssFileCode:a},{language:"typescript",fileName:"message-toast-example",code:r,component:"MessageToastExampleComponent",entryComponent:!0,name:"Main Component",main:!0},{language:"typescript",code:T,fileName:"message-toast-content-example",component:"MessageToastContentExampleComponent",name:"Content Component",entryComponent:!0}]}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-message-toast"]],decls:10,vars:1,consts:[["id","message-toast","componentName","message-toast"],[3,"exampleFiles"]],template:function(o,p){1&o&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," Message Toast "),e.qZA(),e.TgZ(2,"description"),e._uU(3," The "),e.TgZ(4,"code"),e._uU(5,"MessageToastService"),e.qZA(),e._uU(6," is available for injection and accepts a component type, a template ref or a string as the alert content.\n"),e.qZA(),e.TgZ(7,"component-example"),e._UZ(8,"fd-message-toast-example"),e.qZA(),e._UZ(9,"code-example",1)),2&o&&(e.xp6(9),e.Q6J("exampleFiles",p.messageToastComponentExample))},directives:[C.k,h.w,M.O,b,U.E],encapsulation:2}),t})();var A=n(24882),E=n(98791),_=n(63710);let F=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["fd-message-toast-header"]],decls:46,vars:0,consts:[["module","MessageToastModule","subPackage","message-toast"]],template:function(o,p){1&o&&(e.TgZ(0,"header"),e._uU(1,"Message Toast"),e.qZA(),e.TgZ(2,"description")(3,"p"),e._uU(4," The message toast is a small, non-disruptive popup for success messages that disappears automatically after a few seconds. When message toast is displayed, it is always centered horizontally at the bottom of the screen and fades in and out automatically. "),e.qZA(),e._UZ(5,"p"),e.TgZ(6,"p")(7,"b"),e._uU(8,"Note:"),e.qZA(),e._uU(9," By default, Message Toast uses default "),e.TgZ(10,"code"),e._uU(11,"MessageToastConfig"),e.qZA(),e._uU(12," configuration."),e._UZ(13,"br"),e._uU(14," Users can override this configuration with "),e.TgZ(15,"code"),e._uU(16,"MessageToastModule.withConfig(config)"),e.qZA(),e._uU(17," method when importing "),e.TgZ(18,"code"),e._uU(19,"MessageToastModule"),e.qZA(),e._uU(20," module."),e._UZ(21,"br"),e._uU(22," Default timing and duration of the message toast is 3000 ms. The duration can be above 3000 ms, but it's not recommended to be less than 3000 ms. "),e.qZA(),e.TgZ(23,"h2"),e._uU(24,"Usage"),e.qZA(),e.TgZ(25,"b"),e._uU(26,"Use message toast if:"),e.qZA(),e.TgZ(27,"ul")(28,"li"),e._uU(29,"To display a short success message."),e.qZA(),e.TgZ(30,"li"),e._uU(31,"To avoid interrupting the user while they are performing an action."),e.qZA(),e.TgZ(32,"li"),e._uU(33,"To confirm a successful action."),e.qZA()(),e.TgZ(34,"b"),e._uU(35,"Do not use the message toast if:"),e.qZA(),e.TgZ(36,"ul")(37,"li"),e._uU(38,"You want to display an error or warning message."),e.qZA(),e.TgZ(39,"li"),e._uU(40,"You want to interrupt users while they are performing an action."),e.qZA(),e.TgZ(41,"li"),e._uU(42,"You want to make sure that users read the message before they leave the page."),e.qZA()()(),e._UZ(43,"import",0)(44,"fd-header-tabs")(45,"router-outlet"))},directives:[A.G,h.w,E.k,_.c,i.lC],encapsulation:2}),t})();var S=n(28674);const D=[{path:"",component:F,children:[{path:"",component:y},{path:"api",component:l.h,data:{content:d.X.messageToast}}]}];let O=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({providers:[u.H2],imports:[[i.Bz.forChild(D),S.g,u.GC],i.Bz]}),t})()},98791:(m,c,n)=>{n.d(c,{k:()=>T});var i=n(59148),l=n(5e3),d=n(8566);let T=(()=>{class r{constructor(a){this.currentLib=a}get file(){return{code:`import { ${this.module} } from '${this.library}';`,language:"ts"}}ngOnInit(){const a=["@fundamental-ngx",this.currentLib];this.subPackage&&a.push(this.subPackage),this.library=a.join("/")}}return r.\u0275fac=function(a){return new(a||r)(l.Y36(i.b))},r.\u0275cmp=l.Xpm({type:r,selectors:[["import"]],inputs:{module:"module",subPackage:"subPackage"},decls:1,vars:1,consts:[[3,"file"]],template:function(a,e){1&a&&l._UZ(0,"fd-code-snippet",0),2&a&&l.Q6J("file",e.file)},directives:[d.N],encapsulation:2,changeDetection:0}),r})()},82972:m=>{m.exports="import { Component } from '@angular/core';\nimport { MessageToastRef } from '@fundamental-ngx/core/message-toast';\n\n@Component({\n    selector: 'fd-message-toast-content-example',\n    template: `<div>\n        Message Toast created from component. It will stay open if the cursor is above it. Has a customized width and\n        will disappear after 7500ms\n    </div>`\n})\nexport class MessageToastContentExampleComponent {\n    constructor(public ref: MessageToastRef) {}\n}\n"},98043:m=>{m.exports='<button fd-button label="Open from Component" (click)="openFromComponent()"></button>\n<button fd-button label="Open from Template" (click)="openFromTemplate(template)"></button>\n<button fd-button label="Open from String" (click)="openFromString()"></button>\n<button fd-button label="Hide All" fdType="emphasized" (click)="messageToastService.hideAll()"></button>\n\n\x3c!-- Defining a template to open --\x3e\n<ng-template let-messageToast #template>\n    {{ messageToast.data.content }}\n</ng-template>\n'},23506:m=>{m.exports="button {\n    margin-right: 12px;\n}\n"},18303:m=>{m.exports="import { Component } from '@angular/core';\nimport { MessageToastService } from '@fundamental-ngx/core/message-toast';\nimport { MessageToastContentExampleComponent } from './message-toast-content-example.component';\n\n@Component({\n    selector: 'fd-message-toast-example',\n    templateUrl: './message-toast-example.component.html',\n    styleUrls: ['message-toast-example.component.scss']\n})\nexport class MessageToastExampleComponent {\n    constructor(public messageToastService: MessageToastService) {}\n\n    openFromComponent(): void {\n        this.messageToastService.open(MessageToastContentExampleComponent, {\n            mousePersist: true,\n            duration: 5000,\n            maxWidth: '25rem'\n        });\n    }\n\n    openFromString(): void {\n        const content = 'Message Toast created from string. Will disappear after 5000ms';\n        this.messageToastService.open(content, {\n            duration: 5000\n        });\n    }\n\n    openFromTemplate(template): void {\n        this.messageToastService.open(template, {\n            data: {\n                content: 'Message Toast created from template.'\n            }\n        });\n    }\n}\n"}}]);