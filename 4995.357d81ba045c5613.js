"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4995],{36854:(u,T,r)=>{r.d(T,{h:()=>O}),r(77135);var m=r(5e3),v=r(8674),c=r(74042),h=r(69808),g=r(87757),P=r(63043),d=r(50578),e=r(27078),S=r(42437),Z=r(24919);const G=["menu"];function D(C,p){if(1&C&&m._UZ(0,"button",8),2&C){const f=m.oxw(),y=m.MAs(6);m.Q6J("label","Select a file ("+f.files.length+")")("fdMenu",!0)("fdMenuTrigger",y)}}function w(C,p){if(1&C){const f=m.EpF();m.TgZ(0,"li",9),m.NdJ("click",function(){const U=m.CHM(f).$implicit;return m.oxw().getFile(U)}),m.TgZ(1,"div",10)(2,"span",11),m._uU(3),m.qZA()()()}if(2&C){const f=p.$implicit,y=m.oxw();m.ekj("is-selected",f===y.activeFile),m.xp6(3),m.Oqu(f)}}let O=(()=>{class C{constructor(f,y){this.route=f,this.apiService=y}ngOnInit(){this.route.snapshot.data&&(this.files=this.route.snapshot.data.content),this.files&&this.files.length>0?(this.files.sort(),this.getFile(this.files[0]),this.activeFile=this.files[0]):this.result="<h2>No API files found.</h2>"}getFile(f){this.apiService.getComponentHtml(f).subscribe(y=>{this.result=y,this.activeFile=f,this.menu.close()},y=>{console.warn("Did not find file "+f+".\nError: "+y)})}}return C.\u0275fac=function(f){return new(f||C)(m.Y36(v.gz),m.Y36(c.S))},C.\u0275cmp=m.Xpm({type:C,selectors:[["fd-api"]],viewQuery:function(f,y){if(1&f&&m.Gf(G,5),2&f){let A;m.iGM(A=m.CRH())&&(y.menu=A.first)}},decls:9,vars:5,consts:[[1,"api-main-container"],[1,"api-main-header"],[2,"display","flex","flex-grow","1"],["fd-button","",3,"label","fdMenu","fdMenuTrigger",4,"ngIf"],["placement","bottom-start",3,"fillControlMode"],["menu",""],["fd-menu-item","",3,"is-selected","click",4,"ngFor","ngForOf"],[3,"innerHTML"],["fd-button","",3,"label","fdMenu","fdMenuTrigger"],["fd-menu-item","",3,"click"],["fd-menu-interactive",""],["fd-menu-title",""]],template:function(f,y){1&f&&(m.TgZ(0,"div",0)(1,"h2",1),m._uU(2),m.qZA(),m._UZ(3,"span",2),m.YNc(4,D,1,3,"button",3),m.TgZ(5,"fd-menu",4,5),m.YNc(7,w,4,3,"li",6),m.qZA()(),m._UZ(8,"div",7)),2&f&&(m.xp6(2),m.Oqu(y.activeFile),m.xp6(2),m.Q6J("ngIf",y.files.length>1),m.xp6(1),m.Q6J("fillControlMode",null),m.xp6(2),m.Q6J("ngForOf",y.files),m.xp6(1),m.Q6J("innerHTML",y.result,m.oJD))},directives:[h.O5,g.r,P.k,d.M,h.sg,e.qv,S.K,Z.h],styles:[".api-main-header[_ngcontent-%COMP%]{margin:0;font-weight:700;text-rendering:optimizeLegibility}.api-main-container[_ngcontent-%COMP%]{margin-top:2em;display:flex;align-items:center;justify-content:flex-start;flex-wrap:wrap}fd-popover[_ngcontent-%COMP%]     .fd-button{margin-right:0}"]}),C})()},63710:(u,T,r)=>{r.d(T,{c:()=>e});var i=r(5e3),m=r(17791),v=r(66997),c=r(8674),h=r(1726),g=r(55124),P=r(33089);const d=function(){return{exact:!0}};let e=(()=>{class S{}return S.\u0275fac=function(G){return new(G||S)},S.\u0275cmp=i.Xpm({type:S,selectors:[["fd-header-tabs"]],decls:12,vars:4,consts:[["fd-tab-nav",""],["fd-tab-item",""],["fd-tab-link","","routerLink","./","routerLinkActive","",3,"active","routerLinkActiveOptions"],["rla1","routerLinkActive"],["fd-tab-tag",""],["fd-tab-link","","routerLink","./api","routerLinkActive","",3,"active"],["rla2","routerLinkActive"],[2,"margin-top","0"]],template:function(G,D){if(1&G&&(i.TgZ(0,"ul",0)(1,"li",1)(2,"a",2,3)(4,"span",4),i._uU(5,"Examples"),i.qZA()()(),i.TgZ(6,"li",1)(7,"a",5,6)(9,"span",4),i._uU(10,"API"),i.qZA()()()(),i._UZ(11,"separator",7)),2&G){const w=i.MAs(3),O=i.MAs(8);i.xp6(2),i.Q6J("active",w.isActive)("routerLinkActiveOptions",i.DdM(3,d)),i.xp6(5),i.Q6J("active",O.isActive)}},directives:[m.d,v.w,c.yS,h.w,c.Od,g.P6,P.N],styles:["[_nghost-%COMP%]{display:block}.fd-tabs[_ngcontent-%COMP%]{margin-bottom:0;margin-top:24px;box-shadow:none}.fd-tabs__item[_ngcontent-%COMP%]{padding:0;margin-right:24px}.fd-tabs__link[_ngcontent-%COMP%]{min-width:60px;padding-right:12px;padding-left:12px;text-align:center}"]}),S})()},24882:(u,T,r)=>{r.d(T,{G:()=>v});var i=r(5e3);const m=["*"];let v=(()=>{class c{}return c.\u0275fac=function(g){return new(g||c)},c.\u0275cmp=i.Xpm({type:c,selectors:[["header"]],ngContentSelectors:m,decls:2,vars:0,consts:[[1,"header"]],template:function(g,P){1&g&&(i.F$t(),i.TgZ(0,"h1",0),i.Hsn(1),i.qZA())},styles:[".header[_ngcontent-%COMP%]{margin-top:2rem;font-size:2.2rem}"]}),c})()},98791:(u,T,r)=>{r.d(T,{k:()=>m});var i=r(5e3);let m=(()=>{class v{constructor(h){this.currentLib=h}ngOnInit(){const h=["@fundamental-ngx",this.currentLib];this.subPackage&&h.push(this.subPackage),this.library=h.join("/")}}return v.\u0275fac=function(h){return new(h||v)(i.Y36("CURRENT_LIB"))},v.\u0275cmp=i.Xpm({type:v,selectors:[["import"]],inputs:{module:"module",subPackage:"subPackage"},decls:9,vars:2,consts:[[2,"color","rgb(0, 0, 136)"],[2,"color","rgb(0, 136, 0)"]],template:function(h,g){1&h&&(i.TgZ(0,"code")(1,"span",0),i._uU(2,"import"),i.qZA(),i._uU(3),i.TgZ(4,"span",0),i._uU(5,"from "),i.qZA(),i.TgZ(6,"span",1),i._uU(7),i.qZA(),i._uU(8,"; "),i.qZA()),2&h&&(i.xp6(3),i.hij(" { ",g.module," } "),i.xp6(4),i.hij("'",g.library,"'"))},encapsulation:2}),v})()},74042:(u,T,r)=>{r.d(T,{S:()=>v});var i=r(5e3),m=r(40520);let v=(()=>{class c{constructor(g,P){this.httpClient=g,this.currentLib=P,this.BASE_URL="assets/typedoc/"}getComponentHtml(g){g=g.toLocaleLowerCase()+".html";const P=this.buildUrl(this.BASE_URL,this.currentLib||"core","classes",g);return this.httpClient.get(P,{responseType:"text"})}buildUrl(...g){return g.join("/").replace(/\/+/g,"/")}}return c.\u0275fac=function(g){return new(g||c)(i.LFG(m.eN),i.LFG("CURRENT_LIB"))},c.\u0275prov=i.Yz7({token:c,factory:c.\u0275fac}),c})()},28674:(u,T,r)=>{r.d(T,{g:()=>y});var i=r(69808),m=r(8674),v=r(52382),c=r(62970),h=r(53732),g=r(74042),P=r(32818),d=r(30825),e=r(90523),S=r(80848),Z=r(31258),G=r(77135),D=r(89282),w=r(95037),O=r(46394),C=r(75394);const p=[O.P4,G.$9,S.Q,w.o,d.hJ,D.H,e.nY,Z.L,C.s];var f=r(5e3);let y=(()=>{class A{}return A.\u0275fac=function(V){return new(V||A)},A.\u0275mod=f.oAB({type:A}),A.\u0275inj=f.cJS({providers:[h.t,g.S],imports:[[v.u5,i.ez,m.Bz,P.f,p,c.JP.forChild()],v.u5,v.UX,P.f,i.ez,O.P4,G.$9,S.Q,w.o,d.hJ,D.H,e.nY,Z.L,C.s]}),A})()},54995:(u,T,r)=>{r.r(T),r.d(T,{PlatformFormGeneratorDocsModule:()=>Re});var i=r(8674),m=r(36854),v=r(45665),c=r(28674),h=r(78793),g=r(35243),P=r(20845),d=r(84769),e=r(5e3),S=r(24882),Z=r(44969),G=r(98709),D=r(43618),w=r(30161),O=r(93419),C=r(20523),p=r(69808),f=r(98791),y=r(63710);function A(o,a){if(1&o&&(e.TgZ(0,"tr",2)(1,"td",3),e._uU(2),e.qZA(),e.TgZ(3,"td",3),e._uU(4),e.qZA()()),2&o){const n=a.$implicit;e.xp6(2),e.Oqu(n[0]),e.xp6(2),e.Oqu(n[1])}}let U=(()=>{class o{constructor(){this.defaultHintOptions=Object.keys(d.Wg).map(n=>[n,JSON.stringify(d.Wg[n])])}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fd-platform-form-generator-header"]],decls:56,vars:1,consts:[["fd-table",""],["fd-table-header",""],["fd-table-row",""],["fd-table-cell",""],["fd-table-body",""],["fd-table-row","",4,"ngFor","ngForOf"],["module","FDP_FORM_GENERATOR_DEFAULT_HINT_OPTIONS","subPackage","form"],["module","PlatformFormGeneratorModule","subPackage","form"]],template:function(n,t){1&n&&(e.TgZ(0,"header"),e._uU(1,"Form generator"),e.qZA(),e.TgZ(2,"description"),e._uU(3," Form generator is an utility that helps to generate form with appropriate controls. "),e.TgZ(4,"h3"),e._uU(5,"Form generator features"),e.qZA(),e.TgZ(6,"ul")(7,"li"),e._uU(8,"Support of form layout with multiple responsive columns;"),e.qZA(),e.TgZ(9,"li"),e._uU(10,"Automatic component rendering without predefined template;"),e.qZA(),e.TgZ(11,"li"),e._uU(12,"Ability to extend the default set of controls with custom ones;"),e.qZA(),e.TgZ(13,"li"),e._uU(14,"Dynamic validators for each form item"),e.qZA(),e.TgZ(15,"li"),e._uU(16,"Dynamic options for choice-based components"),e.qZA()(),e.TgZ(17,"h3"),e._uU(18,"Questions in Form Generator can have:"),e.qZA(),e.TgZ(19,"ul")(20,"li"),e._uU(21,"Individual labels with async function support;"),e.qZA(),e.TgZ(22,"li"),e._uU(23,"Support for adding a hint for question;"),e.qZA(),e.TgZ(24,"li"),e._uU(25,"Ability to set available variants for question with async function support;"),e.qZA(),e.TgZ(26,"li"),e._uU(27,"Transformation function which will transform form item value as defined in function itself;"),e.qZA(),e.TgZ(28,"li"),e._uU(29,"Standard Angular validators support;"),e.qZA(),e.TgZ(30,"li"),e._uU(31,"Question-specific validator function with asynchronous functions support;"),e.qZA(),e.TgZ(32,"li"),e._uU(33,"Rule function that can determine if question should be shown to the user;"),e.qZA()(),e.TgZ(34,"h3"),e._uU(35,"Inline help default global options"),e.qZA(),e.TgZ(36,"p"),e._uU(37,"Inline help has default options as below:"),e.qZA(),e.TgZ(38,"table",0)(39,"thead",1)(40,"tr",2)(41,"th",3),e._uU(42,"Property name"),e.qZA(),e.TgZ(43,"th",3),e._uU(44,"Value"),e.qZA()()(),e.TgZ(45,"tbody",4),e.YNc(46,A,5,2,"tr",5),e.qZA()(),e.TgZ(47,"p"),e._uU(48," if you want to modify default values globally and not per-field, provide "),e.TgZ(49,"code"),e._uU(50,"FDP_FORM_GENERATOR_DEFAULT_HINT_OPTIONS"),e.qZA(),e._uU(51," in your module or component. "),e._UZ(52,"import",6),e.qZA()(),e._UZ(53,"import",7)(54,"fd-header-tabs")(55,"router-outlet")),2&n&&(e.xp6(46),e.Q6J("ngForOf",t.defaultHintOptions))},directives:[S.G,Z.w,G.a,D.v,w.D,O.t,C.f,p.sg,f.k,y.c,i.lC],encapsulation:2}),o})();var V=r(41236),J=r(25950),X=r(25261),H=r(35577),R=r(31628),Q=r(42748),B=r(58e3),j=r(14012),z=r(30025),$=r(25849),W=r(39073),K=r(34043),ee=r(34908),ne=r(98262),oe=r(79163),te=r(87385),re=r(99016),ae=r(30544),me=r(39723),ie=r(29861),le=r(93943),se=r(28595),_=r(70655),l=r(52382),F=r(41831),I=r(83499),L=r(95209);function ue(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function pe(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}const E=(o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)});let de=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{name:"some",message:"Some group name",guiOptions:{hint:"Some contextual hint on group header"},items:[{type:"input",name:"nameInGroup",message:"Your name (group)",default:"John",placeholder:"Please provide your name",guiOptions:{hint:{text:"Some contextual hint",glyph:"accidental-leave"},column:1},validate:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),"John"===n?null:"Your name should be John"}),transformer:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),`${n}777`}),validators:[l.kI.required]}]},{type:"input",name:"name",message:"Your name",default:"John",placeholder:"Please provide your name",guiOptions:{hint:"Some contextual hint",column:1},validate:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),"John"===n?null:"Your name should be John"}),transformer:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),`${n}777`}),validators:[l.kI.required]},{type:"password",controlType:"password",name:"password",message:"Password",validators:[l.kI.required],validate:n=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(n)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age",controlType:"number",message:()=>"Your age",default:"18",validators:[l.kI.required],guiOptions:{column:1}},{type:"editor",name:"bio",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship",message:"Your citizenship",guiOptions:{inline:!0,column:2},choices:()=>["USA","Germany",{label:"Ukraine",value:"Ukraine"}],validators:[l.kI.required],validate:n=>(null==n?void 0:n.length)>0?null:"You need to select some country"},{type:"list",name:"department",message:"Department you work in",validators:[l.kI.required],default:"IT",choices:["IT","Accounting","Management"],guiOptions:{column:2}},{type:"list",name:"main_speciality",message:"Main speciality",validators:[l.kI.required],choices:()=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),["Front-end","Back-end"]}),when:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),"IT"===n.department}),guiOptions:{column:2}},{type:"confirm",name:"agree",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[l.kI.required],validate:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield E(),"Yes"===n?null:"You must agree"}),guiOptions:{column:2}},{type:"radio",name:"choose_best_option",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[l.kI.required],validate:n=>"Angular"===n?null:"You should pick Angular"},{type:"datepicker",name:"birthday",message:"Your birthday",guiOptions:{column:1},validators:[l.kI.required],validate:n=>null!==n&&n.year<2020?null:"You need to be born before 2020",transformer:n=>null==n?void 0:n.toDateString()},{type:"switch",name:"enable_feature",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){console.log(n),this.formValue=n,this.loading=!0,yield E(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},features:[e._Bn([{provide:F.ed,useClass:F.CP},{provide:F.eZ,useValue:F.hx}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,ue,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,pe,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2}),o})();var fe=r(29871),ce=r(33089),b=r(39646),q=r(91005);function ge(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function he(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}const N=(o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)});let ye=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name2",message:"Your name",default:"John",placeholder:()=>(0,b.of)("Please provide your name").pipe((0,q.g)(400)),guiOptions:{hint:"Some contextual hint",column:1},validate:n=>(0,b.of)("John"===n?null:"Your name should be John").pipe((0,q.g)(400)),transformer:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield N(),`${n}777`}),validators:[l.kI.required]},{type:"password",controlType:"password",name:"password2",message:"Password",validators:[l.kI.required],validate:n=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(n)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age2",controlType:"number",message:()=>(0,b.of)("Your age").pipe((0,q.g)(400)),default:"18",validators:[l.kI.required],guiOptions:{column:1}},{type:"editor",name:"bio2",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship2",message:"Your citizenship",validators:[l.kI.required],guiOptions:{inline:!0,column:2},choices:()=>(0,b.of)(["USA","Germany",{label:"Ukraine",value:"Ukraine"}]),validate:n=>(null==n?void 0:n.length)>0?null:"You need to select some country"},{type:"list",name:"department2",message:"Department you work in",validators:[l.kI.required],default:"IT",choices:()=>(0,b.of)(["IT","Accounting","Management"]),guiOptions:{column:2}},{type:"list",name:"main_speciality2",message:"Main speciality",validators:[l.kI.required],choices:()=>(0,b.of)(["Front-end","Back-end"]),when:n=>(0,b.of)("IT"===n.department),guiOptions:{column:2}},{type:"confirm",name:"agree2",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[l.kI.required],validate:n=>(0,b.of)("Yes"===n?null:"You must agree"),guiOptions:{column:2}},{type:"radio",name:"choose_best_option2",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[l.kI.required],validate:n=>(0,b.of)("Angular"===n?null:"You should pick Angular")},{type:"datepicker",name:"birthday2",message:"Your birthday",guiOptions:{column:1},validators:[l.kI.required],validate:n=>(0,b.of)(null!==n&&n.year<2020?null:"You need to be born before 2020"),transformer:n=>null==n?void 0:n.toDateString()},{type:"switch",name:"enable_feature2",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){this.formValue=n,this.loading=!0,yield N(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-observable-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},features:[e._Bn([{provide:F.ed,useClass:F.CP},{provide:F.eZ,useValue:F.hx}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,ge,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,he,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2}),o})();var _e=r(63113);function ve(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}let be=(()=>{class o extends d.Ze{constructor(){super()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-form-generator-slider"]],features:[e._Bn([],[d.dr,d.wk]),e.qOj],decls:3,vars:8,consts:[[3,"formGroup"],[3,"formGroupName"],[3,"contentDensity","customValues","showTicks","showTicksLabels","name","formControlName"]],template:function(n,t){1&n&&(e.ynx(0,0)(1,1),e._UZ(2,"fdp-slider",2),e.BQk()()),2&n&&(e.Q6J("formGroup",t.form),e.xp6(1),e.Q6J("formGroupName",t.formGroupName),e.xp6(1),e.Q6J("contentDensity",null==t.formItem.guiOptions?null:t.formItem.guiOptions.contentDensity)("customValues",t.formItem.choices)("showTicks",null==t.formItem.guiOptions||null==t.formItem.guiOptions.additionalData?null:t.formItem.guiOptions.additionalData.showTicks)("showTicksLabels",null==t.formItem.guiOptions||null==t.formItem.guiOptions.additionalData?null:t.formItem.guiOptions.additionalData.showTicksLabels)("name",t.name)("formControlName",t.name))},directives:[l.JL,l.sg,l.x0,_e.P,l.JJ,l.u],encapsulation:2}),o})(),Ce=(()=>{class o{constructor(n){this._formGeneratorService=n,this.formCreated=!1,this.questions=[{type:"slider",name:"some_slider",message:"Slider component",default:{value:30,label:"Thirty"},choices:[{value:10,label:"Ten"},{value:20,label:"Twenty"},{value:30,label:"Thirty"},{value:40,label:"Forty"}],guiOptions:{column:1,additionalData:{showTicks:!0,showTicksLabels:!0}}}],this._formGeneratorService.addComponent(be,["slider"])}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){this.formValue=n}}return o.\u0275fac=function(n){return new(n||o)(e.Y36(d.bN))},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-custom-component-example"]],decls:5,vars:3,consts:[["mainTitle","Custom element in Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form"],[4,"ngIf"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e._UZ(1,"fdp-button",1),e.qZA(),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,ve,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(3),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,L.r,p.O5],pipes:[p.Ts],encapsulation:2}),o})();function Fe(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function xe(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}const Y=(o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)});let Te=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name3",message:"Your name",default:"John",guiOptions:{hint:"Some contextual hint",column:1},validate:n=>(0,b.of)("John"===n?null:"Your name should be John").pipe((0,q.g)(400)),transformer:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield Y(),`${n}777`}),validators:[l.kI.required]},{type:"password",controlType:"password",name:"password3",message:"Password",validators:[l.kI.required],validate:n=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(n)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{column:1}},{type:"number",name:"age3",controlType:"number",message:()=>(0,b.of)("Your age").pipe((0,q.g)(400)),default:"18",validators:[l.kI.required],guiOptions:{column:1}},{type:"editor",name:"bio3",message:"Your biography",guiOptions:{column:1}},{type:"checkbox",name:"citizenship3",message:"Your citizenship",guiOptions:{inline:!0,column:2},choices:()=>(0,b.of)(["USA","Germany",{label:"Ukraine",value:"Ukraine"}]),validators:[l.kI.required],validate:n=>(null==n?void 0:n.length)>0?null:"You need to select some country"},{type:"list",name:"department3",message:"Department you work in",validators:[l.kI.required],default:"IT",choices:()=>(0,b.of)(["IT","Accounting","Management"]),guiOptions:{column:2}},{type:"list",name:"main_speciality3",message:"Main speciality",validators:[l.kI.required],choices:()=>(0,b.of)(["Front-end","Back-end"]),when:n=>(0,b.of)("IT"===n.department),guiOptions:{column:2}},{type:"confirm",name:"agree3",message:"Do you agree with terms and conditions?",choices:["Yes","No"],validators:[l.kI.required],validate:n=>(0,b.of)("Yes"===n?null:"You must agree"),guiOptions:{column:2}},{type:"radio",name:"choose_best_option3",message:"Primary front-end framework you use",choices:["Angular","React","VueJS"],guiOptions:{column:2},validators:[l.kI.required],validate:n=>(0,b.of)("Angular"===n?null:"You should pick Angular")},{type:"datepicker",name:"birthday3",message:"Your birthday",guiOptions:{column:1},validators:[l.kI.required],validate:n=>(0,b.of)(null!==n&&n.year<2020?null:"You need to be born before 2020"),transformer:n=>null==n?void 0:n.toDateString()},{type:"switch",name:"enable_feature3",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){this.formValue=n,this.loading=!0,yield Y(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-programatic-submit"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},features:[e._Bn([{provide:F.ed,useClass:F.CP},{provide:F.eZ,useValue:F.hx}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit button outside form generator",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit button outside form generator",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,Fe,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,xe,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2}),o})();function Pe(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",2),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}let Se=(()=>{class o{constructor(n){this._formGeneratorService=n,this.formCreated=!1,this.formItems=[{type:"input",message:"Custom validation error example",name:"custom_validation_error_example",required:!0,validate:t=>"abc"!==t?null:"This field value should not be equal to 'abc'",guiOptions:{hint:"Type 'abc' to show validation error"}},{type:"input",message:"Default validation error example",name:"default_validation_error_example",validators:[l.kI.required],guiOptions:{hint:"Keep it empty to see validation error on submit"}},{type:"input",name:"custom_validation_example",message:"Custom generic validation error example",validators:[l.kI.pattern("^\\d+$")],guiOptions:{hint:"This field will fail validation if non-numeric symbols are present in the input"}}],this._formGeneratorService.addValidationErrorHint("pattern","This field is not matching the pattern")}submitForm(){this.formGenerator.submit()}onFormCreated(){this.formCreated=!0}}return o.\u0275fac=function(n){return new(n||o)(e.Y36(d.bN))},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-custom-error-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},decls:2,vars:2,consts:[["mainTitle","Custom validation in Form Generator example",3,"formItems","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,Pe,1,0,"fdp-button",1)),2&n&&(e.Q6J("formItems",t.formItems),e.xp6(1),e.Q6J("ngIf",t.formCreated))},directives:[I.C,p.O5,L.r],encapsulation:2}),o})();function Ae(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function Ge(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}const M=(o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)});let Ze=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"name1",message:"Your name: XL: 1, L: 2, M: 1, S: 2",default:"John",placeholder:"Please provide your name",guiOptions:{hint:"Some contextual hint: XL: 1, L: 2, M: 1, S: 2",columnLayout:{XL:1,L:2,M:1,S:1}},validate:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield M(),"John"===n?null:"Your name should be John"}),transformer:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield M(),`${n}777`}),validators:[l.kI.required]},{type:"password",controlType:"password",name:"password1",message:"Password: XL: 1, L: 2, M: 2, S: 1",validators:[l.kI.required],validate:n=>new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$").test(n)?null:"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character",guiOptions:{hint:"XL: 1, L: 2, M: 2, S: 1",columnLayout:{XL:1,L:2,M:2,S:1}}},{type:"number",name:"age1",controlType:"number",message:()=>"Your age: XL: 1, L: 2, M: 1, S: 1",default:"18",validators:[l.kI.required],guiOptions:{columnLayout:{XL:1,L:2,M:1,S:1},hint:"XL: 1, L: 2, M: 1, S: 1"}},{type:"editor",name:"bio1",message:"Your biography: XL: 2, L: 1, M: 2, S: 1",guiOptions:{columnLayout:{XL:2,L:1,M:2,S:1},hint:"XL: 2, L: 1, M: 2, S: 1"}},{type:"checkbox",name:"citizenship1",message:"Your citizenship: XL: 2 true, L: 1 false, M: 2 true, S: 1 false",guiOptions:{inline:!0,columnLayout:{XL:2,L:1,M:2,S:1},inlineLayout:{XL:!0,L:!1,M:!0,S:!1},hint:"XL: 2 true, L: 1 false, M: 2 true, S: 1 false"},choices:()=>["USA","Germany",{label:"Ukraine",value:"Ukraine"}],validators:[l.kI.required],validate:n=>(null==n?void 0:n.length)>0?null:"You need to select some country"},{type:"list",name:"department1",message:"Department you work in: column: 2",validators:[l.kI.required],default:"IT",choices:["IT","Accounting","Management"],guiOptions:{column:2,hint:"column: 2"}},{type:"list",name:"main_speciality1",message:"Main speciality: XL: 2, L: 1, M: 1, S: 1",validators:[l.kI.required],choices:()=>(0,_.mG)(this,void 0,void 0,function*(){return yield M(),["Front-end","Back-end"]}),when:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield M(),"IT"===n.department}),guiOptions:{columnLayout:{XL:2,L:1,M:1,S:1},hint:"XL: 2, L: 1, M: 1, S: 1"}},{type:"confirm",name:"agree1",message:"Do you agree with terms and conditions?: XL: 2, L: 1, M: 2, S: 1",choices:["Yes","No"],validators:[l.kI.required],validate:n=>(0,_.mG)(this,void 0,void 0,function*(){return yield M(),"Yes"===n?null:"You must agree"}),guiOptions:{columnLayout:{XL:2,L:1,M:2,S:1},hint:"XL: 2, L: 1, M: 2, S: 1"}},{type:"radio",name:"choose_best_option1",message:"Primary front-end framework: XL: 2 false, L: 1 true, M: 1 false, S: 1 true",choices:["Angular","React","VueJS"],guiOptions:{columnLayout:{XL:2,L:1,M:1},inlineLayout:{XL:!1,L:!0,M:!1,S:!0},hint:"XL: 2 false, L: 1 true, M: 1 false, S: 1 true"},validators:[l.kI.required],validate:n=>"Angular"===n?null:"You should pick Angular"},{type:"datepicker",name:"birthday1",message:"Your birthday: XL: 1, L: 2, M: 1, S: 1",guiOptions:{columnLayout:{XL:1,L:2,M:1,S:1},hint:"XL: 1, L: 2, M: 1, S: 1"},validators:[l.kI.required],validate:n=>null!==n&&n.year<2020?null:"You need to be born before 2020",transformer:n=>null==n?void 0:n.toDateString()},{type:"switch",name:"enable_feature1",message:"Enable some analytics",default:!1,guiOptions:{additionalData:{semantic:!0}}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){this.formValue=n,this.loading=!0,yield M(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-field-layout-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},features:[e._Bn([{provide:F.ed,useClass:F.CP},{provide:F.eZ,useValue:F.hx}])],decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Form Generator with field layout example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,Ae,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,Ge,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2}),o})();function Ie(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function Le(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}let Oe=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"labelWithoutColon",message:"Label without colon",guiOptions:{hint:"Some contextual hint",column:1,appendColon:!1}},{type:"input",name:"labelWithColon",message:"Label with colon",guiOptions:{hint:"Some contextual hint",column:1,appendColon:!0}}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){this.formValue=n,this.loading=!0,yield((o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)}))(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-no-colons-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Form Generator example without colons in label",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,Ie,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,Le,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2}),o})();function Ee(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function De(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}let Ue=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{name:"personalInformation",message:"Personal information",items:[{type:"input",name:"firstName",message:"Your name",default:"John",placeholder:"Please provide your first name",guiOptions:{hint:"Some contextual hint",column:1},validators:[l.kI.required]},{type:"input",name:"secondName",message:"Your name",default:"Doe",placeholder:"Please provide your second name",guiOptions:{hint:"Some contextual hint",column:2},validators:[l.kI.required]}]},{name:"contactInformation",message:"Contact information",items:[{type:"input",name:"state",message:"State/Province",placeholder:"Please provide your state or province name",guiOptions:{hint:"Some contextual hint",column:1},validators:[l.kI.required]},{type:"input",name:"street",message:"Street",placeholder:"Please provide your street name",guiOptions:{hint:"Some contextual hint",column:2},validators:[l.kI.required]}]}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){console.log(n),this.formValue=n,this.loading=!0,yield((o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)}))(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-grouping-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},decls:5,vars:4,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,Ee,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,De,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2,changeDetection:0}),o})();function qe(o,a){if(1&o){const n=e.EpF();e.TgZ(0,"fdp-button",3),e.NdJ("click",function(){return e.CHM(n),e.oxw().submitForm()}),e.qZA()}}function Ve(o,a){if(1&o&&(e.TgZ(0,"p"),e._uU(1),e.ALo(2,"json"),e.qZA()),2&o){const n=e.oxw();e.xp6(1),e.hij("Form value: ",e.lcZ(2,1,n.formValue),"")}}const k=function(){return{S:12,M:12}};let Ye=(()=>{class o{constructor(){this.loading=!1,this.formCreated=!1,this.questions=[{type:"input",name:"formGroupColumnDefinition",message:"Form container column layout definition",default:"John",placeholder:"Please provide your first name",guiOptions:{hint:"Some contextual hint",column:1},validators:[l.kI.required]},{name:"personalInformation",message:"Form field group column layout definition",guiOptions:{labelColumnLayout:{S:12,M:4},fieldColumnLayout:{S:12,M:8}},items:[{type:"input",name:"firstName",message:"Your name",default:"John",placeholder:"Please provide your first name",guiOptions:{hint:"Some contextual hint",column:1},validators:[l.kI.required]},{type:"input",name:"secondName",message:"Your name",default:"Doe",placeholder:"Please provide your second name",guiOptions:{hint:"Some contextual hint",column:2},validators:[l.kI.required]}]},{name:"contactInformation",message:"Individual column layout per field",items:[{type:"input",name:"state",message:"State/Province",placeholder:"Please provide your state or province name",guiOptions:{hint:"Some contextual hint",column:1,labelColumnLayout:{S:12,M:4},fieldColumnLayout:{S:12,M:8}},validators:[l.kI.required]},{type:"input",name:"street",message:"Street",placeholder:"Please provide your street name",guiOptions:{hint:"Some contextual hint",column:2,labelColumnLayout:{S:12,M:4},fieldColumnLayout:{S:12,M:8}},validators:[l.kI.required]}]}]}onFormCreated(){this.formCreated=!0}onFormSubmitted(n){return(0,_.mG)(this,void 0,void 0,function*(){console.log(n),this.formValue=n,this.loading=!0,yield((o=200)=>new Promise(a=>{setTimeout(()=>{a(!0)},o)}))(5e3),this.loading=!1})}submitForm(){this.formGenerator.submit()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-custom-field-layout-example"]],viewQuery:function(n,t){if(1&n&&e.Gf(d.CI,5),2&n){let s;e.iGM(s=e.CRH())&&(t.formGenerator=s.first)}},decls:5,vars:8,consts:[["columnLayout","XL2-L2-M2-S1","mainTitle","Default Form Generator example",3,"formItems","labelColumnLayout","fieldColumnLayout","formSubmitted","formCreated"],["type","submit","label","Submit form",3,"click",4,"ngIf"],[4,"ngIf"],["type","submit","label","Submit form",3,"click"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e.NdJ("formSubmitted",function(x){return t.onFormSubmitted(x)})("formCreated",function(){return t.onFormCreated()}),e.qZA(),e.YNc(1,qe,1,0,"fdp-button",1),e.TgZ(2,"p"),e._uU(3),e.qZA(),e.YNc(4,Ve,3,3,"p",2)),2&n&&(e.Q6J("formItems",t.questions)("labelColumnLayout",e.DdM(6,k))("fieldColumnLayout",e.DdM(7,k)),e.xp6(1),e.Q6J("ngIf",t.formCreated),e.xp6(2),e.hij("Form created: ",t.formCreated,""),e.xp6(1),e.Q6J("ngIf",t.formValue))},directives:[I.C,p.O5,L.r],pipes:[p.Ts],encapsulation:2,changeDetection:0}),o})(),ke=(()=>{class o{constructor(){this.formItemsAutoHintPlacement=[{type:"input",name:"firstName",message:"First Name",guiOptions:{hint:"Some hint for name"}},{type:"input",name:"lastName",message:"Last Name",guiOptions:{hint:"Some hint for last name"}}],this.formItemsLabelHintPlacement=[{type:"input",name:"firstName",message:"First Name",guiOptions:{hint:{text:"Some hint for name",target:"label"}}},{type:"input",name:"lastName",message:"Last Name",guiOptions:{hint:{text:"Some hint for last name",target:"label"}}}],this.formItemsHintOnGroupHeader=[{name:"firstAndLastName",message:"First and last name",guiOptions:{hint:"Some contextual hint on group header"},items:[{type:"input",name:"firstName",message:"First Name",guiOptions:{hint:{text:"Some hint for name",target:"label"}}},{type:"input",name:"lastName",message:"Last Name",guiOptions:{hint:{text:"Some hint for last name",target:"label"}}}]}],this.formGeneratorMainHint={text:"Some hint for main title"}}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["fdp-platform-form-generator-inline-help-example"]],decls:8,vars:5,consts:[["mainTitle","Hints will be automatically moved to the input if screen size is >= M breakpoint",3,"formItems"],["type","submit","label","Submit form"],["mainTitle","Hints will be always on label",3,"formItems"],["mainTitle","Group headers can have hints",3,"formItems"],["mainTitle","Form generator with hint",3,"formItems","hint"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-form-generator",0),e._UZ(1,"fdp-button",1),e.qZA(),e.TgZ(2,"fdp-form-generator",2),e._UZ(3,"fdp-button",1),e.qZA(),e.TgZ(4,"fdp-form-generator",3),e._UZ(5,"fdp-button",1),e.qZA(),e.TgZ(6,"fdp-form-generator",4),e._UZ(7,"fdp-button",1),e.qZA()),2&n&&(e.Q6J("formItems",t.formItemsAutoHintPlacement),e.xp6(2),e.Q6J("formItems",t.formItemsLabelHintPlacement),e.xp6(2),e.Q6J("formItems",t.formItemsHintOnGroupHeader),e.xp6(2),e.Q6J("formItems",t.formItemsHintOnGroupHeader)("hint",t.formGeneratorMainHint))},directives:[I.C,L.r],encapsulation:2}),o})(),Je=(()=>{class o{constructor(){this.defaultFormGenerator=[{language:"html",code:V,fileName:"platform-form-generator-example"},{language:"typescript",code:J,fileName:"platform-form-generator-example",component:"PlatformFormGeneratorExampleComponent"}],this.defaultObservableFormGenerator=[{language:"html",code:X,fileName:"platform-form-generator-observable-example"},{language:"typescript",code:H,fileName:"platform-form-generator-observable-example",component:"PlatformFormGeneratorObservableExampleComponent"}],this.customFormGenerator=[{language:"html",code:R,fileName:"platform-form-generator-custom-component-example"},{language:"typescript",code:Q,fileName:"platform-form-generator-custom-component-example",component:"PlatformFormGeneratorCustomComponentExampleComponent"}],this.programaticSubmit=[{language:"html",code:B,fileName:"platform-form-generator-programatic-submit"},{language:"typescript",code:j,fileName:"platform-form-generator-programatic-submit",component:"PlatformFormGeneratorProgramaticSubmitComponent"}],this.customErrors=[{language:"html",code:z,fileName:"platform-form-generator-custom-error-example"},{language:"typescript",code:$,fileName:"platform-form-generator-custom-error-example",component:"PlatformFormGeneratorCustomErrorExampleComponent"}],this.formFieldLayoutGenerator=[{language:"html",code:W,fileName:"platform-form-generator-field-layout-example"},{language:"typescript",code:K,fileName:"platform-form-generator-field-layout-example",component:"PlatformFormGeneratorFieldLayoutExampleComponent"}],this.noLabelColonsFiles=[{language:"html",code:ee,fileName:"platform-form-generator-no-colons-example"},{language:"typescript",code:ne,fileName:"platform-form-generator-no-colons-example",component:"PlatformFormGeneratorNoColonsExampleComponent"}],this.groupingFiles=[{language:"html",code:oe,fileName:"platform-form-generator-grouping-example"},{language:"typescript",code:te,fileName:"platform-form-generator-grouping-example",component:"PlatformFormGeneratorGroupingExampleComponent"}],this.customLayoutFiles=[{language:"html",code:re,fileName:"platform-form-generator-custom-field-layout-example"},{language:"typescript",code:ae,fileName:"platform-form-generator-custom-field-layout-example",component:"PlatformFormGeneratorCustomFieldLayoutExampleComponent"}],this.inlineHelpFiles=[{language:"html",code:me,fileName:"platform-form-generator-inline-help-example"},{language:"typescript",code:ie,fileName:"platform-form-generator-inline-help-example",component:"PlatformFormGeneratorInlineHelpExampleComponent"}]}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["app-form-generator"]],decls:183,vars:10,consts:[["id","with-promise","componentName","form-generator"],[3,"exampleFiles"],["id","with-observable","componentName","form-generator"],["id","custom","componentName","form-generator"],["id","programmatic-submit","componentName","form-generator"],["id","custom-errors","componentName","form-generator"],["id","field-layout","componentName","form-generator"],["id","no-colons","componentName","form-generator"],["id","grouping-of-fields","componentName","form-generator"],["id","custom-field-layout","componentName","form-generator"],["routerLink","/platform/form-container"],["id","inline-help","componentName","form-generator"]],template:function(n,t){1&n&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," Form Generator usage with Promise-based values\n"),e.qZA(),e.TgZ(2,"description"),e._uU(3," This example shows default scenario of the Form Generator usage with values received from Promise-like functions.\n"),e.qZA(),e.TgZ(4,"component-example"),e._UZ(5,"fdp-platform-form-generator-example"),e.qZA(),e._UZ(6,"code-example",1)(7,"separator"),e.TgZ(8,"fd-docs-section-title",2),e._uU(9," Form Generator usage with Observable-based values\n"),e.qZA(),e.TgZ(10,"description"),e._uU(11," This example shows default scenario of the Form Generator usage with values received from Observable objects.\n"),e.qZA(),e.TgZ(12,"component-example"),e._UZ(13,"fdp-platform-form-generator-observable-example"),e.qZA(),e._UZ(14,"code-example",1)(15,"separator"),e.TgZ(16,"fd-docs-section-title",3),e._uU(17," Form generator usage with custom controls\n"),e.qZA(),e.TgZ(18,"description"),e._uU(19," If default set of controls is not enough to cover your needs, "),e.TgZ(20,"code"),e._uU(21,"FormGeneratorService"),e.qZA(),e._uU(22," allows to define custom controls and render them for respective question types. In order to make your component work properly, it should follow these requirements: "),e.TgZ(23,"ul")(24,"li"),e._uU(25," Component "),e.TgZ(26,"b"),e._uU(27,"must"),e.qZA(),e._uU(28," include these "),e.TgZ(29,"code"),e._uU(30,"viewProviders: [dynamicFormFieldProvider, dynamicFormGroupChildProvider]"),e.qZA(),e._uU(31,", which can be imported from "),e.TgZ(32,"code"),e._uU(33,"@fundamental-ngx/platform"),e.qZA(),e._uU(34,"; "),e.qZA(),e.TgZ(35,"li"),e._uU(36," Component "),e.TgZ(37,"b"),e._uU(38,"must"),e.qZA(),e._uU(39," inherit "),e.TgZ(40,"code"),e._uU(41,"BaseDynamicFormGeneratorControl"),e.qZA(),e._uU(42,", which can be imported from "),e.TgZ(43,"code"),e._uU(44,"@fundamental-ngx/platform"),e.qZA(),e._uU(45,"; "),e.qZA(),e.TgZ(46,"li"),e._uU(47," Inner form control should be wrapped with "),e.TgZ(48,"code"),e._uU(49,'<ng-container [formGroup]="form"></ng-container>'),e.qZA(),e._uU(50," and "),e.TgZ(51,"code"),e._uU(52,'<ng-container [formGroupName]="formGroupName"></ng-container>'),e.qZA(),e._uU(53," for appropriate binding to work. "),e.qZA()()(),e.TgZ(54,"component-example"),e._UZ(55,"fdp-platform-form-generator-custom-component-example"),e.qZA(),e._UZ(56,"code-example",1)(57,"separator"),e.TgZ(58,"fd-docs-section-title",4),e._uU(59," Form Generator programmatic submit\n"),e.qZA(),e.TgZ(60,"description"),e._uU(61," If you want to trigger form submission outside form generator component, this example shows how to do it.\n"),e.qZA(),e.TgZ(62,"component-example"),e._UZ(63,"fdp-platform-form-generator-programatic-submit"),e.qZA(),e._UZ(64,"code-example",1)(65,"separator"),e.TgZ(66,"fd-docs-section-title",5),e._uU(67," Custom errors in Form Generator\n"),e.qZA(),e.TgZ(68,"description"),e._uU(69," Form generator supports multiple ways of defining validation error hints: "),e.TgZ(70,"ul")(71,"li"),e._uU(72,"With validation function, which returns string if field is invalid;"),e.qZA(),e.TgZ(73,"li"),e._uU(74,"With predefined generic texts"),e.qZA()(),e._uU(75," If you want to change default validation error messages, you can use "),e.TgZ(76,"code"),e._uU(77,"addValidationErrorHint"),e.qZA(),e._uU(78," method in "),e.TgZ(79,"code"),e._uU(80,"FormGeneratorService"),e.qZA(),e._uU(81,". This will allow you to override default ones, and add new generic validation error messages.\n"),e.qZA(),e.TgZ(82,"component-example"),e._UZ(83,"fdp-platform-form-generator-custom-error-example"),e.qZA(),e._UZ(84,"code-example",1)(85,"separator"),e.TgZ(86,"fd-docs-section-title",6),e._uU(87," Form Generator with form field column layout and inline layout\n"),e.qZA(),e.TgZ(88,"description"),e._uU(89," This example shows arrangement of form-field based on "),e.TgZ(90,"code"),e._uU(91,"columnLayout"),e.qZA(),e._uU(92," values and "),e.TgZ(93,"code"),e._uU(94,"inLineLayout"),e.qZA(),e._uU(95," values.\n"),e.qZA(),e.TgZ(96,"component-example"),e._UZ(97,"fdp-platform-form-generator-field-layout-example"),e.qZA(),e._UZ(98,"code-example",1)(99,"separator"),e.TgZ(100,"fd-docs-section-title",7),e._uU(101," Form Generator labels without colons\n"),e.qZA(),e.TgZ(102,"description"),e._uU(103," By default, form generator labels rendered with colon at the end of the label. To disable this behaviour please specify "),e.TgZ(104,"code"),e._uU(105,"appendColon: false"),e.qZA(),e._uU(106," in "),e.TgZ(107,"code"),e._uU(108,"guiOptions"),e.qZA(),e._uU(109," object.\n"),e.qZA(),e.TgZ(110,"component-example"),e._UZ(111,"fdp-platform-form-generator-no-colons-example"),e.qZA(),e._UZ(112,"code-example",1)(113,"separator"),e.TgZ(114,"fd-docs-section-title",8),e._uU(115," Grouping of the fields\n"),e.qZA(),e.TgZ(116,"description")(117,"p"),e._uU(118,"Form generator supports grouping of the fields."),e.qZA(),e.TgZ(119,"p"),e._uU(120,"To achieve this, developers must pass group object into "),e.TgZ(121,"code"),e._uU(122,"[formItems]"),e.qZA(),e._uU(123," input array."),e.qZA()(),e.TgZ(124,"component-example"),e._UZ(125,"fdp-platform-form-generator-grouping-example"),e.qZA(),e._UZ(126,"code-example",1)(127,"separator"),e.TgZ(128,"fd-docs-section-title",9),e._uU(129," Custom form field column layout\n"),e.qZA(),e.TgZ(130,"description")(131,"p"),e._uU(132," Developers can define their own grid layout for the form field the same way as it's done for "),e.TgZ(133,"a",10),e._uU(134,"Form container"),e.qZA(),e._uU(135,". "),e.qZA(),e.TgZ(136,"p"),e._uU(137,"Below is the example of how to define custom grid layout for the form field component:"),e.qZA()(),e.TgZ(138,"component-example"),e._UZ(139,"fdp-platform-form-generator-custom-field-layout-example"),e.qZA(),e._UZ(140,"code-example",1),e.TgZ(141,"fd-docs-section-title",11),e._uU(142," Inline helps "),e.qZA(),e.TgZ(143,"description")(144,"code"),e._uU(145,"DynamicFormItem.guiOptions.hint"),e.qZA(),e._uU(146," can be either "),e.TgZ(147,"code"),e._uU(148,"string"),e.qZA(),e._uU(149," or "),e.TgZ(150,"code"),e._uU(151,"HintOptions"),e.qZA(),e._uU(152," for more control over appearance of hint. By default target for hints is "),e.TgZ(153,"code"),e._uU(154,"auto"),e.qZA(),e._uU(155,", meaning that it will be added to the label on "),e.TgZ(156,"b"),e._uU(157,"S"),e.qZA(),e._uU(158," breakpoint and will be added to the input over "),e.TgZ(159,"b"),e._uU(160,"S"),e.qZA(),e._uU(161,". If gap is not provided, then it will automatically add gap with size "),e.TgZ(162,"b"),e._uU(163,"1"),e.qZA(),e._uU(164," and subtract "),e.TgZ(165,"b"),e._uU(166,"1"),e.qZA(),e._uU(167," from "),e.TgZ(168,"code"),e._uU(169,"DynamicFormItem.guiOptions.fieldLayoutConfig"),e.qZA(),e._uU(170,". If any of the elements have inline help with target either "),e.TgZ(171,"code"),e._uU(172,"input"),e.qZA(),e._uU(173," or "),e.TgZ(174,"code"),e._uU(175,"auto"),e.qZA(),e._uU(176,", every form item in form generator will have gap size minimum of 1(more, if requested, by you, via "),e.TgZ(177,"code"),e._uU(178,"DynamicFormItem.guiOptions.gapLayoutConfig"),e.qZA(),e._uU(179,").\n"),e.qZA(),e.TgZ(180,"component-example"),e._UZ(181,"fdp-platform-form-generator-inline-help-example"),e.qZA(),e._UZ(182,"code-example",1)),2&n&&(e.xp6(6),e.Q6J("exampleFiles",t.defaultFormGenerator),e.xp6(8),e.Q6J("exampleFiles",t.defaultObservableFormGenerator),e.xp6(42),e.Q6J("exampleFiles",t.customFormGenerator),e.xp6(8),e.Q6J("exampleFiles",t.programaticSubmit),e.xp6(20),e.Q6J("exampleFiles",t.customErrors),e.xp6(14),e.Q6J("exampleFiles",t.defaultFormGenerator),e.xp6(14),e.Q6J("exampleFiles",t.noLabelColonsFiles),e.xp6(14),e.Q6J("exampleFiles",t.groupingFiles),e.xp6(14),e.Q6J("exampleFiles",t.customLayoutFiles),e.xp6(42),e.Q6J("exampleFiles",t.inlineHelpFiles))},directives:[le.k,Z.w,se.O,de,fe.E,ce.N,ye,Ce,Te,Se,Ze,Oe,Ue,i.yS,Ye,ke],encapsulation:2}),o})();var Xe=r(15517);const He=[{path:"",component:U,children:[{path:"",component:Je},{path:"api",component:m.h,data:{content:v.X.formGenerator}}]}];let Re=(()=>{class o{}return o.\u0275fac=function(n){return new(n||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[[i.Bz.forChild(He),c.g,d.U_,d.AY,d.Mk,g.R,P.Uy,h.UH,Xe.U$],i.Bz]}),o})()},31628:u=>{u.exports='<fdp-form-generator\n    [formItems]="questions"\n    mainTitle="Custom element in Form Generator example"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},42748:u=>{u.exports="import { Component } from '@angular/core';\n\nimport {\n    dynamicFormFieldProvider,\n    dynamicFormGroupChildProvider,\n    BaseDynamicFormGeneratorControl,\n    FormGeneratorService,\n    DynamicFormItem,\n    DynamicFormValue\n} from '@fundamental-ngx/platform/form';\n\n@Component({\n    selector: 'fdp-form-generator-slider',\n    template: `\n        <ng-container [formGroup]=\"form\">\n            <ng-container [formGroupName]=\"formGroupName\">\n                <fdp-slider\n                    [contentDensity]=\"formItem.guiOptions?.contentDensity\"\n                    [customValues]=\"formItem.choices\"\n                    [showTicks]=\"formItem.guiOptions?.additionalData?.showTicks\"\n                    [showTicksLabels]=\"formItem.guiOptions?.additionalData?.showTicksLabels\"\n                    [name]=\"name\"\n                    [formControlName]=\"name\"\n                ></fdp-slider>\n            </ng-container>\n        </ng-container>\n    `,\n    viewProviders: [dynamicFormFieldProvider, dynamicFormGroupChildProvider]\n})\nexport class PlatformFormGeneratorCustomSliderElementComponent extends BaseDynamicFormGeneratorControl {\n    constructor() {\n        super();\n    }\n}\n\n@Component({\n    selector: 'fdp-platform-form-generator-custom-component-example',\n    templateUrl: './platform-form-generator-custom-component-example.component.html'\n})\nexport class PlatformFormGeneratorCustomComponentExampleComponent {\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'slider',\n            name: 'some_slider',\n            message: 'Slider component',\n            default: { value: 30, label: 'Thirty' },\n            choices: [\n                { value: 10, label: 'Ten' },\n                { value: 20, label: 'Twenty' },\n                { value: 30, label: 'Thirty' },\n                { value: 40, label: 'Forty' }\n            ],\n            guiOptions: {\n                column: 1,\n                additionalData: {\n                    showTicks: true,\n                    showTicksLabels: true\n                }\n            }\n        }\n    ];\n\n    constructor(private readonly _formGeneratorService: FormGeneratorService) {\n        this._formGeneratorService.addComponent(PlatformFormGeneratorCustomSliderElementComponent, ['slider']);\n    }\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    onFormSubmitted(value: DynamicFormValue): void {\n        this.formValue = value;\n    }\n}\n"},30025:u=>{u.exports='<fdp-form-generator\n    [formItems]="formItems"\n    mainTitle="Custom validation in Form Generator example"\n    (formCreated)="onFormCreated()"\n></fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n'},25849:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DynamicFormItem, FormGeneratorComponent, FormGeneratorService } from '@fundamental-ngx/platform/form';\n\n@Component({\n    selector: 'fdp-platform-form-generator-custom-error-example',\n    templateUrl: './platform-form-generator-custom-error-example.component.html'\n})\nexport class PlatformFormGeneratorCustomErrorExampleComponent {\n    formCreated = false;\n\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    formItems: DynamicFormItem[] = [\n        {\n            type: 'input',\n            message: 'Custom validation error example',\n            name: 'custom_validation_error_example',\n            required: true,\n            validate: (value: string) => (value !== 'abc' ? null : \"This field value should not be equal to 'abc'\"),\n            guiOptions: {\n                hint: \"Type 'abc' to show validation error\"\n            }\n        },\n        {\n            type: 'input',\n            message: 'Default validation error example',\n            name: 'default_validation_error_example',\n            validators: [Validators.required],\n            guiOptions: {\n                hint: 'Keep it empty to see validation error on submit'\n            }\n        },\n        {\n            type: 'input',\n            name: 'custom_validation_example',\n            message: 'Custom generic validation error example',\n            validators: [Validators.pattern('^\\\\d+$')],\n            guiOptions: {\n                hint: 'This field will fail validation if non-numeric symbols are present in the input'\n            }\n        }\n    ];\n\n    constructor(private readonly _formGeneratorService: FormGeneratorService) {\n        this._formGeneratorService.addValidationErrorHint('pattern', 'This field is not matching the pattern');\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n}\n"},99016:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Default Form Generator example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n    [labelColumnLayout]="{ S: 12, M: 12 }"\n    [fieldColumnLayout]="{ S: 12, M: 12 }"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},30544:u=>{u.exports="import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-custom-field-layout-example',\n    templateUrl: './platform-form-generator-custom-field-layout-example.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class PlatformFormGeneratorCustomFieldLayoutExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'formGroupColumnDefinition',\n            message: 'Form container column layout definition',\n            default: 'John',\n            placeholder: 'Please provide your first name',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            validators: [Validators.required]\n        },\n        {\n            name: 'personalInformation',\n            message: 'Form field group column layout definition',\n            guiOptions: {\n                labelColumnLayout: { S: 12, M: 4 },\n                fieldColumnLayout: { S: 12, M: 8 }\n            },\n            items: [\n                {\n                    type: 'input',\n                    name: 'firstName',\n                    message: 'Your name',\n                    default: 'John',\n                    placeholder: 'Please provide your first name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 1\n                    },\n                    validators: [Validators.required]\n                },\n                {\n                    type: 'input',\n                    name: 'secondName',\n                    message: 'Your name',\n                    default: 'Doe',\n                    placeholder: 'Please provide your second name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 2\n                    },\n                    validators: [Validators.required]\n                }\n            ]\n        },\n        {\n            name: 'contactInformation',\n            message: 'Individual column layout per field',\n            items: [\n                {\n                    type: 'input',\n                    name: 'state',\n                    message: 'State/Province',\n                    placeholder: 'Please provide your state or province name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 1,\n                        labelColumnLayout: { S: 12, M: 4 },\n                        fieldColumnLayout: { S: 12, M: 8 }\n                    },\n                    validators: [Validators.required]\n                },\n                {\n                    type: 'input',\n                    name: 'street',\n                    message: 'Street',\n                    placeholder: 'Please provide your street name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 2,\n                        labelColumnLayout: { S: 12, M: 4 },\n                        fieldColumnLayout: { S: 12, M: 8 }\n                    },\n                    validators: [Validators.required]\n                }\n            ]\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        console.log(value);\n\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},41236:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Default Form Generator example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},25950:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport {\n    DATE_TIME_FORMATS,\n    DatetimeAdapter,\n    FD_DATETIME_FORMATS,\n    FdDate,\n    FdDatetimeAdapter\n} from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-example',\n    templateUrl: './platform-form-generator-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            name: 'some',\n            message: 'Some group name',\n            guiOptions: {\n                hint: 'Some contextual hint on group header'\n            },\n            items: [\n                {\n                    type: 'input',\n                    name: 'nameInGroup',\n                    message: 'Your name (group)',\n                    default: 'John',\n                    placeholder: 'Please provide your name',\n                    guiOptions: {\n                        hint: {\n                            text: 'Some contextual hint',\n                            glyph: 'accidental-leave'\n                        },\n                        column: 1\n                    },\n                    validate: async (value) => {\n                        await dummyAwaitablePromise();\n\n                        return value === 'John' ? null : 'Your name should be John';\n                    },\n                    transformer: async (value: any) => {\n                        await dummyAwaitablePromise();\n                        return `${value}777`;\n                    },\n                    validators: [Validators.required]\n                }\n            ]\n        },\n        {\n            type: 'input',\n            name: 'name',\n            message: 'Your name',\n            default: 'John',\n            placeholder: 'Please provide your name',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n\n                return value === 'John' ? null : 'Your name should be John';\n            },\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value)\n                    ? null\n                    : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character';\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age',\n            controlType: 'number',\n            message: () => 'Your age',\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship',\n            message: 'Your citizenship',\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: () => [\n                'USA',\n                'Germany',\n                {\n                    label: 'Ukraine',\n                    value: 'Ukraine'\n                }\n            ],\n            validators: [Validators.required],\n            validate: (input) => (input?.length > 0 ? null : 'You need to select some country')\n        },\n        {\n            type: 'list',\n            name: 'department',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: ['IT', 'Accounting', 'Management'],\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: async () => {\n                await dummyAwaitablePromise();\n                return ['Front-end', 'Back-end'];\n            },\n            when: async (formValue: any) => {\n                await dummyAwaitablePromise();\n                return formValue.department === 'IT';\n            },\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n                return value === 'Yes' ? null : 'You must agree';\n            },\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => (result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) =>\n                value !== null && value.year < 2020 ? null : 'You need to be born before 2020',\n            transformer: (value: FdDate) => value?.toDateString()\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        console.log(value);\n\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},39073:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Form Generator with field layout example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},34043:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport {\n    DatetimeAdapter,\n    DATE_TIME_FORMATS,\n    FdDate,\n    FdDatetimeAdapter,\n    FD_DATETIME_FORMATS\n} from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-field-layout-example',\n    templateUrl: './platform-form-generator-field-layout-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorFieldLayoutExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name1',\n            message: 'Your name: XL: 1, L: 2, M: 1, S: 2',\n            default: 'John',\n            placeholder: 'Please provide your name',\n            guiOptions: {\n                hint: 'Some contextual hint: XL: 1, L: 2, M: 1, S: 2',\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 }\n            },\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n\n                return value === 'John' ? null : 'Your name should be John';\n            },\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password1',\n            message: 'Password: XL: 1, L: 2, M: 2, S: 1',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value)\n                    ? null\n                    : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character';\n            },\n            guiOptions: {\n                hint: 'XL: 1, L: 2, M: 2, S: 1',\n                columnLayout: { XL: 1, L: 2, M: 2, S: 1 }\n            }\n        },\n        {\n            type: 'number',\n            name: 'age1',\n            controlType: 'number',\n            message: () => 'Your age: XL: 1, L: 2, M: 1, S: 1',\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 },\n                hint: 'XL: 1, L: 2, M: 1, S: 1'\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio1',\n            message: 'Your biography: XL: 2, L: 1, M: 2, S: 1',\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                hint: 'XL: 2, L: 1, M: 2, S: 1'\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship1',\n            message: 'Your citizenship: XL: 2 true, L: 1 false, M: 2 true, S: 1 false',\n            guiOptions: {\n                inline: true,\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                inlineLayout: { XL: true, L: false, M: true, S: false },\n                hint: 'XL: 2 true, L: 1 false, M: 2 true, S: 1 false'\n            },\n            choices: () => [\n                'USA',\n                'Germany',\n                {\n                    label: 'Ukraine',\n                    value: 'Ukraine'\n                }\n            ],\n            validators: [Validators.required],\n            validate: (input) => (input?.length > 0 ? null : 'You need to select some country')\n        },\n        {\n            type: 'list',\n            name: 'department1',\n            message: 'Department you work in: column: 2',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: ['IT', 'Accounting', 'Management'],\n            guiOptions: {\n                column: 2,\n                hint: 'column: 2'\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality1',\n            message: 'Main speciality: XL: 2, L: 1, M: 1, S: 1',\n            validators: [Validators.required],\n            choices: async () => {\n                await dummyAwaitablePromise();\n                return ['Front-end', 'Back-end'];\n            },\n            when: async (formValue: any) => {\n                await dummyAwaitablePromise();\n                return formValue.department === 'IT';\n            },\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 1, S: 1 },\n                hint: 'XL: 2, L: 1, M: 1, S: 1'\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree1',\n            message: 'Do you agree with terms and conditions?: XL: 2, L: 1, M: 2, S: 1',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: async (value) => {\n                await dummyAwaitablePromise();\n                return value === 'Yes' ? null : 'You must agree';\n            },\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 2, S: 1 },\n                hint: 'XL: 2, L: 1, M: 2, S: 1'\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option1',\n            message: 'Primary front-end framework: XL: 2 false, L: 1 true, M: 1 false, S: 1 true',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                columnLayout: { XL: 2, L: 1, M: 1 },\n                inlineLayout: { XL: false, L: true, M: false, S: true },\n                hint: 'XL: 2 false, L: 1 true, M: 1 false, S: 1 true'\n            },\n            validators: [Validators.required],\n            validate: (result: string) => (result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday1',\n            message: 'Your birthday: XL: 1, L: 2, M: 1, S: 1',\n            guiOptions: {\n                columnLayout: { XL: 1, L: 2, M: 1, S: 1 },\n                hint: 'XL: 1, L: 2, M: 1, S: 1'\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) =>\n                value !== null && value.year < 2020 ? null : 'You need to be born before 2020',\n            transformer: (value: FdDate) => value?.toDateString()\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature1',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},79163:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Default Form Generator example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},87385:u=>{u.exports="import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-grouping-example',\n    templateUrl: './platform-form-generator-grouping-example.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class PlatformFormGeneratorGroupingExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            name: 'personalInformation',\n            message: 'Personal information',\n            items: [\n                {\n                    type: 'input',\n                    name: 'firstName',\n                    message: 'Your name',\n                    default: 'John',\n                    placeholder: 'Please provide your first name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 1\n                    },\n                    validators: [Validators.required]\n                },\n                {\n                    type: 'input',\n                    name: 'secondName',\n                    message: 'Your name',\n                    default: 'Doe',\n                    placeholder: 'Please provide your second name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 2\n                    },\n                    validators: [Validators.required]\n                }\n            ]\n        },\n        {\n            name: 'contactInformation',\n            message: 'Contact information',\n            items: [\n                {\n                    type: 'input',\n                    name: 'state',\n                    message: 'State/Province',\n                    placeholder: 'Please provide your state or province name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 1\n                    },\n                    validators: [Validators.required]\n                },\n                {\n                    type: 'input',\n                    name: 'street',\n                    message: 'Street',\n                    placeholder: 'Please provide your street name',\n                    guiOptions: {\n                        hint: 'Some contextual hint',\n                        column: 2\n                    },\n                    validators: [Validators.required]\n                }\n            ]\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        console.log(value);\n\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},39723:u=>{u.exports='<fdp-form-generator\n    [formItems]="formItemsAutoHintPlacement"\n    mainTitle="Hints will be automatically moved to the input if screen size is >= M breakpoint"\n>\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n\n<fdp-form-generator [formItems]="formItemsLabelHintPlacement" mainTitle="Hints will be always on label">\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n\n<fdp-form-generator [formItems]="formItemsHintOnGroupHeader" mainTitle="Group headers can have hints">\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n\n<fdp-form-generator\n    [formItems]="formItemsHintOnGroupHeader"\n    [hint]="formGeneratorMainHint"\n    mainTitle="Form generator with hint"\n>\n    <fdp-button type="submit" label="Submit form"></fdp-button>\n</fdp-form-generator>\n'},29861:u=>{u.exports="import { Component } from '@angular/core';\nimport { DynamicFormItem } from '@fundamental-ngx/platform/form';\nimport { HintOptions } from '@fundamental-ngx/platform/shared';\n\n@Component({\n    selector: 'fdp-platform-form-generator-inline-help-example',\n    templateUrl: './platform-form-generator-inline-help-example.component.html'\n})\nexport class PlatformFormGeneratorInlineHelpExampleComponent {\n    formItemsAutoHintPlacement: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'firstName',\n            message: 'First Name',\n            guiOptions: {\n                hint: 'Some hint for name'\n            }\n        },\n        {\n            type: 'input',\n            name: 'lastName',\n            message: 'Last Name',\n            guiOptions: {\n                hint: 'Some hint for last name'\n            }\n        }\n    ];\n    formItemsLabelHintPlacement: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'firstName',\n            message: 'First Name',\n            guiOptions: {\n                hint: {\n                    text: 'Some hint for name',\n                    target: 'label'\n                }\n            }\n        },\n        {\n            type: 'input',\n            name: 'lastName',\n            message: 'Last Name',\n            guiOptions: {\n                hint: {\n                    text: 'Some hint for last name',\n                    target: 'label'\n                }\n            }\n        }\n    ];\n    formItemsHintOnGroupHeader: DynamicFormItem[] = [\n        {\n            name: 'firstAndLastName',\n            message: 'First and last name',\n            guiOptions: {\n                hint: 'Some contextual hint on group header'\n            },\n            items: [\n                {\n                    type: 'input',\n                    name: 'firstName',\n                    message: 'First Name',\n                    guiOptions: {\n                        hint: {\n                            text: 'Some hint for name',\n                            target: 'label'\n                        }\n                    }\n                },\n                {\n                    type: 'input',\n                    name: 'lastName',\n                    message: 'Last Name',\n                    guiOptions: {\n                        hint: {\n                            text: 'Some hint for last name',\n                            target: 'label'\n                        }\n                    }\n                }\n            ]\n        }\n    ];\n\n    formGeneratorMainHint: HintOptions = {\n        text: 'Some hint for main title'\n    };\n}\n"},34908:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Form Generator example without colons in label"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},98262:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\n\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-no-colons-example',\n    templateUrl: './platform-form-generator-no-colons-example.component.html'\n})\nexport class PlatformFormGeneratorNoColonsExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'labelWithoutColon',\n            message: 'Label without colon',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1,\n                appendColon: false\n            }\n        },\n        {\n            type: 'input',\n            name: 'labelWithColon',\n            message: 'Label with colon',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1,\n                appendColon: true\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},25261:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Default Form Generator example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button *ngIf="formCreated" (click)="submitForm()" type="submit" label="Submit form"></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},35577:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n    DatetimeAdapter,\n    DATE_TIME_FORMATS,\n    FdDate,\n    FdDatetimeAdapter,\n    FD_DATETIME_FORMATS\n} from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-observable-example',\n    templateUrl: './platform-form-generator-observable-example.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorObservableExampleComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name2',\n            message: 'Your name',\n            default: 'John',\n            placeholder: () => of('Please provide your name').pipe(delay(400)),\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            // Emulate some API request\n            validate: (value) => of(value === 'John' ? null : 'Your name should be John').pipe(delay(400)),\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password2',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value)\n                    ? null\n                    : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character';\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age2',\n            controlType: 'number',\n            message: () => of('Your age').pipe(delay(400)),\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio2',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship2',\n            message: 'Your citizenship',\n            validators: [Validators.required],\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: () =>\n                of([\n                    'USA',\n                    'Germany',\n                    {\n                        label: 'Ukraine',\n                        value: 'Ukraine'\n                    }\n                ]),\n            validate: (input) => (input?.length > 0 ? null : 'You need to select some country')\n        },\n        {\n            type: 'list',\n            name: 'department2',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: () => of(['IT', 'Accounting', 'Management']),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality2',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: () => of(['Front-end', 'Back-end']),\n            when: (formValue: any) => of(formValue.department === 'IT'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree2',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: (value) => of(value === 'Yes' ? null : 'You must agree'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option2',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => of(result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday2',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) =>\n                of(value !== null && value.year < 2020 ? null : 'You need to be born before 2020'),\n            transformer: (value: FdDate) => value?.toDateString()\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature2',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"},58e3:u=>{u.exports='<fdp-form-generator\n    columnLayout="XL2-L2-M2-S1"\n    mainTitle="Default Form Generator example"\n    [formItems]="questions"\n    (formSubmitted)="onFormSubmitted($event)"\n    (formCreated)="onFormCreated()"\n>\n</fdp-form-generator>\n\n<fdp-button\n    *ngIf="formCreated"\n    (click)="submitForm()"\n    type="submit"\n    label="Submit button outside form generator"\n></fdp-button>\n\n<p>Form created: {{ formCreated }}</p>\n\n<p *ngIf="formValue">Form value: {{ formValue | json }}</p>\n'},14012:u=>{u.exports="import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n    DatetimeAdapter,\n    DATE_TIME_FORMATS,\n    FdDate,\n    FdDatetimeAdapter,\n    FD_DATETIME_FORMATS\n} from '@fundamental-ngx/core/datetime';\nimport { DynamicFormItem, DynamicFormValue, FormGeneratorComponent } from '@fundamental-ngx/platform/form';\n\nexport const dummyAwaitablePromise = (timeout = 200): Promise<boolean> =>\n    new Promise<boolean>((resolve) => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n\n@Component({\n    selector: 'fdp-platform-form-generator-programatic-submit',\n    templateUrl: './platform-form-generator-programatic-submit.component.html',\n    providers: [\n        // Note that this is usually provided in the root of your application.\n        // Due to the limit of this example we must provide it on this level.\n        {\n            provide: DatetimeAdapter,\n            useClass: FdDatetimeAdapter\n        },\n        {\n            provide: DATE_TIME_FORMATS,\n            useValue: FD_DATETIME_FORMATS\n        }\n    ]\n})\nexport class PlatformFormGeneratorProgramaticSubmitComponent {\n    @ViewChild(FormGeneratorComponent) formGenerator: FormGeneratorComponent;\n\n    loading = false;\n\n    formCreated = false;\n    formValue: DynamicFormValue;\n\n    questions: DynamicFormItem[] = [\n        {\n            type: 'input',\n            name: 'name3',\n            message: 'Your name',\n            default: 'John',\n            guiOptions: {\n                hint: 'Some contextual hint',\n                column: 1\n            },\n            // Emulate some API request\n            validate: (value) => of(value === 'John' ? null : 'Your name should be John').pipe(delay(400)),\n            transformer: async (value: any) => {\n                await dummyAwaitablePromise();\n                return `${value}777`;\n            },\n            validators: [Validators.required]\n        },\n        {\n            type: 'password',\n            controlType: 'password',\n            name: 'password3',\n            message: 'Password',\n            validators: [Validators.required],\n            validate: (value: string) => {\n                const passwordPattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{8,}$');\n                return passwordPattern.test(value)\n                    ? null\n                    : 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character';\n            },\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'number',\n            name: 'age3',\n            controlType: 'number',\n            message: () => of('Your age').pipe(delay(400)),\n            default: '18',\n            validators: [Validators.required],\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'editor',\n            name: 'bio3',\n            message: 'Your biography',\n            guiOptions: {\n                column: 1\n            }\n        },\n        {\n            type: 'checkbox',\n            name: 'citizenship3',\n            message: 'Your citizenship',\n            guiOptions: {\n                inline: true,\n                column: 2\n            },\n            choices: () =>\n                of([\n                    'USA',\n                    'Germany',\n                    {\n                        label: 'Ukraine',\n                        value: 'Ukraine'\n                    }\n                ]),\n            validators: [Validators.required],\n            validate: (input) => (input?.length > 0 ? null : 'You need to select some country')\n        },\n        {\n            type: 'list',\n            name: 'department3',\n            message: 'Department you work in',\n            validators: [Validators.required],\n            default: 'IT',\n            choices: () => of(['IT', 'Accounting', 'Management']),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'list',\n            name: 'main_speciality3',\n            message: 'Main speciality',\n            validators: [Validators.required],\n            choices: () => of(['Front-end', 'Back-end']),\n            when: (formValue: any) => of(formValue.department === 'IT'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'confirm',\n            name: 'agree3',\n            message: 'Do you agree with terms and conditions?',\n            choices: ['Yes', 'No'],\n            validators: [Validators.required],\n            validate: (value) => of(value === 'Yes' ? null : 'You must agree'),\n            guiOptions: {\n                column: 2\n            }\n        },\n        {\n            type: 'radio',\n            name: 'choose_best_option3',\n            message: 'Primary front-end framework you use',\n            choices: ['Angular', 'React', 'VueJS'],\n            guiOptions: {\n                column: 2\n            },\n            validators: [Validators.required],\n            validate: (result: string) => of(result === 'Angular' ? null : 'You should pick Angular')\n        },\n        {\n            type: 'datepicker',\n            name: 'birthday3',\n            message: 'Your birthday',\n            guiOptions: {\n                column: 1\n            },\n            validators: [Validators.required],\n            validate: (value: FdDate) =>\n                of(value !== null && value.year < 2020 ? null : 'You need to be born before 2020'),\n            transformer: (value: FdDate) => value?.toDateString()\n        },\n        {\n            type: 'switch',\n            name: 'enable_feature3',\n            message: 'Enable some analytics',\n            default: false,\n            guiOptions: {\n                additionalData: {\n                    semantic: true\n                }\n            }\n        }\n    ];\n\n    onFormCreated(): void {\n        this.formCreated = true;\n    }\n\n    async onFormSubmitted(value: DynamicFormValue): Promise<void> {\n        this.formValue = value;\n\n        this.loading = true;\n\n        // Simulate API request\n        await dummyAwaitablePromise(5000);\n\n        this.loading = false;\n    }\n\n    submitForm(): void {\n        this.formGenerator.submit();\n    }\n}\n"}}]);