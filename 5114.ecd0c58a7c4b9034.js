"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5114],{45114:(fe,E,d)=>{d.r(E),d.d(E,{PlatformUploadCollectionDocsModule:()=>ue});var v=d(7912),m=d(8953),N=d(58027),L=d(69979),M=d(67949);const g="import { HttpClient } from '@angular/common/http';\nimport { merge, Observable, of, Subject } from 'rxjs';\nimport { delay, map, takeUntil, tap } from 'rxjs/operators';\n\nimport { uuidv4 } from '@fundamental-ngx/core/utils';\nimport {\n    CancelUploadNewFileEvent,\n    DeleteEvent,\n    DownloadEvent,\n    FileRenamedEvent,\n    MoveToEvent,\n    NewFolderEvent,\n    UpdateVersionEvent,\n    UploadCollectionDataProvider,\n    UploadCollectionFile,\n    UploadCollectionFolder,\n    UploadCollectionItem,\n    UploadCollectionItemStatus,\n    UploadCollectionNewItem,\n    UploadEvent\n} from '@fundamental-ngx/platform/upload-collection';\n\nimport { generateUploadCollectionItems } from './platform-upload-collection-items-generator';\n\nenum CancelActiveRequest {\n    UPDATE,\n    NEW_FOLDER,\n    UPDATE_VERSION\n}\n\nexport class PlatformUploadCollectionDataProviderExample extends UploadCollectionDataProvider {\n    items: UploadCollectionItem[] = generateUploadCollectionItems(50, 4, 2);\n    private _cancelUploadNewFileIds: (string | number)[] = [];\n    private _activeRequest: CancelActiveRequest | null = null;\n\n    constructor(private readonly _http: HttpClient) {\n        super();\n    }\n\n    /** The method is triggered when valid files are selected in the file uploader dialog. */\n    upload({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('upload', parentFolderId, items);\n\n        this._activeRequest = CancelActiveRequest.UPDATE;\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const newFiles: UploadCollectionNewItem[] = items.map((item) => {\n                    delete item.file;\n                    item.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n                    return {\n                        temporaryDocumentId: item.documentId,\n                        item\n                    };\n                });\n\n                this._findParentFolderAndAddNewFiles(parentFolderId, newFiles);\n                this._activeRequest = null;\n            })\n        );\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Download button is pressed. */\n    download(data: DownloadEvent): Observable<void> {\n        console.log('download', data);\n\n        const obs = data.items.map((file) =>\n            this._http.get(file.url, { responseType: 'blob' }).pipe(\n                map((blob) => ({\n                    blob,\n                    file\n                }))\n            )\n        );\n\n        return merge(...obs).pipe(\n            map(({ file, blob }) => {\n                const a = document.createElement('a');\n                const objectUrl = URL.createObjectURL(blob);\n                a.href = objectUrl;\n                a.download = file.name;\n                a.click();\n                URL.revokeObjectURL(objectUrl);\n\n                return;\n            })\n        );\n    }\n\n    /**\n     * The method is triggered when Move to button is pressed and folder to move is selected in the dialog modal.\n     * Should return full dataSource\n     * */\n    moveTo({ from, to, items, newFolder }: MoveToEvent): Observable<UploadCollectionItem[]> {\n        console.log('moveTo', from, to, items, newFolder);\n\n        const ids = items.map((item) => item.documentId as string);\n\n        this._findParentFolderAndRemoveItemsByIds(from ? from.documentId : null, ids);\n        if (newFolder) {\n            const folder = this._generateNewFolder(newFolder.folderName);\n\n            this._findParentFolderAndAddFiles(newFolder.parentFolderId, [folder]);\n            this._findParentFolderAndAddFiles(folder.documentId!, items);\n        } else {\n            this._findParentFolderAndAddFiles(to ? to.documentId! : null, items);\n        }\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Delete button is pressed. */\n    delete({ parentFolderId, items }: DeleteEvent): Observable<UploadCollectionItem[]> {\n        console.log('delete', parentFolderId, items);\n\n        const ids = items.map((item) => item.documentId as string);\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when the file name is changed. */\n    fileRenamed({ parentFolderId, item, fileName }: FileRenamedEvent): Observable<UploadCollectionItem[]> {\n        console.log('fileRenamed', parentFolderId, item, fileName);\n        const updatedItem = {\n            ...item,\n            name: fileName\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(delay(5000));\n    }\n\n    /** The method is triggered when the new folder added. */\n    newFolder({ parentFolderId, folder }: NewFolderEvent): Observable<UploadCollectionItem[]> {\n        console.log('newFolder', folder, parentFolderId);\n\n        this._activeRequest = CancelActiveRequest.NEW_FOLDER;\n        const complete = new Subject<void>();\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const folderId = folder.documentId as string;\n                const includes = this._cancelUploadNewFileIds.includes(folderId);\n\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== folderId);\n                    this._activeRequest = null;\n                    complete.next();\n                }\n            }),\n            takeUntil(complete),\n            tap(() => {\n                const uploadedFile = {\n                    temporaryDocumentId: folder.documentId as string,\n                    item: {\n                        ...folder,\n                        status: UploadCollectionItemStatus.SUCCESSFUL\n                    }\n                };\n\n                this._findParentFolderAndAddNewFiles(parentFolderId, [uploadedFile]);\n                this._activeRequest = null;\n            })\n        );\n    }\n\n    /** The method is triggered when Update Version button is pressed and valid file are selected in the file uploader dialog. */\n    updateVersion({ parentFolderId, item, newItem }: UpdateVersionEvent): Observable<UploadCollectionItem[]> {\n        console.log('updateVersion', parentFolderId, item);\n\n        this._activeRequest = CancelActiveRequest.UPDATE_VERSION;\n        const complete = new Subject();\n\n        return of(this.items).pipe(\n            delay(5000),\n            tap(() => {\n                const itemId = item.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                    this._activeRequest = null;\n                    complete.next(true);\n                }\n            }),\n            tap(() => {\n                const updatedItem: UploadCollectionFile = {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL,\n                    uploadedOn: new Date(),\n                    uploadedBy: {\n                        id: Date.now(),\n                        name: 'You'\n                    },\n                    version: +item.version,\n                    name: newItem.name,\n                    fileSize: newItem.size\n                };\n\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n                this._activeRequest = null;\n            }),\n            takeUntil(complete)\n        );\n    }\n\n    runAfterFail({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('runAfterFail', parentFolderId, items);\n        const item = items[0];\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: item.documentId,\n                item: {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL\n                }\n            }\n        ]);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when Cancel button is pressed */\n    cancelUploadNewFile({ parentFolderId, item }: CancelUploadNewFileEvent): Observable<UploadCollectionItem[]> {\n        console.log('cancelUploadNewFile', parentFolderId, item);\n        const id = item.documentId;\n        this._cancelUploadNewFileIds.push(id);\n\n        if (this._activeRequest === CancelActiveRequest.NEW_FOLDER) {\n            this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n        }\n\n        if (this._activeRequest === CancelActiveRequest.UPDATE) {\n            this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n        }\n\n        if (this._activeRequest === CancelActiveRequest.UPDATE_VERSION) {\n            delete item.status;\n            this._findParentFolderAndUpdateItem(parentFolderId, item);\n        }\n\n        return of([]);\n    }\n\n    /** @hidden */\n    private _findParentFolderAndUpdateItem(\n        parentFolderId: string | number | null | undefined,\n        updatedItem: UploadCollectionItem,\n        items = this.items\n    ): void {\n        if (!parentFolderId) {\n            const index = items.findIndex((item) => item.documentId === updatedItem.documentId);\n            if (index !== -1) {\n                items[index] = updatedItem;\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const index = currentItem.files.findIndex((item) => item.documentId === updatedItem.documentId);\n                if (index !== -1) {\n                    currentItem.files[i] = updatedItem;\n\n                    break;\n                }\n            } else {\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddNewFiles(\n        parentFolderId: string | number | null | undefined,\n        uploadedFiles: UploadCollectionNewItem[],\n        items = this.items\n    ): void {\n        if (uploadedFiles.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const uploadedFile = uploadedFiles.pop()!;\n            const index = items.findIndex((item) => item.documentId === uploadedFile.temporaryDocumentId);\n            if (index !== -1) {\n                items[index] = uploadedFile.item;\n            }\n\n            if (uploadedFiles.length > 0) {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const hash = uploadedFiles.reduce((res, file) => {\n                    res[file.temporaryDocumentId] = file.item;\n                    return res;\n                }, {});\n\n                currentItem.files = currentItem.files.map((item) =>\n                    item.documentId && hash[item.documentId] ? hash[item.documentId] : item\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddFiles(\n        parentFolderId: string | number | null,\n        files: UploadCollectionItem[],\n        items = this.items\n    ): void {\n        if (files.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            items.push(...files);\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files.push(...files);\n\n                break;\n            } else {\n                this._findParentFolderAndAddFiles(parentFolderId, files, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndRemoveItemsByIds(\n        parentFolderId: string | number | null | undefined,\n        documentsIds: (number | string)[],\n        items = this.items\n    ): void {\n        if (documentsIds.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const documentId = documentsIds.pop();\n            const index = items.findIndex((item) => item.documentId === documentId);\n            if (index !== -1) {\n                items.splice(index, 1);\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files = currentItem.files.filter(\n                    (item) => !documentsIds.some((documentId) => documentId === item.documentId)\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _generateNewFolder(folderName: string): UploadCollectionFolder {\n        return {\n            documentId: uuidv4(),\n            type: 'folder',\n            name: folderName,\n            uploadedBy: {\n                id: uuidv4(),\n                name: 'You'\n            },\n            uploadedOn: new Date(),\n            files: [],\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n    }\n}\n";var e=d(70074),J=d(41767),C=d(38276),V=d(8317),W=d(80528),f=d(86667),p=d(9237),Y=d(29054),_=d(1828),h=d(27303),P=d(48358),F=d(35879),u=d(10735);const U=["Liam","Noah","Oliver","William","Elijah","James","Benjamin","Lucas","Mason","Ethan","Alexander","Henry","Jacob","Michael","Daniel","Logan","Jackson","Sebastian","Jack","Aiden"],b=[".jpg",".png",".pdf",".xls"];function S(){const a="abcdefghijklmnopqrstuvwxyz";return a[Math.floor(Math.random()*a.length)].toUpperCase()}function T(a,o){return new Date(+a+Math.random()*(o.getTime()-a.getTime()))}function X(a,o){return a=Math.ceil(a),o=Math.floor(o),Math.floor(Math.random()*(o-a+1))+a}function A(a){const o=[];for(let n=0;n<a;n++){const t=U[Math.floor(Math.random()*U.length)],i=X(1,5242880),l=b[Math.floor(Math.random()*b.length)];let c;switch(l){case".jpg":case".png":c="https://picsum.photos/200";break;case".pdf":c="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";break;case".xls":c="https://file-examples-com.github.io/uploads/2017/02/file_example_XLS_10.xls"}!c||o.push({documentId:(0,u.k$)(),type:"file",name:`File-${n+1}${l}`,uploadedBy:{id:(0,u.k$)(),name:`${t} ${S()}.`},url:c,uploadedOn:T(new Date(2018,0,1),new Date),fileSize:i,version:Math.floor(10*Math.random())||1})}return o}function w(a,o=3,n=0){const t=[];for(let i=0;i<a;i++){const l=U[Math.floor(Math.random()*U.length)],c=A(Math.floor(10*Math.random()));o!==n&&c.push(...w(Math.floor(10*Math.random()),o,n+1)),t.push({documentId:(0,u.k$)(),type:"folder",name:`Folder-${i+1}`,uploadedBy:{id:(0,u.k$)(),name:`${l} ${S()}.`},uploadedOn:T(new Date(2018,0,1),new Date),files:c})}return t}var r=(()=>{return(a=r||(r={}))[a.UPDATE=0]="UPDATE",a[a.NEW_FOLDER=1]="NEW_FOLDER",a[a.UPDATE_VERSION=2]="UPDATE_VERSION",r;var a})();class x extends m.lR{constructor(o){super(),this._http=o,this.items=function k(a,o,n){return[...A(a),...w(o,n-1)]}(50,4,2),this._cancelUploadNewFileIds=[],this._activeRequest=null}upload({parentFolderId:o,items:n}){return console.log("upload",o,n),this._activeRequest=r.UPDATE,(0,p.of)(this.items).pipe((0,f.g)(5e3),(0,h.b)(()=>{const t=n.map(i=>(delete i.file,i.status=m.c4.SUCCESSFUL,{temporaryDocumentId:i.documentId,item:i}));this._findParentFolderAndAddNewFiles(o,t),this._activeRequest=null}))}download(o){console.log("download",o);const n=o.items.map(t=>this._http.get(t.url,{responseType:"blob"}).pipe((0,P.U)(i=>({blob:i,file:t}))));return(0,Y.T)(...n).pipe((0,P.U)(({file:t,blob:i})=>{const l=document.createElement("a"),c=URL.createObjectURL(i);l.href=c,l.download=t.name,l.click(),URL.revokeObjectURL(c)}))}moveTo({from:o,to:n,items:t,newFolder:i}){console.log("moveTo",o,n,t,i);const l=t.map(c=>c.documentId);if(this._findParentFolderAndRemoveItemsByIds(o?o.documentId:null,l),i){const c=this._generateNewFolder(i.folderName);this._findParentFolderAndAddFiles(i.parentFolderId,[c]),this._findParentFolderAndAddFiles(c.documentId,t)}else this._findParentFolderAndAddFiles(n?n.documentId:null,t);return(0,p.of)(this.items)}delete({parentFolderId:o,items:n}){console.log("delete",o,n);const t=n.map(i=>i.documentId);return this._findParentFolderAndRemoveItemsByIds(o,t),(0,p.of)(this.items)}fileRenamed({parentFolderId:o,item:n,fileName:t}){console.log("fileRenamed",o,n,t);const i=Object.assign(Object.assign({},n),{name:t});return this._findParentFolderAndUpdateItem(o,i),(0,p.of)(this.items).pipe((0,f.g)(5e3))}newFolder({parentFolderId:o,folder:n}){console.log("newFolder",n,o),this._activeRequest=r.NEW_FOLDER;const t=new _.x;return(0,p.of)(this.items).pipe((0,f.g)(5e3),(0,h.b)(()=>{const i=n.documentId;this._cancelUploadNewFileIds.includes(i)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(c=>c!==i),this._activeRequest=null,t.next())}),(0,F.R)(t),(0,h.b)(()=>{const i={temporaryDocumentId:n.documentId,item:Object.assign(Object.assign({},n),{status:m.c4.SUCCESSFUL})};this._findParentFolderAndAddNewFiles(o,[i]),this._activeRequest=null}))}updateVersion({parentFolderId:o,item:n,newItem:t}){console.log("updateVersion",o,n),this._activeRequest=r.UPDATE_VERSION;const i=new _.x;return(0,p.of)(this.items).pipe((0,f.g)(5e3),(0,h.b)(()=>{const l=n.documentId;this._cancelUploadNewFileIds.includes(l)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(s=>s!==l),this._activeRequest=null,i.next(!0))}),(0,h.b)(()=>{const l=Object.assign(Object.assign({},n),{status:m.c4.SUCCESSFUL,uploadedOn:new Date,uploadedBy:{id:Date.now(),name:"You"},version:+n.version,name:t.name,fileSize:t.size});this._findParentFolderAndUpdateItem(o,l),this._activeRequest=null}),(0,F.R)(i))}runAfterFail({parentFolderId:o,items:n}){console.log("runAfterFail",o,n);const t=n[0];return this._findParentFolderAndAddNewFiles(o,[{temporaryDocumentId:t.documentId,item:Object.assign(Object.assign({},t),{status:m.c4.SUCCESSFUL})}]),(0,p.of)(this.items)}cancelUploadNewFile({parentFolderId:o,item:n}){console.log("cancelUploadNewFile",o,n);const t=n.documentId;return this._cancelUploadNewFileIds.push(t),this._activeRequest===r.NEW_FOLDER&&this._findParentFolderAndRemoveItemsByIds(o,[t]),this._activeRequest===r.UPDATE&&this._findParentFolderAndRemoveItemsByIds(o,[t]),this._activeRequest===r.UPDATE_VERSION&&(delete n.status,this._findParentFolderAndUpdateItem(o,n)),(0,p.of)([])}_findParentFolderAndUpdateItem(o,n,t=this.items){if(o)for(let i=0;i<t.length;i++){const l=t[i];if("folder"===l.type)if(l.documentId===o){if(-1!==l.files.findIndex(s=>s.documentId===n.documentId)){l.files[i]=n;break}}else this._findParentFolderAndUpdateItem(o,n,l.files)}else{const i=t.findIndex(l=>l.documentId===n.documentId);-1!==i&&(t[i]=n)}}_findParentFolderAndAddNewFiles(o,n,t=this.items){if(0!==n.length){if(!o){const i=n.pop(),l=t.findIndex(c=>c.documentId===i.temporaryDocumentId);return-1!==l&&(t[l]=i.item),void(n.length>0&&this._findParentFolderAndAddNewFiles(o,n))}for(let i=0;i<t.length;i++){const l=t[i];if("folder"===l.type){if(l.documentId===o){const c=n.reduce((s,R)=>(s[R.temporaryDocumentId]=R.item,s),{});l.files=l.files.map(s=>s.documentId&&c[s.documentId]?c[s.documentId]:s);break}this._findParentFolderAndAddNewFiles(o,n,l.files)}}}}_findParentFolderAndAddFiles(o,n,t=this.items){if(0!==n.length){if(!o)return void t.push(...n);for(let i=0;i<t.length;i++){const l=t[i];if("folder"===l.type){if(l.documentId===o){l.files.push(...n);break}this._findParentFolderAndAddFiles(o,n,l.files)}}}}_findParentFolderAndRemoveItemsByIds(o,n,t=this.items){if(0!==n.length){if(!o){const i=n.pop(),l=t.findIndex(c=>c.documentId===i);return void(-1!==l&&(t.splice(l,1),this._findParentFolderAndRemoveItemsByIds(o,n)))}for(let i=0;i<t.length;i++){const l=t[i];if("folder"===l.type){if(l.documentId===o){l.files=l.files.filter(c=>!n.some(s=>s===c.documentId));break}this._findParentFolderAndRemoveItemsByIds(o,n,l.files)}}}}_generateNewFolder(o){return{documentId:(0,u.k$)(),type:"folder",name:o,uploadedBy:{id:(0,u.k$)(),name:"You"},uploadedOn:new Date,files:[],status:m.c4.SUCCESSFUL}}}var I=d(78819),G=d(96919),y=d(58920);let K=(()=>{class a{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new m.mq(new ee(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return a.\u0275fac=function(n){return new(n||a)(e.Y36(I.eN))},a.\u0275cmp=e.Xpm({type:a,selectors:[["fdp-upload-collection-example"]],decls:1,vars:5,consts:[["fdCompact","","maxFileSize","1mb",3,"dataSource","maxFilenameLength","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(l){return t.typeMismatch(l)})("filenameLengthExceed",function(l){return t.filenameLengthExceed(l)})("fileSizeExceed",function(l){return t.fileSizeExceed(l)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},dependencies:[G.$,y.T],encapsulation:2}),a})();class ee extends x{fetch(o){return super.fetch(o).pipe((0,f.g)(300))}}let ne=(()=>{class a{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new m.mq(new x(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return a.\u0275fac=function(n){return new(n||a)(e.Y36(I.eN))},a.\u0275cmp=e.Xpm({type:a,selectors:[["fdp-upload-collection-disabled-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","disabled","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(l){return t.typeMismatch(l)})("filenameLengthExceed",function(l){return t.filenameLengthExceed(l)})("fileSizeExceed",function(l){return t.fileSizeExceed(l)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("disabled",!0)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},dependencies:[y.T],encapsulation:2}),a})(),te=(()=>{class a{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new m.mq(new x(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return a.\u0275fac=function(n){return new(n||a)(e.Y36(I.eN))},a.\u0275cmp=e.Xpm({type:a,selectors:[["fdp-upload-collection-readonly-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","readonly","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(l){return t.typeMismatch(l)})("filenameLengthExceed",function(l){return t.filenameLengthExceed(l)})("fileSizeExceed",function(l){return t.fileSizeExceed(l)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("readonly",!0)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},dependencies:[y.T],encapsulation:2}),a})(),oe=(()=>{class a{constructor(n){this._http=n,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new m.mq(new x(n))}typeMismatch({source:n,payload:t}){console.log("typeMismatch",n,t)}filenameLengthExceed({source:n,payload:t}){console.log("filenameLengthExceed",n,t)}fileSizeExceed({source:n,payload:t}){console.log("fileSizeExceed",n,t)}}return a.\u0275fac=function(n){return new(n||a)(e.Y36(I.eN))},a.\u0275cmp=e.Xpm({type:a,selectors:[["fdp-upload-collection-turn-off-example"]],decls:1,vars:7,consts:[["maxFileSize","1mb",3,"dataSource","maxFilenameLength","showSearch","enablePagination","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(n,t){1&n&&(e.TgZ(0,"fdp-upload-collection",0),e.NdJ("typeMismatch",function(l){return t.typeMismatch(l)})("filenameLengthExceed",function(l){return t.filenameLengthExceed(l)})("fileSizeExceed",function(l){return t.fileSizeExceed(l)}),e.qZA()),2&n&&e.Q6J("dataSource",t.dataSource)("maxFilenameLength",20)("showSearch",!1)("enablePagination",!1)("mimeTypes",t.mimeTypes)("fileTypes",t.fileTypes)("itemsPerPage",t.itemsPerPage)},dependencies:[y.T],encapsulation:2}),a})(),le=(()=>{class a{constructor(){this.uploadCollection=[{language:"html",code:'<fdp-upload-collection\n    fdCompact\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:"import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource,\n    UploadCollectionItem\n} from '@fundamental-ngx/platform/upload-collection';\nimport { Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-example',\n    templateUrl: './platform-upload-collection-example.component.html'\n})\nexport class PlatformUploadCollectionExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new DelayedPlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n\n// Simulating real http request by adding 300ms delay to the DataProvider's \"fetch\" method\n// this is needed to demonstrate loading behavior\nclass DelayedPlatformUploadCollectionDataProviderExample extends PlatformUploadCollectionDataProviderExample {\n    fetch(params: Map<string, any>): Observable<UploadCollectionItem[]> {\n        return super.fetch(params).pipe(delay(300));\n    }\n}\n",fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:g,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionReadOnly=[{language:"html",code:'<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [readonly]="true"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:"import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-readonly-example',\n    templateUrl: './platform-upload-collection-readonly-example.component.html'\n})\nexport class PlatformUploadCollectionReadonlyExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:g,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionDisabled=[{language:"html",code:'<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [disabled]="true"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:"import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-disabled-example',\n    templateUrl: './platform-upload-collection-disabled-example.component.html'\n})\nexport class PlatformUploadCollectionDisabledExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:g,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionTurnOff=[{language:"html",code:'<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    [maxFilenameLength]="20"\n    [showSearch]="false"\n    [enablePagination]="false"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:"import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform/upload-collection';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-turn-off-example',\n    templateUrl: './platform-upload-collection-turn-off-example.component.html'\n})\nexport class PlatformUploadCollectionTurnOffExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:g,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}]}}return a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=e.Xpm({type:a,selectors:[["app-platform-upload-collection"]],decls:47,vars:4,consts:[["id","default","componentName","upload-collection"],[3,"exampleFiles"],["id","disabled","componentName","upload-collection"],[1,"code-snippet"],["id","readonly","componentName","upload-collection"],["id","without-pagination-and-search","componentName","upload-collection"]],template:function(n,t){1&n&&(e.TgZ(0,"fd-docs-section-title",0),e._uU(1," Default "),e.qZA(),e._UZ(2,"description"),e.TgZ(3,"component-example"),e._UZ(4,"fdp-upload-collection-example"),e.qZA(),e._UZ(5,"code-example",1),e.TgZ(6,"fd-docs-section-title",2),e._uU(7," Disabled State "),e.qZA(),e.TgZ(8,"description"),e._uU(9,"Use "),e.TgZ(10,"code",3),e._uU(11,'[disable]="true"'),e.qZA(),e._uU(12," to disable all CRUD buttons."),e.qZA(),e.TgZ(13,"component-example"),e._UZ(14,"fdp-upload-collection-disabled-example"),e.qZA(),e._UZ(15,"code-example",1),e.TgZ(16,"fd-docs-section-title",4),e._uU(17," Readonly State "),e.qZA(),e.TgZ(18,"description"),e._uU(19,"Use "),e.TgZ(20,"code",3),e._uU(21,'[readonly]="true"'),e.qZA(),e._uU(22," to hide all CRUD buttons."),e.qZA(),e.TgZ(23,"component-example"),e._UZ(24,"fdp-upload-collection-readonly-example"),e.qZA(),e._UZ(25,"code-example",1),e.TgZ(26,"fd-docs-section-title",5),e._uU(27," Without Pagination and Search\n"),e.qZA(),e.TgZ(28,"description"),e._uU(29," Use "),e.TgZ(30,"code",3),e._uU(31,'[showSearch]="false"'),e.qZA(),e._uU(32," to hide search input, by default "),e.TgZ(33,"code",3),e._uU(34,'[showSearch]="true"'),e.qZA(),e._uU(35,". "),e._UZ(36,"br"),e._uU(37," Use "),e.TgZ(38,"code",3),e._uU(39,'[enablePagination]="false"'),e.qZA(),e._uU(40," to hide pagination, by default "),e.TgZ(41,"code",3),e._uU(42,'[enablePagination]="true"'),e.qZA(),e._uU(43,".\n"),e.qZA(),e.TgZ(44,"component-example"),e._UZ(45,"fdp-upload-collection-turn-off-example"),e.qZA(),e._UZ(46,"code-example",1)),2&n&&(e.xp6(5),e.Q6J("exampleFiles",t.uploadCollection),e.xp6(10),e.Q6J("exampleFiles",t.uploadCollectionDisabled),e.xp6(10),e.Q6J("exampleFiles",t.uploadCollectionReadOnly),e.xp6(21),e.Q6J("exampleFiles",t.uploadCollectionTurnOff))},dependencies:[J.E,C.w,V.k,W.O,K,ne,te,oe],encapsulation:2}),a})();var ae=d(11825),ie=d(92178),de=d(80320),ce=d(29785),se=d(10990);let me=(()=>{class a{}return a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=e.Xpm({type:a,selectors:[["fd-upload-collection-header"]],decls:31,vars:1,consts:[["label","SAP Ariba Component","title","SAP Ariba Component","color","8"],[1,"code-snippet"],["module","PlatformUploadCollectionModule","subPackage","upload-collection"],[3,"hasI18n"]],template:function(n,t){1&n&&(e.TgZ(0,"fd-doc-page")(1,"header"),e._uU(2,"Upload Collection"),e.qZA(),e._UZ(3,"fd-info-label",0),e.TgZ(4,"description")(5,"p"),e._uU(6,"The upload collection allows users to upload one or more files from different devices."),e.qZA(),e.TgZ(7,"h3"),e._uU(8,"Usage"),e.qZA(),e.TgZ(9,"p"),e._uU(10,"Use the upload collection if:"),e.qZA(),e.TgZ(11,"ul")(12,"li"),e._uU(13,"You want to show a list of uploaded files that can be modified."),e.qZA(),e.TgZ(14,"li"),e._uU(15,"You want to allow users to add or remove files, and to change the file names."),e.qZA()(),e.TgZ(16,"p"),e._uU(17,"Don't use the upload collection if:"),e.qZA(),e.TgZ(18,"ul")(19,"li"),e._uU(20,"The user can upload only one file to the app. In this case, use the FileUploader control instead."),e.qZA()(),e.TgZ(21,"h3"),e._uU(22,"Required"),e.qZA(),e.TgZ(23,"ul")(24,"li"),e._uU(25," To use all CRUD operations need to describe "),e.TgZ(26,"code",1),e._uU(27,"UploadCollectionService"),e.qZA(),e._uU(28," (look at examples) "),e.qZA()()(),e._UZ(29,"import",2)(30,"fd-header-tabs",3),e.qZA()),2&n&&(e.xp6(30),e.Q6J("hasI18n",!0))},dependencies:[ae.k,ie.G,de.c,C.w,ce.e,se.i],encapsulation:2}),a})();var D=d(61830),re=d(99916);const pe=[{path:"",component:me,children:[{path:"",component:le},{path:"api",component:L.h,data:{content:N.X.uploadCollection}},{path:"i18n",component:D.P,data:(0,D.G)("platformUploadCollection")}]}];let ue=(()=>{class a{}return a.\u0275fac=function(n){return new(n||a)},a.\u0275mod=e.oAB({type:a}),a.\u0275inj=e.cJS({providers:[(0,re.PP)("fdp-upload-collection")],imports:[v.Bz.forChild(pe),M.g,m.HD,v.Bz]}),a})()}}]);