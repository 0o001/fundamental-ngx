(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{"46OY":function(e,n,t){"use strict";t.r(n),t.d(n,"PlatformUploadCollectionDocsModule",function(){return te});var l={};t.r(l),t.d(l,"default",function(){return I});var o={};t.r(o),t.d(o,"default",function(){return b});var a={};t.r(a),t.d(a,"default",function(){return g});var d={};t.r(d),t.d(d,"default",function(){return F});var i={};t.r(i),t.d(i,"default",function(){return y});var r={};t.r(r),t.d(r,"default",function(){return x});var c={};t.r(c),t.d(c,"default",function(){return v});var s={};t.r(s),t.d(s,"default",function(){return U});var m={};t.r(m),t.d(m,"default",function(){return S});var p=t("tyNb"),u=t("XaOr"),f=t("jzzn"),h=t("IywY"),I="import { merge, Observable, of } from 'rxjs';\nimport { delay, map, tap } from 'rxjs/operators';\n\nimport {\n    CancelUploadNewFileEvent,\n    DeleteEvent,\n    DownloadEvent,\n    FileRenamedEvent,\n    MoveToEvent,\n    NewFolderEvent,\n    UpdateVersionEvent,\n    UploadCollectionDataProvider,\n    UploadCollectionFile,\n    UploadCollectionFolder,\n    UploadCollectionItem,\n    UploadCollectionItemStatus,\n    UploadCollectionNewItem,\n    UploadEvent\n} from '@fundamental-ngx/platform';\n\nimport { generateUploadCollectionItems } from './platform-upload-collection-items-generator';\nimport { HttpClient } from '@angular/common/http';\nimport { uuidv4 } from '@fundamental-ngx/core/utils';\n\nexport class PlatformUploadCollectionDataProviderExample extends UploadCollectionDataProvider {\n    items: UploadCollectionItem[] = generateUploadCollectionItems(50, 4, 2);\n    private _cancelUploadNewFileIds: (string | number)[] = [];\n\n    constructor(private readonly _http: HttpClient) {\n        super();\n    }\n\n    /** The method is triggered when valid files are selected in the file uploader dialog. */\n    upload({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('upload', parentFolderId, items);\n\n        const newFiles: UploadCollectionNewItem[] = items.map((item) => {\n            delete item.file;\n            item.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n            return {\n                temporaryDocumentId: item.documentId,\n                item: item\n            };\n        });\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, newFiles);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const ids = newFiles\n                    .filter((file) => {\n                        const includes = this._cancelUploadNewFileIds.includes(file.item.documentId);\n                        if (includes) {\n                            this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter(\n                                (id) => id !== file.item.documentId\n                            );\n                            return true;\n                        }\n\n                        return false;\n                    })\n                    .map((file) => file.item.documentId);\n\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids, updatedItems);\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Download button is pressed. */\n    download(data: DownloadEvent): Observable<void> {\n        console.log('download', data);\n\n        const obs = data.items.map((file) => {\n            return this._http.get(file.url, { responseType: 'blob' }).pipe(map(blob => ({\n                blob: blob,\n                file: file\n            })));\n        });\n\n        return merge(...obs).pipe(map(({ file, blob }) => {\n            const a = document.createElement('a');\n            const objectUrl = URL.createObjectURL(blob);\n            a.href = objectUrl;\n            a.download = file.name;\n            a.click();\n            URL.revokeObjectURL(objectUrl);\n\n            return null;\n        }));\n    }\n\n    /**\n     * The method is triggered when Move to button is pressed and folder to move is selected in the dialog modal.\n     * Should return full dataSource\n     * */\n    moveTo({ from, to, items, newFolder }: MoveToEvent): Observable<UploadCollectionItem[]> {\n        console.log('moveTo', from, to, items, newFolder);\n\n        const ids = items.map((item) => item.documentId);\n\n        this._findParentFolderAndRemoveItemsByIds(from ? from.documentId : null, ids);\n        if (newFolder) {\n            const folder = this._generateNewFolder(newFolder.folderName);\n\n            this._findParentFolderAndAddFiles(newFolder.parentFolderId, [folder]);\n            this._findParentFolderAndAddFiles(folder.documentId, items);\n        } else {\n            this._findParentFolderAndAddFiles(to ? to.documentId : null, items);\n        }\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when an uploaded attachment is selected and the Delete button is pressed. */\n    delete({ parentFolderId, items }: DeleteEvent): Observable<UploadCollectionItem[]> {\n        console.log('delete', parentFolderId, items);\n\n        const ids = items.map((item) => item.documentId);\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, ids);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when the file name is changed. */\n    fileRenamed({ parentFolderId, item, fileName }: FileRenamedEvent): Observable<UploadCollectionItem[]> {\n        console.log('fileRenamed', parentFolderId, item, fileName);\n        let updatedItem = {\n            ...item,\n            name: fileName,\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = item.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...updatedItem };\n                    updatedItem.name = item.name;\n                    updatedItem.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when the new folder added. */\n    newFolder({ parentFolderId, folder }: NewFolderEvent): Observable<UploadCollectionItem[]> {\n        console.log('newFolder', folder, parentFolderId);\n\n        folder.status = UploadCollectionItemStatus.SUCCESSFUL;\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: folder.documentId,\n                item: folder\n            }\n        ]);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const folderId = folder.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(folderId);\n                if (includes) {\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== folderId);\n                    this._findParentFolderAndRemoveItemsByIds(parentFolderId, [folderId], updatedItems);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    /** The method is triggered when Update Version button is pressed and valid file are selected in the file uploader dialog. */\n    updateVersion({ parentFolderId, item, newItem }: UpdateVersionEvent): Observable<UploadCollectionItem[]> {\n        console.log('updateVersion', parentFolderId, item);\n\n        let updatedItem: UploadCollectionFile = {\n            ...item,\n            status: UploadCollectionItemStatus.SUCCESSFUL,\n            uploadedOn: new Date(),\n            uploadedBy: {\n                id: Date.now(),\n                name: 'You'\n            },\n            version: +item.version,\n            name: newItem.name,\n            fileSize: newItem.size\n        };\n\n        this._findParentFolderAndUpdateItem(parentFolderId, updatedItem);\n\n        return of(this.items).pipe(\n            delay(5000),\n            map((updatedItems) => {\n                const itemId = updatedItem.documentId;\n                const includes = this._cancelUploadNewFileIds.includes(itemId);\n                if (includes) {\n                    updatedItem = { ...item };\n\n                    this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, updatedItems);\n                    this._cancelUploadNewFileIds = this._cancelUploadNewFileIds.filter((id) => id !== itemId);\n                }\n\n                return updatedItems;\n            })\n        );\n    }\n\n    runAfterFail({ parentFolderId, items }: UploadEvent): Observable<UploadCollectionItem[]> {\n        console.log('runAfterFail', parentFolderId, items);\n        const item = items[0];\n\n        this._findParentFolderAndAddNewFiles(parentFolderId, [\n            {\n                temporaryDocumentId: item.documentId,\n                item: {\n                    ...item,\n                    status: UploadCollectionItemStatus.SUCCESSFUL\n                }\n            }\n        ]);\n\n        return of(this.items);\n    }\n\n    /** The method is triggered when Cancel button is pressed */\n    cancelUploadNewFile({ parentFolderId, item }: CancelUploadNewFileEvent): Observable<UploadCollectionItem[]> {\n        console.log('cancelUploadNewFile', parentFolderId, item);\n        const id = item.documentId;\n        this._cancelUploadNewFileIds.push(id);\n\n        this._findParentFolderAndRemoveItemsByIds(parentFolderId, [id]);\n\n        return of(null);\n    }\n\n    /** @hidden */\n    private _findParentFolderAndUpdateItem(\n        parentFolderId: string | number | null,\n        updatedItem: UploadCollectionItem,\n        items = this.items\n    ): void {\n        if (!parentFolderId) {\n            const index = items.findIndex((item) => item.documentId === updatedItem.documentId);\n            if (index !== -1) {\n                items[index] = updatedItem;\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const index = currentItem.files.findIndex((item) => item.documentId === updatedItem.documentId);\n                if (index !== -1) {\n                    currentItem.files[i] = updatedItem;\n\n                    break;\n                }\n            } else {\n                this._findParentFolderAndUpdateItem(parentFolderId, updatedItem, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddNewFiles(\n        parentFolderId: string | number | null,\n        uploadedFiles: UploadCollectionNewItem[],\n        items = this.items\n    ): void {\n        if (uploadedFiles.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const uploadedFile = uploadedFiles.pop();\n            const index = items.findIndex((item) => item.documentId === uploadedFile.temporaryDocumentId);\n            if (index !== -1) {\n                items[index] = uploadedFile.item;\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                const hash = uploadedFiles.reduce((res, file) => {\n                    res[file.temporaryDocumentId] = file.item;\n                    return res;\n                }, {});\n\n                currentItem.files = currentItem.files.map((item) =>\n                    hash[item.documentId] ? hash[item.documentId] : item\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndAddNewFiles(parentFolderId, uploadedFiles, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndAddFiles(\n        parentFolderId: string | number | null,\n        files: UploadCollectionItem[],\n        items = this.items\n    ): void {\n        if (files.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            items.push(...files);\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files.push(...files);\n\n                break;\n            } else {\n                this._findParentFolderAndAddFiles(parentFolderId, files, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _findParentFolderAndRemoveItemsByIds(\n        parentFolderId: string | number | null,\n        documentsIds: (number | string)[],\n        items = this.items\n    ): void {\n        if (documentsIds.length === 0) {\n            return;\n        }\n\n        if (!parentFolderId) {\n            const documentId = documentsIds.pop();\n            const index = items.findIndex((item) => item.documentId === documentId);\n            if (index !== -1) {\n                items.splice(index, 1);\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds);\n            }\n\n            return;\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const currentItem = items[i];\n            if (currentItem.type !== 'folder') {\n                continue;\n            }\n\n            if (currentItem.documentId === parentFolderId) {\n                currentItem.files = currentItem.files.filter(\n                    (item) => !documentsIds.some((documentId) => documentId === item.documentId)\n                );\n\n                break;\n            } else {\n                this._findParentFolderAndRemoveItemsByIds(parentFolderId, documentsIds, currentItem.files);\n            }\n        }\n    }\n\n    /** @hidden */\n    private _generateNewFolder(folderName: string): UploadCollectionFolder {\n        return {\n            documentId: uuidv4(),\n            type: 'folder',\n            name: folderName,\n            uploadedBy: {\n                id: uuidv4(),\n                name: 'You'\n            },\n            uploadedOn: new Date(),\n            files: [],\n            status: UploadCollectionItemStatus.SUCCESSFUL\n        };\n    }\n}\n",b="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\n\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-example',\n    templateUrl: './platform-upload-collection-example.component.html'\n})\nexport class PlatformUploadCollectionExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",g='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',F="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-disabled-example',\n    templateUrl: './platform-upload-collection-disabled-example.component.html'\n})\nexport class PlatformUploadCollectionDisabledExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",y='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    disabled="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',x="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-readonly-example',\n    templateUrl: './platform-upload-collection-readonly-example.component.html'\n})\nexport class PlatformUploadCollectionReadonlyExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",v='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n\n    readonly="true"\n\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',U="import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\nimport {\n    ItemPerPage,\n    FilenameLengthExceedEvent,\n    FileSizeExceedEvent,\n    TypeMismatchEvent,\n    UploadCollectionDataSource\n} from '@fundamental-ngx/platform';\nimport { PlatformUploadCollectionDataProviderExample } from './platform-upload-collection-base-data-provider';\n\n@Component({\n    selector: 'fdp-upload-collection-turn-off-example',\n    templateUrl: './platform-upload-collection-turn-off-example.component.html'\n})\nexport class PlatformUploadCollectionTurnOffExampleComponent {\n    dataSource: UploadCollectionDataSource;\n    itemsPerPage: ItemPerPage[] = [\n        {\n            label: 5,\n            default: false\n        },\n        {\n            label: 10,\n            default: true\n        },\n        {\n            label: 15,\n            default: false\n        },\n        {\n            label: 20,\n            default: false\n        }\n    ];\n\n    mimeTypes: string[] = ['image/png', 'image/jpeg'];\n    fileTypes: string[] = ['jpg', 'png', 'bmp'];\n\n    constructor(private readonly _http: HttpClient) {\n        this.dataSource = new UploadCollectionDataSource(new PlatformUploadCollectionDataProviderExample(_http));\n    }\n\n    typeMismatch({ source, payload }: TypeMismatchEvent): void {\n        console.log('typeMismatch', source, payload);\n    }\n\n    filenameLengthExceed({ source, payload }: FilenameLengthExceedEvent): void {\n        console.log('filenameLengthExceed', source, payload);\n    }\n\n    fileSizeExceed({ source, payload }: FileSizeExceedEvent): void {\n        console.log('fileSizeExceed', source, payload);\n    }\n}\n",S='<fdp-upload-collection\n    [dataSource]="dataSource"\n    maxFileSize="1mb"\n    maxFilenameLength="20"\n    [showSearch]="false"\n    [enablePagination]="false"\n    [mimeTypes]="mimeTypes"\n    [fileTypes]="fileTypes"\n    [itemsPerPage]="itemsPerPage"\n    (typeMismatch)="typeMismatch($event)"\n    (filenameLengthExceed)="filenameLengthExceed($event)"\n    (fileSizeExceed)="fileSizeExceed($event)"\n></fdp-upload-collection>\n',E=t("fXoL"),P=t("ddaM"),w=t("kt86"),C=t("X1JU"),_=t("LRne"),T=t("VRyK"),A=t("3E0/"),N=t("lJxs"),L=t("t33z");const V=["Liam","Noah","Oliver","William","Elijah","James","Benjamin","Lucas","Mason","Ethan","Alexander","Henry","Jacob","Michael","Daniel","Logan","Jackson","Sebastian","Jack","Aiden"],M=[".jpg",".png",".pdf",".xls"];function D(){const e="abcdefghijklmnopqrstuvwxyz";return e[Math.floor(Math.random()*e.length)].toUpperCase()}function j(e,n){return new Date(+e+Math.random()*(n.getTime()-e.getTime()))}function O(e){const n=[];for(let o=0;o<e;o++){const e=V[Math.floor(Math.random()*V.length)],a=(t=1,l=5242880,t=Math.ceil(t),l=Math.floor(l),Math.floor(Math.random()*(l-t+1))+t),d=M[Math.floor(Math.random()*M.length)];let i;switch(d){case".jpg":case".png":i="https://picsum.photos/200";break;case".pdf":i="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";break;case".xls":i="https://file-examples-com.github.io/uploads/2017/02/file_example_XLS_10.xls"}n.push({documentId:Object(L.H)(),type:"file",name:`File-${o+1}${d}`,uploadedBy:{id:Object(L.H)(),name:`${e} ${D()}.`},url:i,uploadedOn:j(new Date(2018,0,1),new Date),fileSize:a,version:Math.floor(10*Math.random())||1})}var t,l;return n}function z(e,n=3,t=0){const l=[];for(let o=0;o<e;o++){const e=V[Math.floor(Math.random()*V.length)],a=O(Math.floor(10*Math.random()));n!==t&&a.push(...z(Math.floor(10*Math.random()),n,t+1)),l.push({documentId:Object(L.H)(),type:"folder",name:`Folder-${o+1}`,uploadedBy:{id:Object(L.H)(),name:`${e} ${D()}.`},uploadedOn:j(new Date(2018,0,1),new Date),files:a})}return l}class R extends u.ob{constructor(e){super(),this._http=e,this.items=[...O(50),...z(4,1)],this._cancelUploadNewFileIds=[]}upload({parentFolderId:e,items:n}){console.log("upload",e,n);const t=n.map(e=>(delete e.file,e.status=u.qb.SUCCESSFUL,{temporaryDocumentId:e.documentId,item:e}));return this._findParentFolderAndAddNewFiles(e,t),Object(_.a)(this.items).pipe(Object(A.a)(5e3),Object(N.a)(n=>{const l=t.filter(e=>!!this._cancelUploadNewFileIds.includes(e.item.documentId)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(n=>n!==e.item.documentId),!0)).map(e=>e.item.documentId);return this._findParentFolderAndRemoveItemsByIds(e,l,n),n}))}download(e){console.log("download",e);const n=e.items.map(e=>this._http.get(e.url,{responseType:"blob"}).pipe(Object(N.a)(n=>({blob:n,file:e}))));return Object(T.a)(...n).pipe(Object(N.a)(({file:e,blob:n})=>{const t=document.createElement("a"),l=URL.createObjectURL(n);return t.href=l,t.download=e.name,t.click(),URL.revokeObjectURL(l),null}))}moveTo({from:e,to:n,items:t,newFolder:l}){console.log("moveTo",e,n,t,l);const o=t.map(e=>e.documentId);if(this._findParentFolderAndRemoveItemsByIds(e?e.documentId:null,o),l){const e=this._generateNewFolder(l.folderName);this._findParentFolderAndAddFiles(l.parentFolderId,[e]),this._findParentFolderAndAddFiles(e.documentId,t)}else this._findParentFolderAndAddFiles(n?n.documentId:null,t);return Object(_.a)(this.items)}delete({parentFolderId:e,items:n}){console.log("delete",e,n);const t=n.map(e=>e.documentId);return this._findParentFolderAndRemoveItemsByIds(e,t),Object(_.a)(this.items)}fileRenamed({parentFolderId:e,item:n,fileName:t}){console.log("fileRenamed",e,n,t);let l=Object.assign(Object.assign({},n),{name:t,status:u.qb.SUCCESSFUL});return this._findParentFolderAndUpdateItem(e,l),Object(_.a)(this.items).pipe(Object(A.a)(5e3),Object(N.a)(t=>{const o=n.documentId;return this._cancelUploadNewFileIds.includes(o)&&(l=Object.assign({},l),l.name=n.name,l.status=u.qb.SUCCESSFUL,this._findParentFolderAndUpdateItem(e,l,t),this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(e=>e!==o)),t}))}newFolder({parentFolderId:e,folder:n}){return console.log("newFolder",n,e),n.status=u.qb.SUCCESSFUL,this._findParentFolderAndAddNewFiles(e,[{temporaryDocumentId:n.documentId,item:n}]),Object(_.a)(this.items).pipe(Object(A.a)(5e3),Object(N.a)(t=>{const l=n.documentId;return this._cancelUploadNewFileIds.includes(l)&&(this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(e=>e!==l),this._findParentFolderAndRemoveItemsByIds(e,[l],t)),t}))}updateVersion({parentFolderId:e,item:n,newItem:t}){console.log("updateVersion",e,n);let l=Object.assign(Object.assign({},n),{status:u.qb.SUCCESSFUL,uploadedOn:new Date,uploadedBy:{id:Date.now(),name:"You"},version:+n.version,name:t.name,fileSize:t.size});return this._findParentFolderAndUpdateItem(e,l),Object(_.a)(this.items).pipe(Object(A.a)(5e3),Object(N.a)(t=>{const o=l.documentId;return this._cancelUploadNewFileIds.includes(o)&&(l=Object.assign({},n),this._findParentFolderAndUpdateItem(e,l,t),this._cancelUploadNewFileIds=this._cancelUploadNewFileIds.filter(e=>e!==o)),t}))}runAfterFail({parentFolderId:e,items:n}){console.log("runAfterFail",e,n);const t=n[0];return this._findParentFolderAndAddNewFiles(e,[{temporaryDocumentId:t.documentId,item:Object.assign(Object.assign({},t),{status:u.qb.SUCCESSFUL})}]),Object(_.a)(this.items)}cancelUploadNewFile({parentFolderId:e,item:n}){console.log("cancelUploadNewFile",e,n);const t=n.documentId;return this._cancelUploadNewFileIds.push(t),this._findParentFolderAndRemoveItemsByIds(e,[t]),Object(_.a)(null)}_findParentFolderAndUpdateItem(e,n,t=this.items){if(e)for(let l=0;l<t.length;l++){const o=t[l];if("folder"===o.type)if(o.documentId===e){if(-1!==o.files.findIndex(e=>e.documentId===n.documentId)){o.files[l]=n;break}}else this._findParentFolderAndUpdateItem(e,n,o.files)}else{const e=t.findIndex(e=>e.documentId===n.documentId);-1!==e&&(t[e]=n)}}_findParentFolderAndAddNewFiles(e,n,t=this.items){if(0!==n.length)if(e)for(let l=0;l<t.length;l++){const o=t[l];if("folder"===o.type){if(o.documentId===e){const e=n.reduce((e,n)=>(e[n.temporaryDocumentId]=n.item,e),{});o.files=o.files.map(n=>e[n.documentId]?e[n.documentId]:n);break}this._findParentFolderAndAddNewFiles(e,n,o.files)}}else{const l=n.pop(),o=t.findIndex(e=>e.documentId===l.temporaryDocumentId);-1!==o&&(t[o]=l.item,this._findParentFolderAndAddNewFiles(e,n))}}_findParentFolderAndAddFiles(e,n,t=this.items){if(0!==n.length)if(e)for(let l=0;l<t.length;l++){const o=t[l];if("folder"===o.type){if(o.documentId===e){o.files.push(...n);break}this._findParentFolderAndAddFiles(e,n,o.files)}}else t.push(...n)}_findParentFolderAndRemoveItemsByIds(e,n,t=this.items){if(0!==n.length)if(e)for(let l=0;l<t.length;l++){const o=t[l];if("folder"===o.type){if(o.documentId===e){o.files=o.files.filter(e=>!n.some(n=>n===e.documentId));break}this._findParentFolderAndRemoveItemsByIds(e,n,o.files)}}else{const l=n.pop(),o=t.findIndex(e=>e.documentId===l);-1!==o&&(t.splice(o,1),this._findParentFolderAndRemoveItemsByIds(e,n))}}_generateNewFolder(e){return{documentId:Object(L.H)(),type:"folder",name:e,uploadedBy:{id:Object(L.H)(),name:"You"},uploadedOn:new Date,files:[],status:u.qb.SUCCESSFUL}}}var W=t("tk/3"),B=t("uDY+");let k=(()=>{class e{constructor(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.pb(new R(e))}typeMismatch({source:e,payload:n}){console.log("typeMismatch",e,n)}filenameLengthExceed({source:e,payload:n}){console.log("filenameLengthExceed",e,n)}fileSizeExceed({source:e,payload:n}){console.log("fileSizeExceed",e,n)}}return e.\u0275fac=function(n){return new(n||e)(E.Qb(W.a))},e.\u0275cmp=E.Kb({type:e,selectors:[["fdp-upload-collection-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Wb(0,"fdp-upload-collection",0),E.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),E.Vb()),2&e&&E.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[B.a],encapsulation:2}),e})();var H=t("5HkS");let $=(()=>{class e{constructor(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.pb(new R(e))}typeMismatch({source:e,payload:n}){console.log("typeMismatch",e,n)}filenameLengthExceed({source:e,payload:n}){console.log("filenameLengthExceed",e,n)}fileSizeExceed({source:e,payload:n}){console.log("fileSizeExceed",e,n)}}return e.\u0275fac=function(n){return new(n||e)(E.Qb(W.a))},e.\u0275cmp=E.Kb({type:e,selectors:[["fdp-upload-collection-disabled-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","disabled","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Wb(0,"fdp-upload-collection",0),E.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),E.Vb()),2&e&&E.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[B.a],encapsulation:2}),e})(),q=(()=>{class e{constructor(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.pb(new R(e))}typeMismatch({source:e,payload:n}){console.log("typeMismatch",e,n)}filenameLengthExceed({source:e,payload:n}){console.log("filenameLengthExceed",e,n)}fileSizeExceed({source:e,payload:n}){console.log("fileSizeExceed",e,n)}}return e.\u0275fac=function(n){return new(n||e)(E.Qb(W.a))},e.\u0275cmp=E.Kb({type:e,selectors:[["fdp-upload-collection-readonly-example"]],decls:1,vars:4,consts:[["maxFileSize","1mb","maxFilenameLength","20","readonly","true",3,"dataSource","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Wb(0,"fdp-upload-collection",0),E.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),E.Vb()),2&e&&E.vc("dataSource",n.dataSource)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[B.a],encapsulation:2}),e})(),J=(()=>{class e{constructor(e){this._http=e,this.itemsPerPage=[{label:5,default:!1},{label:10,default:!0},{label:15,default:!1},{label:20,default:!1}],this.mimeTypes=["image/png","image/jpeg"],this.fileTypes=["jpg","png","bmp"],this.dataSource=new u.pb(new R(e))}typeMismatch({source:e,payload:n}){console.log("typeMismatch",e,n)}filenameLengthExceed({source:e,payload:n}){console.log("filenameLengthExceed",e,n)}fileSizeExceed({source:e,payload:n}){console.log("fileSizeExceed",e,n)}}return e.\u0275fac=function(n){return new(n||e)(E.Qb(W.a))},e.\u0275cmp=E.Kb({type:e,selectors:[["fdp-upload-collection-turn-off-example"]],decls:1,vars:6,consts:[["maxFileSize","1mb","maxFilenameLength","20",3,"dataSource","showSearch","enablePagination","mimeTypes","fileTypes","itemsPerPage","typeMismatch","filenameLengthExceed","fileSizeExceed"]],template:function(e,n){1&e&&(E.Wb(0,"fdp-upload-collection",0),E.jc("typeMismatch",function(e){return n.typeMismatch(e)})("filenameLengthExceed",function(e){return n.filenameLengthExceed(e)})("fileSizeExceed",function(e){return n.fileSizeExceed(e)}),E.Vb()),2&e&&E.vc("dataSource",n.dataSource)("showSearch",!1)("enablePagination",!1)("mimeTypes",n.mimeTypes)("fileTypes",n.fileTypes)("itemsPerPage",n.itemsPerPage)},directives:[B.a],encapsulation:2}),e})(),Y=(()=>{class e{constructor(){this.uploadCollection=[{language:"html",code:a,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:o,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:l,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionReadOnly=[{language:"html",code:c,fileName:"upload-collection-example",name:"Html"},{language:"typescript",code:r,fileName:"upload-collection-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:l,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionDisabled=[{language:"html",code:i,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:d,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:l,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}],this.uploadCollectionTurnOff=[{language:"html",code:m,fileName:"upload-collection-disabled-example",name:"Html"},{language:"typescript",code:s,fileName:"upload-collection-disabled-example",component:"UploadCollectionExampleComponent",name:"Component"},{language:"typescript",code:l,fileName:"upload-collection-base",component:"UploadCollectionBaseService",name:"DataProvider"}]}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=E.Kb({type:e,selectors:[["app-platform-upload-collection"]],decls:47,vars:4,consts:[["id","default","componentName","upload-collection"],[3,"exampleFiles"],["id","disabled","componentName","upload-collection"],[1,"code-snippet"],["id","readonly","componentName","upload-collection"],["id","without-pagination-and-search","componentName","upload-collection"]],template:function(e,n){1&e&&(E.Wb(0,"fd-docs-section-title",0),E.Vc(1," Default\n"),E.Vb(),E.Rb(2,"description"),E.Wb(3,"component-example"),E.Rb(4,"fdp-upload-collection-example"),E.Vb(),E.Rb(5,"code-example",1),E.Wb(6,"fd-docs-section-title",2),E.Vc(7," Disabled State\n"),E.Vb(),E.Wb(8,"description"),E.Vc(9,"Use "),E.Wb(10,"code",3),E.Vc(11,'[disable]="true"'),E.Vb(),E.Vc(12," to disable all CRUD buttons."),E.Vb(),E.Wb(13,"component-example"),E.Rb(14,"fdp-upload-collection-disabled-example"),E.Vb(),E.Rb(15,"code-example",1),E.Wb(16,"fd-docs-section-title",4),E.Vc(17," Readonly State\n"),E.Vb(),E.Wb(18,"description"),E.Vc(19,"Use "),E.Wb(20,"code",3),E.Vc(21,'[readonly]="true"'),E.Vb(),E.Vc(22," to hide all CRUD buttons."),E.Vb(),E.Wb(23,"component-example"),E.Rb(24,"fdp-upload-collection-readonly-example"),E.Vb(),E.Rb(25,"code-example",1),E.Wb(26,"fd-docs-section-title",5),E.Vc(27," Without Pagination and Search\n"),E.Vb(),E.Wb(28,"description"),E.Vc(29," Use "),E.Wb(30,"code",3),E.Vc(31,'[showSearch]="false"'),E.Vb(),E.Vc(32," to hide search input, by default "),E.Wb(33,"code",3),E.Vc(34,'[showSearch]="true"'),E.Vb(),E.Vc(35,". "),E.Rb(36,"br"),E.Vc(37," Use "),E.Wb(38,"code",3),E.Vc(39,'[enablePagination]="false"'),E.Vb(),E.Vc(40," to hide pagination, by default "),E.Wb(41,"code",3),E.Vc(42,'[enablePagination]="true"'),E.Vb(),E.Vc(43,".\n"),E.Vb(),E.Wb(44,"component-example"),E.Rb(45,"fdp-upload-collection-turn-off-example"),E.Vb(),E.Rb(46,"code-example",1)),2&e&&(E.Db(5),E.vc("exampleFiles",n.uploadCollection),E.Db(10),E.vc("exampleFiles",n.uploadCollectionDisabled),E.Db(10),E.vc("exampleFiles",n.uploadCollectionReadOnly),E.Db(21),E.vc("exampleFiles",n.uploadCollectionTurnOff))},directives:[P.a,w.a,C.a,k,H.a,$,q,J],encapsulation:2}),e})();var K=t("dor/"),Q=t("trhy"),X=t("RJTZ"),Z=t("Kpas");let G=(()=>{class e{}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=E.Kb({type:e,selectors:[["fd-upload-collection-header"]],decls:31,vars:0,consts:[["label","SAP Ariba Component","title","SAP Ariba Component","color","8"],[1,"code-snippet"],["module","PlatformUploadCollectionModule"]],template:function(e,n){1&e&&(E.Wb(0,"header"),E.Vc(1,"Upload Collection"),E.Vb(),E.Rb(2,"fd-info-label",0),E.Wb(3,"description"),E.Wb(4,"p"),E.Vc(5,"The upload collection allows users to upload one or more files from different devices."),E.Vb(),E.Wb(6,"h3"),E.Vc(7,"Usage"),E.Vb(),E.Wb(8,"p"),E.Vc(9,"Use the upload collection if:"),E.Vb(),E.Wb(10,"ul"),E.Wb(11,"li"),E.Vc(12,"You want to show a list of uploaded files that can be modified."),E.Vb(),E.Wb(13,"li"),E.Vc(14,"You want to allow users to add or remove files, and to change the file names."),E.Vb(),E.Vb(),E.Wb(15,"p"),E.Vc(16,"Don't use the upload collection if:"),E.Vb(),E.Wb(17,"ul"),E.Wb(18,"li"),E.Vc(19,"The user can upload only one file to the app. In this case, use the FileUploader control instead."),E.Vb(),E.Vb(),E.Wb(20,"h3"),E.Vc(21,"Required"),E.Vb(),E.Wb(22,"ul"),E.Wb(23,"li"),E.Vc(24," To use all CRUD operations need to describe "),E.Wb(25,"code",1),E.Vc(26,"UploadCollectionService"),E.Vb(),E.Vc(27," (look at examples) "),E.Vb(),E.Vb(),E.Vb(),E.Rb(28,"import",2),E.Rb(29,"fd-header-tabs"),E.Rb(30,"router-outlet"))},directives:[K.a,Q.a,w.a,X.a,Z.a,p.h],encapsulation:2}),e})();var ee=t("t9W5");const ne=[{path:"",component:G,children:[{path:"",component:Y},{path:"api",component:f.a,data:{content:h.a.uploadCollection}}]}];let te=(()=>{class e{}return e.\u0275fac=function(n){return new(n||e)},e.\u0275mod=E.Ob({type:e}),e.\u0275inj=E.Nb({imports:[[p.g.forChild(ne),ee.a,u.db],p.g]}),e})()}}]);